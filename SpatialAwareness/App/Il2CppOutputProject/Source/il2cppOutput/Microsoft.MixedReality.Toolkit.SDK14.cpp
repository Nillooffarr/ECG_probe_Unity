#include "il2cpp-config.h"

#ifndef _MSC_VER
# include <alloca.h>
#else
# include <malloc.h>
#endif


#include <cstring>
#include <string.h>
#include <stdio.h>
#include <cmath>
#include <limits>
#include <assert.h>
#include <stdint.h>

#include "codegen/il2cpp-codegen.h"
#include "il2cpp-object-internals.h"

struct VirtActionInvoker0
{
	typedef void (*Action)(void*, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1>
struct VirtActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename R, typename T1>
struct VirtFuncInvoker1
{
	typedef R (*Func)(void*, T1, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		return ((Func)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3>
struct VirtActionInvoker3
{
	typedef void (*Action)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename R>
struct VirtFuncInvoker0
{
	typedef R (*Func)(void*, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		return ((Func)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename R, typename T1, typename T2, typename T3>
struct VirtFuncInvoker3
{
	typedef R (*Func)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		return ((Func)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename R>
struct InterfaceFuncInvoker0
{
	typedef R (*Func)(void*, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		return ((Func)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename R, typename T1, typename T2>
struct InterfaceFuncInvoker2
{
	typedef R (*Func)(void*, T1, T2, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1, T2 p2)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		return ((Func)invokeData.methodPtr)(obj, p1, p2, invokeData.method);
	}
};
template <typename T1>
struct InterfaceActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename T1>
struct GenericInterfaceActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};

// Microsoft.MixedReality.Toolkit.Input.HandBounds
struct HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController
struct IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand
struct IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointService
struct IMixedRealityHandJointService_tB9FB80F7FDC77D16300E54C1ABE6C7B9E9153285;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource
struct IMixedRealityInputSource_tE0E928A8AFA1825E798A69EB5D4BE993B8227ED2;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem
struct IMixedRealityInputSystem_t5CCAA5BAD9D45403FCE5D1B3FEEB2E45BA65B22B;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer
struct IMixedRealityPointer_tD7C4CF8940EB016597EF8CED76503F0D39A61C53;
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer[]
struct IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778;
// Microsoft.MixedReality.Toolkit.Input.LinePointer
struct LinePointer_t5101B76E2EFDEFB6FA643831C5C549615BBE2665;
// Microsoft.MixedReality.Toolkit.Input.SourceStateEventData
struct SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8;
// Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection
struct BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873;
// Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic
struct DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0;
// Microsoft.MixedReality.Toolkit.Utilities.Easing
struct Easing_t13E61FF806357D21552C3028585751420EDCD360;
// Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection
struct GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4;
// Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset
struct HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3;
// Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode
struct ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425;
// Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode[]
struct ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9;
// Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler
struct RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0;
// Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection
struct ScatterObjectCollection_t2932B812F93E9835CF59CD0CCD179DF22A0136F0;
// Microsoft.MixedReality.Toolkit.Utilities.Smoothing
struct Smoothing_t9F337CE86D4733AE7ABA92F6135CC68AF8A20E4E;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize
struct ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder
struct ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator
struct DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow
struct Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint
struct HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62
struct U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone[]
struct SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp
struct HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42
struct U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver
struct Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011;
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler
struct SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE;
// System.Action`1<Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection>
struct Action_1_tA52C815DBCC271D58DD715D9119E8FADD0789DB4;
// System.AsyncCallback
struct AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4;
// System.Char[]
struct CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2;
// System.Collections.Generic.Dictionary`2/Entry<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>[]
struct EntryU5BU5D_tA5D6501185CC2CC858ED5A6A2A28E8FED432FACC;
// System.Collections.Generic.Dictionary`2/KeyCollection<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>
struct KeyCollection_t55952BFF4671201BA9874E79E6B15AF6A0D0C33B;
// System.Collections.Generic.Dictionary`2/ValueCollection<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>
struct ValueCollection_t5514712A42A2EEF80CACE4378B298A31D7FB3969;
// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>
struct Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0;
// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Matrix4x4>
struct Dictionary_2_t6D450793C27BD2AB4FD2C371EE20ED59D572B3D3;
// System.Collections.Generic.Dictionary`2<System.ByteEnum,UnityEngine.Bounds>
struct Dictionary_2_t3A5FD15F1CA4E8B8943DFFB112420B6B2B19D760;
// System.Collections.Generic.HashSet`1/Slot<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>[]
struct SlotU5BU5D_tA5D96D5A9783D79ABFFFC777115F940BDC4D3580;
// System.Collections.Generic.HashSet`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>
struct HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229;
// System.Collections.Generic.HashSet`1<System.Object>
struct HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3;
// System.Collections.Generic.IEqualityComparer`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>
struct IEqualityComparer_1_tAAAF3681567B6F264703A0E15FC97E88BBF520D3;
// System.Collections.Generic.IEqualityComparer`1<Microsoft.MixedReality.Toolkit.Utilities.Handedness>
struct IEqualityComparer_1_t28F88FE5EC542E917A9D7944FA6806696F0C1CB4;
// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>
struct List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE;
// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver>
struct List_1_t03B34F7709599434AEB744E8135E739798FC6B4F;
// System.Collections.Generic.List`1<System.Object>
struct List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D;
// System.Collections.IDictionary
struct IDictionary_t1BD5C1546718A374EA8122FBD6C6EE45331E8CE7;
// System.Collections.IEnumerator
struct IEnumerator_t8789118187258CC88B77AFAC6315B5AF87D3E18A;
// System.Comparison`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>
struct Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4;
// System.Comparison`1<System.Object>
struct Comparison_1_tD9DBDF7B2E4774B4D35E113A76D75828A24641F4;
// System.DelegateData
struct DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE;
// System.Delegate[]
struct DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86;
// System.Diagnostics.StackTrace[]
struct StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196;
// System.IAsyncResult
struct IAsyncResult_t8E194308510B375B42432981AE5E7488C458D598;
// System.Int32Enum[]
struct Int32EnumU5BU5D_t0A5530B4D0EA3796F661E767F9F7D7005A62CE4A;
// System.Int32[]
struct Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83;
// System.IntPtr[]
struct IntPtrU5BU5D_t4DC01DCB9A6DF6C9792A6513595D7A11E637DCDD;
// System.NotSupportedException
struct NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010;
// System.Object[]
struct ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A;
// System.Reflection.MethodInfo
struct MethodInfo_t;
// System.Runtime.Serialization.SafeSerializationManager
struct SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770;
// System.Runtime.Serialization.SerializationInfo
struct SerializationInfo_t1BB80E9C9DEA52DBF464487234B045E2930ADA26;
// System.String
struct String_t;
// System.Void
struct Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017;
// UnityEngine.AnimationCurve
struct AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C;
// UnityEngine.Camera
struct Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34;
// UnityEngine.Camera/CameraCallback
struct CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0;
// UnityEngine.Collider
struct Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF;
// UnityEngine.Collider[]
struct ColliderU5BU5D_t70D1FDAE17E4359298B2BAA828048D1B7CFFE252;
// UnityEngine.Component
struct Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621;
// UnityEngine.Coroutine
struct Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC;
// UnityEngine.EventSystems.EventSystem
struct EventSystem_t06ACEF1C8D95D44D3A7F57ED4BAA577101B4EA77;
// UnityEngine.Events.InvokableCallList
struct InvokableCallList_t18AA4F473C7B295216B7D4B9723B4F3DFCCC9A3F;
// UnityEngine.Events.PersistentCallGroup
struct PersistentCallGroup_t6E5DF2EBDA42794B5FE0C6DAA97DF65F0BFF571F;
// UnityEngine.Events.UnityEvent
struct UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F;
// UnityEngine.GameObject
struct GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F;
// UnityEngine.Keyframe[]
struct KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D;
// UnityEngine.Mesh
struct Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C;
// UnityEngine.MonoBehaviour
struct MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429;
// UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0;
// UnityEngine.RectTransform
struct RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20;
// UnityEngine.RectTransform/ReapplyDrivenProperties
struct ReapplyDrivenProperties_t431F4FBD9C59AE097FE33C4354CC6251B01B527D;
// UnityEngine.Renderer
struct Renderer_t0556D67DD582620D1F495627EDE30D03284151F4;
// UnityEngine.Renderer[]
struct RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93;
// UnityEngine.Transform
struct Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA;
// UnityEngine.Vector3[]
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28;

IL2CPP_EXTERN_C Il2CppSequencePoint g_sequencePointsMicrosoft_MixedReality_Toolkit[];
IL2CPP_EXTERN_C Il2CppSequencePoint g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK[];
IL2CPP_EXTERN_C RuntimeClass* AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* BoundsExtensions_t65D5B81F0B4D8D20A4798B651AD4C93A9A761859_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Easing_t13E61FF806357D21552C3028585751420EDCD360_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityControllerVisualizer_tF11B01C18D3E7D9443AFA3B890520D0F196716C5_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityCursor_t5CB717D2AFE455FE2DC89AB280C35323D0670E05_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityInputSource_tE0E928A8AFA1825E798A69EB5D4BE993B8227ED2_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityInputSystem_t5CCAA5BAD9D45403FCE5D1B3FEEB2E45BA65B22B_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* IMixedRealityPointer_tD7C4CF8940EB016597EF8CED76503F0D39A61C53_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeField* U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765____C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10_FieldInfo_var;
IL2CPP_EXTERN_C String_t* _stringLiteral354BAE277397EE63CBAD0D35735B3CDE930323D1;
IL2CPP_EXTERN_C String_t* _stringLiteral50B5B968AF864CDF79AEA1287DD359A68755D54F;
IL2CPP_EXTERN_C String_t* _stringLiteral7160A9C4DEE47E26FD9CC4B22D1E1DB1642B97BB;
IL2CPP_EXTERN_C String_t* _stringLiteral9144754C25D0CBDBB7BBF4497B2F143DE5CCFBE6;
IL2CPP_EXTERN_C String_t* _stringLiteralAE24D13D028A85FC6B9A5C93B1AF04708DA0C955;
IL2CPP_EXTERN_C String_t* _stringLiteralBE46EBBCE2D34C657657AC4DB28D959908FA7215;
IL2CPP_EXTERN_C String_t* _stringLiteralC5C886D163EC383C8EC7FA0191C5FF341113A89B;
IL2CPP_EXTERN_C String_t* _stringLiteralD5F2B42FDCA2897E50838908138E953DF1E2CC8B;
IL2CPP_EXTERN_C String_t* _stringLiteralE7064F0B80F61DBC65915311032D27BAA569AE2A;
IL2CPP_EXTERN_C String_t* _stringLiteralF7E8D8FA41CB0C1CCEB687AB4AE503CE4773E4AE;
IL2CPP_EXTERN_C const RuntimeMethod* Array_IndexOf_TisSolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5_m0212C0F4B0CA593D89081B9D01E9CC0363E9B60A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Comparison_1__ctor_m15AE944F3556CD05B000BF7B327058B44D4B1FB5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Component_GetComponentInChildren_TisCollider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF_m92EFF432C642AEB971AAC3333F7A7170A7CC3318_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Component_GetComponent_TisHandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E_m4C730F9D6CDB58BF40E7306BEDB928C9CA4DB376_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Component_GetComponent_TisRectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_mEF939F54B6B56187EC11E16F51DCB12EB62C2103_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_SolverUpdate_m2531A3107824B2C0152168AE4544C6505A93DDD9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_Start_m991C3583D06EEC3052488EF77708026BDEB0076D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize__ctor_m53FE26DAFB1C31B8EA1DBB9833A681CDCB4A792C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_CurrentDistancePercent_mB4AB53DCD03FE83B5997FA682DCA43B890761092_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_ManualObjectSize_m493D00EAEC7C782B3C06D28D5CC1258EAC3F1FAB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_MaxDistance_m1265D0CFB5E13137EE6387EFDDB0E16F35F37E60_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_MaxScale_mA258B9E56784FA2CF3326ABCC1EE07881C6FC9A1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_MinDistance_m51DAF1429F8B13DD081BE8BBFE873AED8EDFB514_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_MinScale_mAB2ED4BACBA4450849EF242A58260BEC0D941821_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_ScaleBuffer_m6C3525CECD2FC1BA982CF0C13C0AC2DCDA885B3A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_ScaleState_mD29CAC794F4323C8C85ECA330F401925E7027055_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_get_TargetViewPercentV_m88FF9DCC3CE75F7DB723CF6844E3041C9A53CF3B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_ManualObjectSize_m3C94423A6B49C183B0DC6E0E73F9E0B4B979C147_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_MaxDistance_m5365BC141C83BA50292851E138B5CE35F2A72897_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_MaxScale_m12C91C8485610EE0918A100206FCBC487DE52E1F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_MinDistance_m271FE2C1B049650FFD0AE2AAB3D3B1B91BFB7672_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_MinScale_m4BF7689396B19DFC0A0C4924D9769F362B36ACEF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_ScaleBuffer_m61675638693FFAB7B33A3BC88AF2268C9E4C4854_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ConstantViewSize_set_TargetViewPercentV_m028D7EFDF455190B3CE237761E29400823D9E0F7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_AddControllerTransform_m460890F21C2057D3022AF7069027E1BABB002BDF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnControllerFound_m2A0EE282AF2D6B6FDD335E0A47EBBEF2D1A04841_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnControllerLost_m6A8DD6B07DC4AACBAEF02D5CB28879A3CA9E1CDF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnDisable_m3A5F3DC27832AEE2F216CD8384FEAFCDBC550ED5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnEnable_m121B6255DD6B5CA18731F68B8D562600519F3217_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnSourceDetected_mCFA11CBDE6BAC872F3613A228E230D06AB0E15CD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_OnSourceLost_mCF4191E8BF05F0D02A3BE105B59FFFADAFEF09A0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_RefreshControllerTransform_m150FC68FF1FB3A1270BD64A2BC3652132F4B6417_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_RemoveControllerTransform_mE963ADDACEC4E04C28DE0CE68E70B287CF49E7F8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_TryAndAddControllerTransform_mE17792545F0D536A2F91701128EB2B70993A0B63_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder__ctor_m1826BF754FE127E816A0E612F997916D2BECB853_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_get_Handedness_m3CC7CA1D8AB3141034373253ED7A2D852F75A6E9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ControllerFinder_set_Handedness_mDFED4A63D6F9D2AFAC4368132B068ADF1BE5717A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DefaultTransformSmoothingLogic_SmoothPosition_mAD11D462EB3A29B478A9D976B82A8B6934070D5B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DefaultTransformSmoothingLogic_SmoothRotation_mB84EA832634EA505C87D98105D40B0B821EE94F0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DefaultTransformSmoothingLogic_SmoothScale_mF04160253EDB42A47F8AF3C6D7F3A932238A9CD4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DefaultTransformSmoothingLogic__ctor_mFEEB60E336ADBEE5F298951AC5989F439DF37B74_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator_SolverUpdate_mF817A86515F3BE5AD8D6FAACE2EFB76CCC175E71_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator_Start_mFF4129B9D9EC8591F77B19A7B50642657A6E5C3D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator_Update_mFCDC43C73B34012633D7369B145FD608E88049C3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* DirectionalIndicator__ctor_m042C2CD3124F5D2AAFA3433BDC322990E8FCEA8C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_Copy_m2CE22F56D661CDEEF33B0086364B4FB423B7B8B2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_GetCurved_m9D5584ABEA8C9BAFA1413C9AF5489F218118C927_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_IsPlaying_mD9796731BAE0880DE22C6DC90633AA955A771901_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_OnUpdate_mA6B09E77C4D71046C7E2C7E0E95115C39E1054F0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_SetCurve_m2FF160EB0297CE2CE1BDC50BD7C247186A2035DE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_Start_mCD043C274909CE53824E2AD14A4763770F327A50_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_OnEnable_m7564FE8890C4B95F4B84037F6A28BD864030A525_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_Recenter_mA6A972E24E30FCB7890201DD5EE4808424F6FC42_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_SolverUpdate_mD94B088CC81E067A0E9E97F7DEC059EA56918D89_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow__ctor_m48520A35B6DC82F5AF4D50A63A5DE36A5F3CD52C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_AngularClampMode_mCDE4E6D83ADBB0E889CBB9EF7543D44F0B9EF593_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_BoundsScaler_mD3A43892AB608E45BE85DC040C47E7F8D33AD327_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_IgnoreAngleClamp_mAFBAB7B4956582516C398BD2FEDB7EBF9C0C6E49_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_IgnoreDistanceClamp_mB10E63A2DB207ABFB5C18B26CE5CF850ADF2FBFA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_ReorientWhenOutsideParameters_m9C74486EBF4BB7FA21ED07632734002DD20E59CA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_TetherAngleSteps_mD496CA20C434E4C6C1A7DC3516B514663757E1DF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_AngularClampMode_m58F88F8805B4C5DA6DEB7C42154F877E39C6FDEC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_BoundsScaler_m00C8734BCBD6CA0CB5D80362CDDA3BB9CCC71383_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_DefaultDistance_mD7F91619CD48C603AF9E55D2E3271A8219FEEF64_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_FaceTrackedObjectWhileClamped_m08932779B799BF1714F057F903A5FF45CC361B53_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_FaceUserDefinedTargetTransform_mD7EB957628CDE807BAA24530A7368D240B24E078_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_IgnoreAngleClamp_m6D4F2FE92F26B25A63FA736AFD9742BEC6D32778_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_IgnoreDistanceClamp_m483CBB001E4A4D92406DBFF4E01A2AD27E762B25_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_IgnoreReferencePitchAndRoll_m8589A0AFFB70CC82192B9B73588C843954F00F2E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_MaxDistance_mB887ADF0B8B11755024849A73332182CF5F237F9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_MaxViewHorizontalDegrees_mA9AA90F15452AA140775C3C2017E4A99EB25A6A7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_MaxViewVerticalDegrees_m843654E15854DACD29BA53B791B957EB0419D635_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_MinDistance_mE71071CBEC1574012E53101B770365D28908AB62_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_OrientToControllerDeadzoneDegrees_mC2877B752FA1E055AC981EDE4F245114ECD4BB6D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_OrientationType_mC2DB45099957BA1219EC308C20021BCC5269A1C1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_PitchOffset_m2B075A993EC36A7C36C94D1400CBB73AC1D3182F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_PivotAxis_m86EE03789188243A289BA4617B21FAA455CE5BAA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_ReorientWhenOutsideParameters_m476745EA12EF6E68D7FED4EBBF2A6C23CC28CE00_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_TargetToFace_mFF886366A56BCE482D5D902DAD9912DBD5103209_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_TetherAngleSteps_m85208F881584B3B53F62E4E606BD615820EB2EE7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Follow_set_VerticalMaxDistance_m5A44D07D011399ED13CA0E527C9F3C475DE1521A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_LayoutChildren_m5A1603983042D651824A34FFC19D75800740D532_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_OnDrawGizmosSelected_mEC179401E69AB9C1011B94077120DF5768A7590F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_PerformVersionPatching_m487825AEFAC10E9A229179A1F48B7BB5E6C2667E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_AnchorAlongAxis_m26BB73F08882EA22FAA1DD70B3F0E6BBEDDA4D92_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Anchor_m235D7EB256320DD48B432BE1FB5716074E344993_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Distance_m0B24FE0B3504B8EF06114B505D236E5C8DE2A056_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Height_m12566193197F15400DE0D2B9D25A174C0F50816A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_RadialRange_m931D65BD00BCF6715D45D7217D566F1D299AA587_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_get_Width_m4747F0A39278888CDBA6A08631A660FB4D18EC7B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_AnchorAlongAxis_mBCD1AD30B6B4DC431999F800D9E459CBCA0A4FDD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Anchor_m8811CDA295DEFBF60F5659844387BB4F0338257A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_CellHeight_m2010B0EB3DAFB3587E753C89D99F1F8E930086B3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_CellWidth_m3FB013D09E5B26F7B37098E18B55E6878129CC7D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_ColumnAlignment_m4F26750655314F62C35147209560DB2BBA4E5BFE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_CylinderMesh_mA3F0966A74F435D0CEA94EFD1CAEDC52FA1A3409_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Distance_m329EC03818115B3395ECAE07CB8A720B3D127331_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_OrientType_m2D5C72EFDDC347076A3A8A121A4B875F175D663E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_RadialRange_m17D739A979C001395D51C5A570A3E53EB17E4C43_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Radius_mC81E0E514E40C8ADB5AD8C2A694179E8D22329D0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_RowAlignment_m8170672C4D8E726AC31A7ADCAA29F9FDCC1CACF3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_Rows_m59D835BB2B42F605422D2FE97B8306D02F26ACFA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_SphereMesh_m42E14CF7B729C156497A43AFB2A533AFF787D646_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* GridObjectCollection_set_SurfaceType_m409F34CAEEAD4D4655F8A62D340FF5395746594F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_IsValidController_mD977131BC6E203871C35BF7AD99807FC41A92C22_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_OnEnable_mB4F85EBC314406673C36DEA7A748E58C3CF27EE1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_StartWorldLockReattachCheckCoroutine_m137A67F6168C0B173BF8DC8B8A41C4919E8FED44_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp__ctor_m789CD04DCDBF06802429647197398D1359D563F4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_EyeGazeProximityThreshold_mBF50491FC3C68BE544F44EC54859390C9F0046C7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_FacingThreshold_m2E776E1833A99123C3E9280F3C929632F1FD3F2B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_FlatHandThreshold_m76D4C6D6B0190D15F69B83E7F07FA101D957A7DC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_FollowHandCameraFacingThresholdAngle_m6E198FCE5FCE44D8F7B00418707D3D090D94C94B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_FollowHandUntilFacingCamera_m2B0A1D9323B72578781DBA2715759CC4FC3A2EF6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_HeadGazeProximityThreshold_mE0AD784334BEE357804D986906D599BCD6D50E42_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_RequireFlatHand_m0D9669EF45765191072940032B2E840DD042E169_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_get_UseGazeActivation_m926C99CFCEB2615B8E3532E1534E58F7FA807C9E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_EyeGazeProximityThreshold_m9AD44FB25243B67EEC2D22B87640D7222C8ABB6F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_FacingThreshold_m03FD2A6DF4A7436A411AE268428CE36588D0E286_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_FlatHandThreshold_m7124B66AA1E8EC680AFA472FB918040E840CFAA7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_FollowHandCameraFacingThresholdAngle_m1E5D6374DB8EFF9246F753ADB2456ADC0BD47692_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_FollowHandUntilFacingCamera_m52AEC4E4BBEF9738EA4331F5EDB7B301DCD4FB9E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_HeadGazeProximityThreshold_mDA9F8BEC1717AB60E997505D6DDF4544ED4D87B6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_RequireFlatHand_m3387F5A62BF7E3DAE88B84B34718AA075C1FD95D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraintPalmUp_set_UseGazeActivation_m249B7437DC9A549170548BA25F146DCAA6CA9D0A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_CalculateGoalPosition_mC16716A23BEA45792716B66EE4F5E7606C050877_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_CalculateGoalRotation_m62CC8B34F0F527C6F01E8C26E67F566CDB199F46_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_IsApplicableController_m6A775EE0DA5665713600A1AB40CBBA60C2E480D0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_IsOppositeHandNear_m011D2C9383CC692D92AC52437DCAE119B4364652_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_SolverUpdate_mB6CD00739671F6D575C4A9358940612B01C84E02_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_ToggleCursors_mE985EC6CD4A4E930F7015DF18C2F5A04CCB2D117_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint__cctor_mB27CEFA3C5DC257CE9A952EFB9E6467F68EE52E6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_Handedness_mA01336521C8E505AE46DF49EEF04E970E94180CB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_HideHandCursorsOnActivate_m1B8D06C354FD54E969E84ADCE9383CEEC2489BDB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_RotationBehavior_mA91781668E0CC7D1BB859E9C106B7B60C337E4C0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_SafeZoneAngleOffset_m4D330EB6A9AC074051B6BCDA7ECD19F16B6A99A5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_SafeZoneBuffer_mEE697AF5521AF89E75306B223C0E7E09DB95EDB1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_get_UpdateWhenOppositeHandNear_mE7336624369976088B9842E543ADAB54619BA6F0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_ForwardOffset_mDFDA56423946B50EFB22ADAB9B5FA31060B0B960_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_HideHandCursorsOnActivate_mF060A193919F7362172CD1C83024753E0DF0ECA5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_OnFirstHandDetected_mA977862AE00D76E4E63BAFCE2C72777661F0A72B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_OnHandActivate_m80EF0A2685F8ED10133D4E75F39BE211C3F1E944_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_OnHandDeactivate_m09124DB825A202A62E677D4CA88D317E96D65A4B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_OnLastHandLost_m2936352DE416D49855D4DF4722CF85F26EE8B5E0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_SafeZoneAngleOffset_mFF3C8BDB77D2E260952557C5C4EC944AE84C8B06_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_SafeZoneBuffer_mD910F855D03632FD808B79D3F87B1338F267A3E6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_SafeZone_m1B35B60DDC6D4E96A68BB401230014186A12E9AD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HandConstraint_set_UpdateWhenOppositeHandNear_mCACBF6D38FA6BDC3591FEF561043AC1D9C7CE02D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HeadPositionOffset_OnEnable_mABAD8950E285FE6A703C4C088DCC99C67D59E851_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HeadPositionOffset_Start_m693E19366C7205D96F7D17CF2C412DDCA4F97347_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* HeadPositionOffset__ctor_mB9A4E41B46CE874EEEF94B4E5DAFC0DE2A56C4DE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* IMixedRealityEventSystem_RegisterHandler_TisIMixedRealitySourceStateHandler_tB51E20DDBCE630C7ABE435D0F71416CC2D628870_m47B07025FD5C8A66BA152D91C274B257BC986164_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* IMixedRealityEventSystem_UnregisterHandler_TisIMixedRealitySourceStateHandler_tB51E20DDBCE630C7ABE435D0F71416CC2D628870_mF0FE6BDF3711F115C265014A0CB44A0F61EAF864_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_Sort_m323C2301497D0BAFC3256EA3601B5F697F0A008D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ObjectCollectionNode__ctor_mFC564274121B77F0053319D6B78A4BAC97781BD4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* RectTransformCubeScaler_Start_m4203AF72574495302E43130EE6BA9AEAF06AD0D4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* RectTransformCubeScaler_Update_m22F11390C664A279EF4B0334568CED8CACE06E31_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* RectTransformCubeScaler__ctor_mCE3A9510E1B34F8FA4F63AC8AD811D87BB544F47_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ScatterObjectCollection_LayoutChildren_m2D5110CFE453F408A95F252F89AC6F79AB475984_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* ScatterObjectCollection__ctor_m7A8890F55C13313189B24514C8B9B8A5D7CF4040_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* Smoothing__ctor_m9D4ABAC4BBCCA1B2C6341120DAC4FE99CD9533E3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62_MoveNext_mB7C8B85FCBFFB594DA67437F9F664BD7A59D3718_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_mBC8322915428F92D1D2256D0E289FB7D77F2FB48_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_get_Current_m58BE25D249A46A1FB96E1AD0F31DEB1526F148F1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62_System_IDisposable_Dispose_m2D647784EF6EDA93F8ED92DD2778106F6E26D734_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeType* AngularClampType_tCC8086D7102990E12CE5A41D5E403ADFE75247B5_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* BasicEaseCurves_t98A7EE5DBB8CE5EB9C18223017FD2DA9C78ABF9A_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Boolean_tB53F6830F670160873277339AA58F15CAED4399C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Easing_t13E61FF806357D21552C3028585751420EDCD360_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Handedness_tA51C49CA286A1BC201E1680F521639E9AC1165AB_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* IMixedRealityPointer_tD7C4CF8940EB016597EF8CED76503F0D39A61C53_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Int32_t585191389E07734F19F3156FF88FB3EF4800D102_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* LayoutAnchor_t2EBE10B32649E6BB5397827A8BFAD1C8AD9B2914_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* LayoutHorizontalAlignment_t7D6E56488785A501AFED9095CD688E0744EE3E48_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* LayoutOrder_tEEB3CE75A90E480BA984ADC4632861C017D51C0A_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* LayoutVerticalAlignment_tE626FCEA65D2DC8A9FE06DBD89C572A06DD6B025_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ObjectOrientationSurfaceType_tEA4BE4186E677D04B5105B7CF9F5026895AF9F5D_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* OrientationType_tB6FB0E1746B10E1C14DCCEF33535D2EF537D1BEC_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Rect_t35B976DE901B5423C11705E156938EA27AB402CE_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Renderer_t0556D67DD582620D1F495627EDE30D03284151F4_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ScatterObjectCollection_t2932B812F93E9835CF59CD0CCD179DF22A0136F0_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SolverOrientationType_t76AF2F52E10AB44FF66F622603C8954247BCFBFD_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SolverRotationBehavior_tBB8D80D2AA5931C289965C0AAF2559BF8CA1C05D_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* String_t_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* TrackedHandJoint_tDE2FD40782A5B0C1D39386D6BF70D8A1CCF94E22_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_0_0_0_var;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_SolverUpdate_m2531A3107824B2C0152168AE4544C6505A93DDD9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_Start_m991C3583D06EEC3052488EF77708026BDEB0076D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize__ctor_m53FE26DAFB1C31B8EA1DBB9833A681CDCB4A792C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_CurrentDistancePercent_mB4AB53DCD03FE83B5997FA682DCA43B890761092_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_ManualObjectSize_m493D00EAEC7C782B3C06D28D5CC1258EAC3F1FAB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_MaxDistance_m1265D0CFB5E13137EE6387EFDDB0E16F35F37E60_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_MaxScale_mA258B9E56784FA2CF3326ABCC1EE07881C6FC9A1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_MinDistance_m51DAF1429F8B13DD081BE8BBFE873AED8EDFB514_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_MinScale_mAB2ED4BACBA4450849EF242A58260BEC0D941821_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_ScaleBuffer_m6C3525CECD2FC1BA982CF0C13C0AC2DCDA885B3A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_ScaleState_mD29CAC794F4323C8C85ECA330F401925E7027055_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_get_TargetViewPercentV_m88FF9DCC3CE75F7DB723CF6844E3041C9A53CF3B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_ManualObjectSize_m3C94423A6B49C183B0DC6E0E73F9E0B4B979C147_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_MaxDistance_m5365BC141C83BA50292851E138B5CE35F2A72897_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_MaxScale_m12C91C8485610EE0918A100206FCBC487DE52E1F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_MinDistance_m271FE2C1B049650FFD0AE2AAB3D3B1B91BFB7672_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_MinScale_m4BF7689396B19DFC0A0C4924D9769F362B36ACEF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_ScaleBuffer_m61675638693FFAB7B33A3BC88AF2268C9E4C4854_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ConstantViewSize_set_TargetViewPercentV_m028D7EFDF455190B3CE237761E29400823D9E0F7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_AddControllerTransform_m460890F21C2057D3022AF7069027E1BABB002BDF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnControllerFound_m2A0EE282AF2D6B6FDD335E0A47EBBEF2D1A04841_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnControllerLost_m6A8DD6B07DC4AACBAEF02D5CB28879A3CA9E1CDF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnDisable_m3A5F3DC27832AEE2F216CD8384FEAFCDBC550ED5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnEnable_m121B6255DD6B5CA18731F68B8D562600519F3217_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnSourceDetected_mCFA11CBDE6BAC872F3613A228E230D06AB0E15CD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_OnSourceLost_mCF4191E8BF05F0D02A3BE105B59FFFADAFEF09A0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_RefreshControllerTransform_m150FC68FF1FB3A1270BD64A2BC3652132F4B6417_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_RemoveControllerTransform_mE963ADDACEC4E04C28DE0CE68E70B287CF49E7F8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_TryAndAddControllerTransform_mE17792545F0D536A2F91701128EB2B70993A0B63_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder__ctor_m1826BF754FE127E816A0E612F997916D2BECB853_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_get_Handedness_m3CC7CA1D8AB3141034373253ED7A2D852F75A6E9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ControllerFinder_set_Handedness_mDFED4A63D6F9D2AFAC4368132B068ADF1BE5717A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DefaultTransformSmoothingLogic_SmoothPosition_mAD11D462EB3A29B478A9D976B82A8B6934070D5B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DefaultTransformSmoothingLogic_SmoothRotation_mB84EA832634EA505C87D98105D40B0B821EE94F0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DefaultTransformSmoothingLogic_SmoothScale_mF04160253EDB42A47F8AF3C6D7F3A932238A9CD4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DefaultTransformSmoothingLogic__ctor_mFEEB60E336ADBEE5F298951AC5989F439DF37B74_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator_SolverUpdate_mF817A86515F3BE5AD8D6FAACE2EFB76CCC175E71_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator_Start_mFF4129B9D9EC8591F77B19A7B50642657A6E5C3D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator_Update_mFCDC43C73B34012633D7369B145FD608E88049C3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DirectionalIndicator__ctor_m042C2CD3124F5D2AAFA3433BDC322990E8FCEA8C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_Copy_m2CE22F56D661CDEEF33B0086364B4FB423B7B8B2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_GetCurved_m9D5584ABEA8C9BAFA1413C9AF5489F218118C927_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_IsPlaying_mD9796731BAE0880DE22C6DC90633AA955A771901_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_OnUpdate_mA6B09E77C4D71046C7E2C7E0E95115C39E1054F0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_SetCurve_m2FF160EB0297CE2CE1BDC50BD7C247186A2035DE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_Start_mCD043C274909CE53824E2AD14A4763770F327A50_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_OnEnable_m7564FE8890C4B95F4B84037F6A28BD864030A525_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_Recenter_mA6A972E24E30FCB7890201DD5EE4808424F6FC42_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_SolverUpdate_mD94B088CC81E067A0E9E97F7DEC059EA56918D89_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow__ctor_m48520A35B6DC82F5AF4D50A63A5DE36A5F3CD52C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_AngularClampMode_mCDE4E6D83ADBB0E889CBB9EF7543D44F0B9EF593_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_BoundsScaler_mD3A43892AB608E45BE85DC040C47E7F8D33AD327_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_IgnoreAngleClamp_mAFBAB7B4956582516C398BD2FEDB7EBF9C0C6E49_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_IgnoreDistanceClamp_mB10E63A2DB207ABFB5C18B26CE5CF850ADF2FBFA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677CMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BFMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_ReorientWhenOutsideParameters_m9C74486EBF4BB7FA21ED07632734002DD20E59CA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_TetherAngleSteps_mD496CA20C434E4C6C1A7DC3516B514663757E1DF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_AngularClampMode_m58F88F8805B4C5DA6DEB7C42154F877E39C6FDEC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_BoundsScaler_m00C8734BCBD6CA0CB5D80362CDDA3BB9CCC71383_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_DefaultDistance_mD7F91619CD48C603AF9E55D2E3271A8219FEEF64_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_FaceTrackedObjectWhileClamped_m08932779B799BF1714F057F903A5FF45CC361B53_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_FaceUserDefinedTargetTransform_mD7EB957628CDE807BAA24530A7368D240B24E078_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_IgnoreAngleClamp_m6D4F2FE92F26B25A63FA736AFD9742BEC6D32778_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_IgnoreDistanceClamp_m483CBB001E4A4D92406DBFF4E01A2AD27E762B25_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_IgnoreReferencePitchAndRoll_m8589A0AFFB70CC82192B9B73588C843954F00F2E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_MaxDistance_mB887ADF0B8B11755024849A73332182CF5F237F9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_MaxViewHorizontalDegrees_mA9AA90F15452AA140775C3C2017E4A99EB25A6A7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_MaxViewVerticalDegrees_m843654E15854DACD29BA53B791B957EB0419D635_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_MinDistance_mE71071CBEC1574012E53101B770365D28908AB62_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_OrientToControllerDeadzoneDegrees_mC2877B752FA1E055AC981EDE4F245114ECD4BB6D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_OrientationType_mC2DB45099957BA1219EC308C20021BCC5269A1C1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_PitchOffset_m2B075A993EC36A7C36C94D1400CBB73AC1D3182F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_PivotAxis_m86EE03789188243A289BA4617B21FAA455CE5BAA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_ReorientWhenOutsideParameters_m476745EA12EF6E68D7FED4EBBF2A6C23CC28CE00_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_TargetToFace_mFF886366A56BCE482D5D902DAD9912DBD5103209_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_TetherAngleSteps_m85208F881584B3B53F62E4E606BD615820EB2EE7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Follow_set_VerticalMaxDistance_m5A44D07D011399ED13CA0E527C9F3C475DE1521A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_LayoutChildren_m5A1603983042D651824A34FFC19D75800740D532_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_OnDrawGizmosSelected_mEC179401E69AB9C1011B94077120DF5768A7590F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_PerformVersionPatching_m487825AEFAC10E9A229179A1F48B7BB5E6C2667E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_AnchorAlongAxis_m26BB73F08882EA22FAA1DD70B3F0E6BBEDDA4D92_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Anchor_m235D7EB256320DD48B432BE1FB5716074E344993_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Distance_m0B24FE0B3504B8EF06114B505D236E5C8DE2A056_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Height_m12566193197F15400DE0D2B9D25A174C0F50816A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_RadialRange_m931D65BD00BCF6715D45D7217D566F1D299AA587_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_get_Width_m4747F0A39278888CDBA6A08631A660FB4D18EC7B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_AnchorAlongAxis_mBCD1AD30B6B4DC431999F800D9E459CBCA0A4FDD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Anchor_m8811CDA295DEFBF60F5659844387BB4F0338257A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_CellHeight_m2010B0EB3DAFB3587E753C89D99F1F8E930086B3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_CellWidth_m3FB013D09E5B26F7B37098E18B55E6878129CC7D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_ColumnAlignment_m4F26750655314F62C35147209560DB2BBA4E5BFE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_CylinderMesh_mA3F0966A74F435D0CEA94EFD1CAEDC52FA1A3409_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Distance_m329EC03818115B3395ECAE07CB8A720B3D127331_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_OrientType_m2D5C72EFDDC347076A3A8A121A4B875F175D663E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_RadialRange_m17D739A979C001395D51C5A570A3E53EB17E4C43_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Radius_mC81E0E514E40C8ADB5AD8C2A694179E8D22329D0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_RowAlignment_m8170672C4D8E726AC31A7ADCAA29F9FDCC1CACF3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_Rows_m59D835BB2B42F605422D2FE97B8306D02F26ACFA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_SphereMesh_m42E14CF7B729C156497A43AFB2A533AFF787D646_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t GridObjectCollection_set_SurfaceType_m409F34CAEEAD4D4655F8A62D340FF5395746594F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_IsValidController_mD977131BC6E203871C35BF7AD99807FC41A92C22_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_OnEnable_mB4F85EBC314406673C36DEA7A748E58C3CF27EE1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_StartWorldLockReattachCheckCoroutine_m137A67F6168C0B173BF8DC8B8A41C4919E8FED44_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp__ctor_m789CD04DCDBF06802429647197398D1359D563F4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_EyeGazeProximityThreshold_mBF50491FC3C68BE544F44EC54859390C9F0046C7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BDMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FacingThreshold_m2E776E1833A99123C3E9280F3C929632F1FD3F2B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FlatHandThreshold_m76D4C6D6B0190D15F69B83E7F07FA101D957A7DC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FollowHandCameraFacingThresholdAngle_m6E198FCE5FCE44D8F7B00418707D3D090D94C94B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_FollowHandUntilFacingCamera_m2B0A1D9323B72578781DBA2715759CC4FC3A2EF6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_HeadGazeProximityThreshold_mE0AD784334BEE357804D986906D599BCD6D50E42_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_RequireFlatHand_m0D9669EF45765191072940032B2E840DD042E169_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_get_UseGazeActivation_m926C99CFCEB2615B8E3532E1534E58F7FA807C9E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_EyeGazeProximityThreshold_m9AD44FB25243B67EEC2D22B87640D7222C8ABB6F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FacingThreshold_m03FD2A6DF4A7436A411AE268428CE36588D0E286_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FlatHandThreshold_m7124B66AA1E8EC680AFA472FB918040E840CFAA7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FollowHandCameraFacingThresholdAngle_m1E5D6374DB8EFF9246F753ADB2456ADC0BD47692_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_FollowHandUntilFacingCamera_m52AEC4E4BBEF9738EA4331F5EDB7B301DCD4FB9E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_HeadGazeProximityThreshold_mDA9F8BEC1717AB60E997505D6DDF4544ED4D87B6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_RequireFlatHand_m3387F5A62BF7E3DAE88B84B34718AA075C1FD95D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraintPalmUp_set_UseGazeActivation_m249B7437DC9A549170548BA25F146DCAA6CA9D0A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_CalculateGoalPosition_mC16716A23BEA45792716B66EE4F5E7606C050877_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_CalculateGoalRotation_m62CC8B34F0F527C6F01E8C26E67F566CDB199F46_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_IsApplicableController_m6A775EE0DA5665713600A1AB40CBBA60C2E480D0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_IsOppositeHandNear_m011D2C9383CC692D92AC52437DCAE119B4364652_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_SolverUpdate_mB6CD00739671F6D575C4A9358940612B01C84E02_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_ToggleCursors_mE985EC6CD4A4E930F7015DF18C2F5A04CCB2D117_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint__cctor_mB27CEFA3C5DC257CE9A952EFB9E6467F68EE52E6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_Handedness_mA01336521C8E505AE46DF49EEF04E970E94180CB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_HideHandCursorsOnActivate_m1B8D06C354FD54E969E84ADCE9383CEEC2489BDB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6BMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FDMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6ABMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_RotationBehavior_mA91781668E0CC7D1BB859E9C106B7B60C337E4C0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_SafeZoneAngleOffset_m4D330EB6A9AC074051B6BCDA7ECD19F16B6A99A5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_SafeZoneBuffer_mEE697AF5521AF89E75306B223C0E7E09DB95EDB1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89BMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_get_UpdateWhenOppositeHandNear_mE7336624369976088B9842E543ADAB54619BA6F0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_ForwardOffset_mDFDA56423946B50EFB22ADAB9B5FA31060B0B960_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_HideHandCursorsOnActivate_mF060A193919F7362172CD1C83024753E0DF0ECA5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OnFirstHandDetected_mA977862AE00D76E4E63BAFCE2C72777661F0A72B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OnHandActivate_m80EF0A2685F8ED10133D4E75F39BE211C3F1E944_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OnHandDeactivate_m09124DB825A202A62E677D4CA88D317E96D65A4B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_OnLastHandLost_m2936352DE416D49855D4DF4722CF85F26EE8B5E0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CEMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_SafeZoneAngleOffset_mFF3C8BDB77D2E260952557C5C4EC944AE84C8B06_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_SafeZoneBuffer_mD910F855D03632FD808B79D3F87B1338F267A3E6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_SafeZone_m1B35B60DDC6D4E96A68BB401230014186A12E9AD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HandConstraint_set_UpdateWhenOppositeHandNear_mCACBF6D38FA6BDC3591FEF561043AC1D9C7CE02D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HeadPositionOffset_OnEnable_mABAD8950E285FE6A703C4C088DCC99C67D59E851_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HeadPositionOffset_Start_m693E19366C7205D96F7D17CF2C412DDCA4F97347_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t HeadPositionOffset__ctor_mB9A4E41B46CE874EEEF94B4E5DAFC0DE2A56C4DE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EBMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FEMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ObjectCollectionNode__ctor_mFC564274121B77F0053319D6B78A4BAC97781BD4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t RectTransformCubeScaler_Start_m4203AF72574495302E43130EE6BA9AEAF06AD0D4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t RectTransformCubeScaler_Update_m22F11390C664A279EF4B0334568CED8CACE06E31_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t RectTransformCubeScaler__ctor_mCE3A9510E1B34F8FA4F63AC8AD811D87BB544F47_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ScatterObjectCollection_LayoutChildren_m2D5110CFE453F408A95F252F89AC6F79AB475984_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ScatterObjectCollection__ctor_m7A8890F55C13313189B24514C8B9B8A5D7CF4040_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t Smoothing__ctor_m9D4ABAC4BBCCA1B2C6341120DAC4FE99CD9533E3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851AMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BBMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62_MoveNext_mB7C8B85FCBFFB594DA67437F9F664BD7A59D3718_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_mBC8322915428F92D1D2256D0E289FB7D77F2FB48_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_get_Current_m58BE25D249A46A1FB96E1AD0F31DEB1526F148F1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62_System_IDisposable_Dispose_m2D647784EF6EDA93F8ED92DD2778106F6E26D734_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617_MetadataUsageId;
struct Delegate_t_marshaled_com;
struct Delegate_t_marshaled_pinvoke;
struct Exception_t_marshaled_com;
struct Exception_t_marshaled_pinvoke;

struct IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778;
struct SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90;
struct ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A;
struct KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D;
struct RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93;
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28;

IL2CPP_EXTERN_C_BEGIN
IL2CPP_EXTERN_C_END

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

// System.Object


// Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic
struct DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0  : public RuntimeObject
{
public:

public:
};


// Microsoft.MixedReality.Toolkit.Utilities.Easing
struct Easing_t13E61FF806357D21552C3028585751420EDCD360  : public RuntimeObject
{
public:
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Easing::Enabled
	bool ___Enabled_0;
	// UnityEngine.AnimationCurve Microsoft.MixedReality.Toolkit.Utilities.Easing::Curve
	AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * ___Curve_1;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Easing::LerpTime
	float ___LerpTime_2;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Easing::timer
	float ___timer_3;
	// UnityEngine.Keyframe[] Microsoft.MixedReality.Toolkit.Utilities.Easing::cachedKeys
	KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* ___cachedKeys_4;

public:
	inline static int32_t get_offset_of_Enabled_0() { return static_cast<int32_t>(offsetof(Easing_t13E61FF806357D21552C3028585751420EDCD360, ___Enabled_0)); }
	inline bool get_Enabled_0() const { return ___Enabled_0; }
	inline bool* get_address_of_Enabled_0() { return &___Enabled_0; }
	inline void set_Enabled_0(bool value)
	{
		___Enabled_0 = value;
	}

	inline static int32_t get_offset_of_Curve_1() { return static_cast<int32_t>(offsetof(Easing_t13E61FF806357D21552C3028585751420EDCD360, ___Curve_1)); }
	inline AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * get_Curve_1() const { return ___Curve_1; }
	inline AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C ** get_address_of_Curve_1() { return &___Curve_1; }
	inline void set_Curve_1(AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * value)
	{
		___Curve_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Curve_1), (void*)value);
	}

	inline static int32_t get_offset_of_LerpTime_2() { return static_cast<int32_t>(offsetof(Easing_t13E61FF806357D21552C3028585751420EDCD360, ___LerpTime_2)); }
	inline float get_LerpTime_2() const { return ___LerpTime_2; }
	inline float* get_address_of_LerpTime_2() { return &___LerpTime_2; }
	inline void set_LerpTime_2(float value)
	{
		___LerpTime_2 = value;
	}

	inline static int32_t get_offset_of_timer_3() { return static_cast<int32_t>(offsetof(Easing_t13E61FF806357D21552C3028585751420EDCD360, ___timer_3)); }
	inline float get_timer_3() const { return ___timer_3; }
	inline float* get_address_of_timer_3() { return &___timer_3; }
	inline void set_timer_3(float value)
	{
		___timer_3 = value;
	}

	inline static int32_t get_offset_of_cachedKeys_4() { return static_cast<int32_t>(offsetof(Easing_t13E61FF806357D21552C3028585751420EDCD360, ___cachedKeys_4)); }
	inline KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* get_cachedKeys_4() const { return ___cachedKeys_4; }
	inline KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D** get_address_of_cachedKeys_4() { return &___cachedKeys_4; }
	inline void set_cachedKeys_4(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* value)
	{
		___cachedKeys_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___cachedKeys_4), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Smoothing
struct Smoothing_t9F337CE86D4733AE7ABA92F6135CC68AF8A20E4E  : public RuntimeObject
{
public:

public:
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62
struct U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267  : public RuntimeObject
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<>1__state
	int32_t ___U3CU3E1__state_0;
	// System.Object Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<>2__current
	RuntimeObject * ___U3CU3E2__current_1;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::controller
	RuntimeObject* ___controller_2;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::visible
	bool ___visible_3;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::frameDelay
	bool ___frameDelay_4;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<>4__this
	HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * ___U3CU3E4__this_5;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer[] Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<>s__1
	IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* ___U3CU3Es__1_6;
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<>s__2
	int32_t ___U3CU3Es__2_7;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::<pointer>5__3
	RuntimeObject* ___U3CpointerU3E5__3_8;

public:
	inline static int32_t get_offset_of_U3CU3E1__state_0() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CU3E1__state_0)); }
	inline int32_t get_U3CU3E1__state_0() const { return ___U3CU3E1__state_0; }
	inline int32_t* get_address_of_U3CU3E1__state_0() { return &___U3CU3E1__state_0; }
	inline void set_U3CU3E1__state_0(int32_t value)
	{
		___U3CU3E1__state_0 = value;
	}

	inline static int32_t get_offset_of_U3CU3E2__current_1() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CU3E2__current_1)); }
	inline RuntimeObject * get_U3CU3E2__current_1() const { return ___U3CU3E2__current_1; }
	inline RuntimeObject ** get_address_of_U3CU3E2__current_1() { return &___U3CU3E2__current_1; }
	inline void set_U3CU3E2__current_1(RuntimeObject * value)
	{
		___U3CU3E2__current_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CU3E2__current_1), (void*)value);
	}

	inline static int32_t get_offset_of_controller_2() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___controller_2)); }
	inline RuntimeObject* get_controller_2() const { return ___controller_2; }
	inline RuntimeObject** get_address_of_controller_2() { return &___controller_2; }
	inline void set_controller_2(RuntimeObject* value)
	{
		___controller_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___controller_2), (void*)value);
	}

	inline static int32_t get_offset_of_visible_3() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___visible_3)); }
	inline bool get_visible_3() const { return ___visible_3; }
	inline bool* get_address_of_visible_3() { return &___visible_3; }
	inline void set_visible_3(bool value)
	{
		___visible_3 = value;
	}

	inline static int32_t get_offset_of_frameDelay_4() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___frameDelay_4)); }
	inline bool get_frameDelay_4() const { return ___frameDelay_4; }
	inline bool* get_address_of_frameDelay_4() { return &___frameDelay_4; }
	inline void set_frameDelay_4(bool value)
	{
		___frameDelay_4 = value;
	}

	inline static int32_t get_offset_of_U3CU3E4__this_5() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CU3E4__this_5)); }
	inline HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * get_U3CU3E4__this_5() const { return ___U3CU3E4__this_5; }
	inline HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A ** get_address_of_U3CU3E4__this_5() { return &___U3CU3E4__this_5; }
	inline void set_U3CU3E4__this_5(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * value)
	{
		___U3CU3E4__this_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CU3E4__this_5), (void*)value);
	}

	inline static int32_t get_offset_of_U3CU3Es__1_6() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CU3Es__1_6)); }
	inline IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* get_U3CU3Es__1_6() const { return ___U3CU3Es__1_6; }
	inline IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778** get_address_of_U3CU3Es__1_6() { return &___U3CU3Es__1_6; }
	inline void set_U3CU3Es__1_6(IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* value)
	{
		___U3CU3Es__1_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CU3Es__1_6), (void*)value);
	}

	inline static int32_t get_offset_of_U3CU3Es__2_7() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CU3Es__2_7)); }
	inline int32_t get_U3CU3Es__2_7() const { return ___U3CU3Es__2_7; }
	inline int32_t* get_address_of_U3CU3Es__2_7() { return &___U3CU3Es__2_7; }
	inline void set_U3CU3Es__2_7(int32_t value)
	{
		___U3CU3Es__2_7 = value;
	}

	inline static int32_t get_offset_of_U3CpointerU3E5__3_8() { return static_cast<int32_t>(offsetof(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267, ___U3CpointerU3E5__3_8)); }
	inline RuntimeObject* get_U3CpointerU3E5__3_8() const { return ___U3CpointerU3E5__3_8; }
	inline RuntimeObject** get_address_of_U3CpointerU3E5__3_8() { return &___U3CpointerU3E5__3_8; }
	inline void set_U3CpointerU3E5__3_8(RuntimeObject* value)
	{
		___U3CpointerU3E5__3_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CpointerU3E5__3_8), (void*)value);
	}
};

struct Il2CppArrayBounds;

// System.Array


// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>
struct Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0  : public RuntimeObject
{
public:
	// System.Int32[] System.Collections.Generic.Dictionary`2::buckets
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* ___buckets_0;
	// System.Collections.Generic.Dictionary`2/Entry<TKey,TValue>[] System.Collections.Generic.Dictionary`2::entries
	EntryU5BU5D_tA5D6501185CC2CC858ED5A6A2A28E8FED432FACC* ___entries_1;
	// System.Int32 System.Collections.Generic.Dictionary`2::count
	int32_t ___count_2;
	// System.Int32 System.Collections.Generic.Dictionary`2::version
	int32_t ___version_3;
	// System.Int32 System.Collections.Generic.Dictionary`2::freeList
	int32_t ___freeList_4;
	// System.Int32 System.Collections.Generic.Dictionary`2::freeCount
	int32_t ___freeCount_5;
	// System.Collections.Generic.IEqualityComparer`1<TKey> System.Collections.Generic.Dictionary`2::comparer
	RuntimeObject* ___comparer_6;
	// System.Collections.Generic.Dictionary`2/KeyCollection<TKey,TValue> System.Collections.Generic.Dictionary`2::keys
	KeyCollection_t55952BFF4671201BA9874E79E6B15AF6A0D0C33B * ___keys_7;
	// System.Collections.Generic.Dictionary`2/ValueCollection<TKey,TValue> System.Collections.Generic.Dictionary`2::values
	ValueCollection_t5514712A42A2EEF80CACE4378B298A31D7FB3969 * ___values_8;
	// System.Object System.Collections.Generic.Dictionary`2::_syncRoot
	RuntimeObject * ____syncRoot_9;

public:
	inline static int32_t get_offset_of_buckets_0() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___buckets_0)); }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* get_buckets_0() const { return ___buckets_0; }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83** get_address_of_buckets_0() { return &___buckets_0; }
	inline void set_buckets_0(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* value)
	{
		___buckets_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___buckets_0), (void*)value);
	}

	inline static int32_t get_offset_of_entries_1() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___entries_1)); }
	inline EntryU5BU5D_tA5D6501185CC2CC858ED5A6A2A28E8FED432FACC* get_entries_1() const { return ___entries_1; }
	inline EntryU5BU5D_tA5D6501185CC2CC858ED5A6A2A28E8FED432FACC** get_address_of_entries_1() { return &___entries_1; }
	inline void set_entries_1(EntryU5BU5D_tA5D6501185CC2CC858ED5A6A2A28E8FED432FACC* value)
	{
		___entries_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___entries_1), (void*)value);
	}

	inline static int32_t get_offset_of_count_2() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___count_2)); }
	inline int32_t get_count_2() const { return ___count_2; }
	inline int32_t* get_address_of_count_2() { return &___count_2; }
	inline void set_count_2(int32_t value)
	{
		___count_2 = value;
	}

	inline static int32_t get_offset_of_version_3() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___version_3)); }
	inline int32_t get_version_3() const { return ___version_3; }
	inline int32_t* get_address_of_version_3() { return &___version_3; }
	inline void set_version_3(int32_t value)
	{
		___version_3 = value;
	}

	inline static int32_t get_offset_of_freeList_4() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___freeList_4)); }
	inline int32_t get_freeList_4() const { return ___freeList_4; }
	inline int32_t* get_address_of_freeList_4() { return &___freeList_4; }
	inline void set_freeList_4(int32_t value)
	{
		___freeList_4 = value;
	}

	inline static int32_t get_offset_of_freeCount_5() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___freeCount_5)); }
	inline int32_t get_freeCount_5() const { return ___freeCount_5; }
	inline int32_t* get_address_of_freeCount_5() { return &___freeCount_5; }
	inline void set_freeCount_5(int32_t value)
	{
		___freeCount_5 = value;
	}

	inline static int32_t get_offset_of_comparer_6() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___comparer_6)); }
	inline RuntimeObject* get_comparer_6() const { return ___comparer_6; }
	inline RuntimeObject** get_address_of_comparer_6() { return &___comparer_6; }
	inline void set_comparer_6(RuntimeObject* value)
	{
		___comparer_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___comparer_6), (void*)value);
	}

	inline static int32_t get_offset_of_keys_7() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___keys_7)); }
	inline KeyCollection_t55952BFF4671201BA9874E79E6B15AF6A0D0C33B * get_keys_7() const { return ___keys_7; }
	inline KeyCollection_t55952BFF4671201BA9874E79E6B15AF6A0D0C33B ** get_address_of_keys_7() { return &___keys_7; }
	inline void set_keys_7(KeyCollection_t55952BFF4671201BA9874E79E6B15AF6A0D0C33B * value)
	{
		___keys_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___keys_7), (void*)value);
	}

	inline static int32_t get_offset_of_values_8() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ___values_8)); }
	inline ValueCollection_t5514712A42A2EEF80CACE4378B298A31D7FB3969 * get_values_8() const { return ___values_8; }
	inline ValueCollection_t5514712A42A2EEF80CACE4378B298A31D7FB3969 ** get_address_of_values_8() { return &___values_8; }
	inline void set_values_8(ValueCollection_t5514712A42A2EEF80CACE4378B298A31D7FB3969 * value)
	{
		___values_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___values_8), (void*)value);
	}

	inline static int32_t get_offset_of__syncRoot_9() { return static_cast<int32_t>(offsetof(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0, ____syncRoot_9)); }
	inline RuntimeObject * get__syncRoot_9() const { return ____syncRoot_9; }
	inline RuntimeObject ** get_address_of__syncRoot_9() { return &____syncRoot_9; }
	inline void set__syncRoot_9(RuntimeObject * value)
	{
		____syncRoot_9 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____syncRoot_9), (void*)value);
	}
};


// System.Collections.Generic.HashSet`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>
struct HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229  : public RuntimeObject
{
public:
	// System.Int32[] System.Collections.Generic.HashSet`1::_buckets
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* ____buckets_7;
	// System.Collections.Generic.HashSet`1/Slot<T>[] System.Collections.Generic.HashSet`1::_slots
	SlotU5BU5D_tA5D96D5A9783D79ABFFFC777115F940BDC4D3580* ____slots_8;
	// System.Int32 System.Collections.Generic.HashSet`1::_count
	int32_t ____count_9;
	// System.Int32 System.Collections.Generic.HashSet`1::_lastIndex
	int32_t ____lastIndex_10;
	// System.Int32 System.Collections.Generic.HashSet`1::_freeList
	int32_t ____freeList_11;
	// System.Collections.Generic.IEqualityComparer`1<T> System.Collections.Generic.HashSet`1::_comparer
	RuntimeObject* ____comparer_12;
	// System.Int32 System.Collections.Generic.HashSet`1::_version
	int32_t ____version_13;
	// System.Runtime.Serialization.SerializationInfo System.Collections.Generic.HashSet`1::_siInfo
	SerializationInfo_t1BB80E9C9DEA52DBF464487234B045E2930ADA26 * ____siInfo_14;

public:
	inline static int32_t get_offset_of__buckets_7() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____buckets_7)); }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* get__buckets_7() const { return ____buckets_7; }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83** get_address_of__buckets_7() { return &____buckets_7; }
	inline void set__buckets_7(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* value)
	{
		____buckets_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____buckets_7), (void*)value);
	}

	inline static int32_t get_offset_of__slots_8() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____slots_8)); }
	inline SlotU5BU5D_tA5D96D5A9783D79ABFFFC777115F940BDC4D3580* get__slots_8() const { return ____slots_8; }
	inline SlotU5BU5D_tA5D96D5A9783D79ABFFFC777115F940BDC4D3580** get_address_of__slots_8() { return &____slots_8; }
	inline void set__slots_8(SlotU5BU5D_tA5D96D5A9783D79ABFFFC777115F940BDC4D3580* value)
	{
		____slots_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____slots_8), (void*)value);
	}

	inline static int32_t get_offset_of__count_9() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____count_9)); }
	inline int32_t get__count_9() const { return ____count_9; }
	inline int32_t* get_address_of__count_9() { return &____count_9; }
	inline void set__count_9(int32_t value)
	{
		____count_9 = value;
	}

	inline static int32_t get_offset_of__lastIndex_10() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____lastIndex_10)); }
	inline int32_t get__lastIndex_10() const { return ____lastIndex_10; }
	inline int32_t* get_address_of__lastIndex_10() { return &____lastIndex_10; }
	inline void set__lastIndex_10(int32_t value)
	{
		____lastIndex_10 = value;
	}

	inline static int32_t get_offset_of__freeList_11() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____freeList_11)); }
	inline int32_t get__freeList_11() const { return ____freeList_11; }
	inline int32_t* get_address_of__freeList_11() { return &____freeList_11; }
	inline void set__freeList_11(int32_t value)
	{
		____freeList_11 = value;
	}

	inline static int32_t get_offset_of__comparer_12() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____comparer_12)); }
	inline RuntimeObject* get__comparer_12() const { return ____comparer_12; }
	inline RuntimeObject** get_address_of__comparer_12() { return &____comparer_12; }
	inline void set__comparer_12(RuntimeObject* value)
	{
		____comparer_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____comparer_12), (void*)value);
	}

	inline static int32_t get_offset_of__version_13() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____version_13)); }
	inline int32_t get__version_13() const { return ____version_13; }
	inline int32_t* get_address_of__version_13() { return &____version_13; }
	inline void set__version_13(int32_t value)
	{
		____version_13 = value;
	}

	inline static int32_t get_offset_of__siInfo_14() { return static_cast<int32_t>(offsetof(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229, ____siInfo_14)); }
	inline SerializationInfo_t1BB80E9C9DEA52DBF464487234B045E2930ADA26 * get__siInfo_14() const { return ____siInfo_14; }
	inline SerializationInfo_t1BB80E9C9DEA52DBF464487234B045E2930ADA26 ** get_address_of__siInfo_14() { return &____siInfo_14; }
	inline void set__siInfo_14(SerializationInfo_t1BB80E9C9DEA52DBF464487234B045E2930ADA26 * value)
	{
		____siInfo_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____siInfo_14), (void*)value);
	}
};


// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>
struct List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE  : public RuntimeObject
{
public:
	// T[] System.Collections.Generic.List`1::_items
	ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* ____items_1;
	// System.Int32 System.Collections.Generic.List`1::_size
	int32_t ____size_2;
	// System.Int32 System.Collections.Generic.List`1::_version
	int32_t ____version_3;
	// System.Object System.Collections.Generic.List`1::_syncRoot
	RuntimeObject * ____syncRoot_4;

public:
	inline static int32_t get_offset_of__items_1() { return static_cast<int32_t>(offsetof(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE, ____items_1)); }
	inline ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* get__items_1() const { return ____items_1; }
	inline ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9** get_address_of__items_1() { return &____items_1; }
	inline void set__items_1(ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* value)
	{
		____items_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____items_1), (void*)value);
	}

	inline static int32_t get_offset_of__size_2() { return static_cast<int32_t>(offsetof(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE, ____size_2)); }
	inline int32_t get__size_2() const { return ____size_2; }
	inline int32_t* get_address_of__size_2() { return &____size_2; }
	inline void set__size_2(int32_t value)
	{
		____size_2 = value;
	}

	inline static int32_t get_offset_of__version_3() { return static_cast<int32_t>(offsetof(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE, ____version_3)); }
	inline int32_t get__version_3() const { return ____version_3; }
	inline int32_t* get_address_of__version_3() { return &____version_3; }
	inline void set__version_3(int32_t value)
	{
		____version_3 = value;
	}

	inline static int32_t get_offset_of__syncRoot_4() { return static_cast<int32_t>(offsetof(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE, ____syncRoot_4)); }
	inline RuntimeObject * get__syncRoot_4() const { return ____syncRoot_4; }
	inline RuntimeObject ** get_address_of__syncRoot_4() { return &____syncRoot_4; }
	inline void set__syncRoot_4(RuntimeObject * value)
	{
		____syncRoot_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____syncRoot_4), (void*)value);
	}
};

struct List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE_StaticFields
{
public:
	// T[] System.Collections.Generic.List`1::_emptyArray
	ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* ____emptyArray_5;

public:
	inline static int32_t get_offset_of__emptyArray_5() { return static_cast<int32_t>(offsetof(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE_StaticFields, ____emptyArray_5)); }
	inline ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* get__emptyArray_5() const { return ____emptyArray_5; }
	inline ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9** get_address_of__emptyArray_5() { return &____emptyArray_5; }
	inline void set__emptyArray_5(ObjectCollectionNodeU5BU5D_t70BD35C25553BF0860F3990B5B1CDFC78403EEC9* value)
	{
		____emptyArray_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____emptyArray_5), (void*)value);
	}
};


// System.Collections.Generic.List`1<System.Object>
struct List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D  : public RuntimeObject
{
public:
	// T[] System.Collections.Generic.List`1::_items
	ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* ____items_1;
	// System.Int32 System.Collections.Generic.List`1::_size
	int32_t ____size_2;
	// System.Int32 System.Collections.Generic.List`1::_version
	int32_t ____version_3;
	// System.Object System.Collections.Generic.List`1::_syncRoot
	RuntimeObject * ____syncRoot_4;

public:
	inline static int32_t get_offset_of__items_1() { return static_cast<int32_t>(offsetof(List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D, ____items_1)); }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* get__items_1() const { return ____items_1; }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A** get_address_of__items_1() { return &____items_1; }
	inline void set__items_1(ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* value)
	{
		____items_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____items_1), (void*)value);
	}

	inline static int32_t get_offset_of__size_2() { return static_cast<int32_t>(offsetof(List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D, ____size_2)); }
	inline int32_t get__size_2() const { return ____size_2; }
	inline int32_t* get_address_of__size_2() { return &____size_2; }
	inline void set__size_2(int32_t value)
	{
		____size_2 = value;
	}

	inline static int32_t get_offset_of__version_3() { return static_cast<int32_t>(offsetof(List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D, ____version_3)); }
	inline int32_t get__version_3() const { return ____version_3; }
	inline int32_t* get_address_of__version_3() { return &____version_3; }
	inline void set__version_3(int32_t value)
	{
		____version_3 = value;
	}

	inline static int32_t get_offset_of__syncRoot_4() { return static_cast<int32_t>(offsetof(List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D, ____syncRoot_4)); }
	inline RuntimeObject * get__syncRoot_4() const { return ____syncRoot_4; }
	inline RuntimeObject ** get_address_of__syncRoot_4() { return &____syncRoot_4; }
	inline void set__syncRoot_4(RuntimeObject * value)
	{
		____syncRoot_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____syncRoot_4), (void*)value);
	}
};

struct List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D_StaticFields
{
public:
	// T[] System.Collections.Generic.List`1::_emptyArray
	ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* ____emptyArray_5;

public:
	inline static int32_t get_offset_of__emptyArray_5() { return static_cast<int32_t>(offsetof(List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D_StaticFields, ____emptyArray_5)); }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* get__emptyArray_5() const { return ____emptyArray_5; }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A** get_address_of__emptyArray_5() { return &____emptyArray_5; }
	inline void set__emptyArray_5(ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* value)
	{
		____emptyArray_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____emptyArray_5), (void*)value);
	}
};


// System.String
struct String_t  : public RuntimeObject
{
public:
	// System.Int32 System.String::m_stringLength
	int32_t ___m_stringLength_0;
	// System.Char System.String::m_firstChar
	Il2CppChar ___m_firstChar_1;

public:
	inline static int32_t get_offset_of_m_stringLength_0() { return static_cast<int32_t>(offsetof(String_t, ___m_stringLength_0)); }
	inline int32_t get_m_stringLength_0() const { return ___m_stringLength_0; }
	inline int32_t* get_address_of_m_stringLength_0() { return &___m_stringLength_0; }
	inline void set_m_stringLength_0(int32_t value)
	{
		___m_stringLength_0 = value;
	}

	inline static int32_t get_offset_of_m_firstChar_1() { return static_cast<int32_t>(offsetof(String_t, ___m_firstChar_1)); }
	inline Il2CppChar get_m_firstChar_1() const { return ___m_firstChar_1; }
	inline Il2CppChar* get_address_of_m_firstChar_1() { return &___m_firstChar_1; }
	inline void set_m_firstChar_1(Il2CppChar value)
	{
		___m_firstChar_1 = value;
	}
};

struct String_t_StaticFields
{
public:
	// System.String System.String::Empty
	String_t* ___Empty_5;

public:
	inline static int32_t get_offset_of_Empty_5() { return static_cast<int32_t>(offsetof(String_t_StaticFields, ___Empty_5)); }
	inline String_t* get_Empty_5() const { return ___Empty_5; }
	inline String_t** get_address_of_Empty_5() { return &___Empty_5; }
	inline void set_Empty_5(String_t* value)
	{
		___Empty_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Empty_5), (void*)value);
	}
};


// System.ValueType
struct ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF  : public RuntimeObject
{
public:

public:
};

// Native definition for P/Invoke marshalling of System.ValueType
struct ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF_marshaled_pinvoke
{
};
// Native definition for COM marshalling of System.ValueType
struct ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF_marshaled_com
{
};

// UnityEngine.EventSystems.AbstractEventData
struct AbstractEventData_t636F385820C291DAE25897BCEB4FBCADDA3B75F6  : public RuntimeObject
{
public:
	// System.Boolean UnityEngine.EventSystems.AbstractEventData::m_Used
	bool ___m_Used_0;

public:
	inline static int32_t get_offset_of_m_Used_0() { return static_cast<int32_t>(offsetof(AbstractEventData_t636F385820C291DAE25897BCEB4FBCADDA3B75F6, ___m_Used_0)); }
	inline bool get_m_Used_0() const { return ___m_Used_0; }
	inline bool* get_address_of_m_Used_0() { return &___m_Used_0; }
	inline void set_m_Used_0(bool value)
	{
		___m_Used_0 = value;
	}
};


// UnityEngine.Events.UnityEventBase
struct UnityEventBase_t6E0F7823762EE94BB8489B5AE41C7802A266D3D5  : public RuntimeObject
{
public:
	// UnityEngine.Events.InvokableCallList UnityEngine.Events.UnityEventBase::m_Calls
	InvokableCallList_t18AA4F473C7B295216B7D4B9723B4F3DFCCC9A3F * ___m_Calls_0;
	// UnityEngine.Events.PersistentCallGroup UnityEngine.Events.UnityEventBase::m_PersistentCalls
	PersistentCallGroup_t6E5DF2EBDA42794B5FE0C6DAA97DF65F0BFF571F * ___m_PersistentCalls_1;
	// System.Boolean UnityEngine.Events.UnityEventBase::m_CallsDirty
	bool ___m_CallsDirty_2;

public:
	inline static int32_t get_offset_of_m_Calls_0() { return static_cast<int32_t>(offsetof(UnityEventBase_t6E0F7823762EE94BB8489B5AE41C7802A266D3D5, ___m_Calls_0)); }
	inline InvokableCallList_t18AA4F473C7B295216B7D4B9723B4F3DFCCC9A3F * get_m_Calls_0() const { return ___m_Calls_0; }
	inline InvokableCallList_t18AA4F473C7B295216B7D4B9723B4F3DFCCC9A3F ** get_address_of_m_Calls_0() { return &___m_Calls_0; }
	inline void set_m_Calls_0(InvokableCallList_t18AA4F473C7B295216B7D4B9723B4F3DFCCC9A3F * value)
	{
		___m_Calls_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_Calls_0), (void*)value);
	}

	inline static int32_t get_offset_of_m_PersistentCalls_1() { return static_cast<int32_t>(offsetof(UnityEventBase_t6E0F7823762EE94BB8489B5AE41C7802A266D3D5, ___m_PersistentCalls_1)); }
	inline PersistentCallGroup_t6E5DF2EBDA42794B5FE0C6DAA97DF65F0BFF571F * get_m_PersistentCalls_1() const { return ___m_PersistentCalls_1; }
	inline PersistentCallGroup_t6E5DF2EBDA42794B5FE0C6DAA97DF65F0BFF571F ** get_address_of_m_PersistentCalls_1() { return &___m_PersistentCalls_1; }
	inline void set_m_PersistentCalls_1(PersistentCallGroup_t6E5DF2EBDA42794B5FE0C6DAA97DF65F0BFF571F * value)
	{
		___m_PersistentCalls_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_PersistentCalls_1), (void*)value);
	}

	inline static int32_t get_offset_of_m_CallsDirty_2() { return static_cast<int32_t>(offsetof(UnityEventBase_t6E0F7823762EE94BB8489B5AE41C7802A266D3D5, ___m_CallsDirty_2)); }
	inline bool get_m_CallsDirty_2() const { return ___m_CallsDirty_2; }
	inline bool* get_address_of_m_CallsDirty_2() { return &___m_CallsDirty_2; }
	inline void set_m_CallsDirty_2(bool value)
	{
		___m_CallsDirty_2 = value;
	}
};


// UnityEngine.YieldInstruction
struct YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44  : public RuntimeObject
{
public:

public:
};

// Native definition for P/Invoke marshalling of UnityEngine.YieldInstruction
struct YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44_marshaled_pinvoke
{
};
// Native definition for COM marshalling of UnityEngine.YieldInstruction
struct YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44_marshaled_com
{
};

// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16
struct __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC 
{
public:
	union
	{
		struct
		{
			union
			{
			};
		};
		uint8_t __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC__padding[16];
	};

public:
};


// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=24
struct __StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406 
{
public:
	union
	{
		struct
		{
			union
			{
			};
		};
		uint8_t __StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406__padding[24];
	};

public:
};


// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=48
struct __StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5 
{
public:
	union
	{
		struct
		{
			union
			{
			};
		};
		uint8_t __StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5__padding[48];
	};

public:
};


// System.Boolean
struct Boolean_tB53F6830F670160873277339AA58F15CAED4399C 
{
public:
	// System.Boolean System.Boolean::m_value
	bool ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C, ___m_value_0)); }
	inline bool get_m_value_0() const { return ___m_value_0; }
	inline bool* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(bool value)
	{
		___m_value_0 = value;
	}
};

struct Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields
{
public:
	// System.String System.Boolean::TrueString
	String_t* ___TrueString_5;
	// System.String System.Boolean::FalseString
	String_t* ___FalseString_6;

public:
	inline static int32_t get_offset_of_TrueString_5() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields, ___TrueString_5)); }
	inline String_t* get_TrueString_5() const { return ___TrueString_5; }
	inline String_t** get_address_of_TrueString_5() { return &___TrueString_5; }
	inline void set_TrueString_5(String_t* value)
	{
		___TrueString_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___TrueString_5), (void*)value);
	}

	inline static int32_t get_offset_of_FalseString_6() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields, ___FalseString_6)); }
	inline String_t* get_FalseString_6() const { return ___FalseString_6; }
	inline String_t** get_address_of_FalseString_6() { return &___FalseString_6; }
	inline void set_FalseString_6(String_t* value)
	{
		___FalseString_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___FalseString_6), (void*)value);
	}
};


// System.Collections.Generic.HashSet`1/Enumerator<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>
struct Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD 
{
public:
	// System.Collections.Generic.HashSet`1<T> System.Collections.Generic.HashSet`1/Enumerator::_set
	HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * ____set_0;
	// System.Int32 System.Collections.Generic.HashSet`1/Enumerator::_index
	int32_t ____index_1;
	// System.Int32 System.Collections.Generic.HashSet`1/Enumerator::_version
	int32_t ____version_2;
	// T System.Collections.Generic.HashSet`1/Enumerator::_current
	RuntimeObject* ____current_3;

public:
	inline static int32_t get_offset_of__set_0() { return static_cast<int32_t>(offsetof(Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD, ____set_0)); }
	inline HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * get__set_0() const { return ____set_0; }
	inline HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 ** get_address_of__set_0() { return &____set_0; }
	inline void set__set_0(HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * value)
	{
		____set_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____set_0), (void*)value);
	}

	inline static int32_t get_offset_of__index_1() { return static_cast<int32_t>(offsetof(Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD, ____index_1)); }
	inline int32_t get__index_1() const { return ____index_1; }
	inline int32_t* get_address_of__index_1() { return &____index_1; }
	inline void set__index_1(int32_t value)
	{
		____index_1 = value;
	}

	inline static int32_t get_offset_of__version_2() { return static_cast<int32_t>(offsetof(Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD, ____version_2)); }
	inline int32_t get__version_2() const { return ____version_2; }
	inline int32_t* get_address_of__version_2() { return &____version_2; }
	inline void set__version_2(int32_t value)
	{
		____version_2 = value;
	}

	inline static int32_t get_offset_of__current_3() { return static_cast<int32_t>(offsetof(Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD, ____current_3)); }
	inline RuntimeObject* get__current_3() const { return ____current_3; }
	inline RuntimeObject** get_address_of__current_3() { return &____current_3; }
	inline void set__current_3(RuntimeObject* value)
	{
		____current_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____current_3), (void*)value);
	}
};


// System.Collections.Generic.HashSet`1/Enumerator<System.Object>
struct Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133 
{
public:
	// System.Collections.Generic.HashSet`1<T> System.Collections.Generic.HashSet`1/Enumerator::_set
	HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3 * ____set_0;
	// System.Int32 System.Collections.Generic.HashSet`1/Enumerator::_index
	int32_t ____index_1;
	// System.Int32 System.Collections.Generic.HashSet`1/Enumerator::_version
	int32_t ____version_2;
	// T System.Collections.Generic.HashSet`1/Enumerator::_current
	RuntimeObject * ____current_3;

public:
	inline static int32_t get_offset_of__set_0() { return static_cast<int32_t>(offsetof(Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133, ____set_0)); }
	inline HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3 * get__set_0() const { return ____set_0; }
	inline HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3 ** get_address_of__set_0() { return &____set_0; }
	inline void set__set_0(HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3 * value)
	{
		____set_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____set_0), (void*)value);
	}

	inline static int32_t get_offset_of__index_1() { return static_cast<int32_t>(offsetof(Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133, ____index_1)); }
	inline int32_t get__index_1() const { return ____index_1; }
	inline int32_t* get_address_of__index_1() { return &____index_1; }
	inline void set__index_1(int32_t value)
	{
		____index_1 = value;
	}

	inline static int32_t get_offset_of__version_2() { return static_cast<int32_t>(offsetof(Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133, ____version_2)); }
	inline int32_t get__version_2() const { return ____version_2; }
	inline int32_t* get_address_of__version_2() { return &____version_2; }
	inline void set__version_2(int32_t value)
	{
		____version_2 = value;
	}

	inline static int32_t get_offset_of__current_3() { return static_cast<int32_t>(offsetof(Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133, ____current_3)); }
	inline RuntimeObject * get__current_3() const { return ____current_3; }
	inline RuntimeObject ** get_address_of__current_3() { return &____current_3; }
	inline void set__current_3(RuntimeObject * value)
	{
		____current_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____current_3), (void*)value);
	}
};


// System.DateTime
struct DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132 
{
public:
	// System.UInt64 System.DateTime::dateData
	uint64_t ___dateData_44;

public:
	inline static int32_t get_offset_of_dateData_44() { return static_cast<int32_t>(offsetof(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132, ___dateData_44)); }
	inline uint64_t get_dateData_44() const { return ___dateData_44; }
	inline uint64_t* get_address_of_dateData_44() { return &___dateData_44; }
	inline void set_dateData_44(uint64_t value)
	{
		___dateData_44 = value;
	}
};

struct DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132_StaticFields
{
public:
	// System.Int32[] System.DateTime::DaysToMonth365
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* ___DaysToMonth365_29;
	// System.Int32[] System.DateTime::DaysToMonth366
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* ___DaysToMonth366_30;
	// System.DateTime System.DateTime::MinValue
	DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  ___MinValue_31;
	// System.DateTime System.DateTime::MaxValue
	DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  ___MaxValue_32;

public:
	inline static int32_t get_offset_of_DaysToMonth365_29() { return static_cast<int32_t>(offsetof(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132_StaticFields, ___DaysToMonth365_29)); }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* get_DaysToMonth365_29() const { return ___DaysToMonth365_29; }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83** get_address_of_DaysToMonth365_29() { return &___DaysToMonth365_29; }
	inline void set_DaysToMonth365_29(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* value)
	{
		___DaysToMonth365_29 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___DaysToMonth365_29), (void*)value);
	}

	inline static int32_t get_offset_of_DaysToMonth366_30() { return static_cast<int32_t>(offsetof(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132_StaticFields, ___DaysToMonth366_30)); }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* get_DaysToMonth366_30() const { return ___DaysToMonth366_30; }
	inline Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83** get_address_of_DaysToMonth366_30() { return &___DaysToMonth366_30; }
	inline void set_DaysToMonth366_30(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* value)
	{
		___DaysToMonth366_30 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___DaysToMonth366_30), (void*)value);
	}

	inline static int32_t get_offset_of_MinValue_31() { return static_cast<int32_t>(offsetof(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132_StaticFields, ___MinValue_31)); }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  get_MinValue_31() const { return ___MinValue_31; }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132 * get_address_of_MinValue_31() { return &___MinValue_31; }
	inline void set_MinValue_31(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  value)
	{
		___MinValue_31 = value;
	}

	inline static int32_t get_offset_of_MaxValue_32() { return static_cast<int32_t>(offsetof(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132_StaticFields, ___MaxValue_32)); }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  get_MaxValue_32() const { return ___MaxValue_32; }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132 * get_address_of_MaxValue_32() { return &___MaxValue_32; }
	inline void set_MaxValue_32(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  value)
	{
		___MaxValue_32 = value;
	}
};


// System.Enum
struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521  : public ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF
{
public:

public:
};

struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_StaticFields
{
public:
	// System.Char[] System.Enum::enumSeperatorCharArray
	CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* ___enumSeperatorCharArray_0;

public:
	inline static int32_t get_offset_of_enumSeperatorCharArray_0() { return static_cast<int32_t>(offsetof(Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_StaticFields, ___enumSeperatorCharArray_0)); }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* get_enumSeperatorCharArray_0() const { return ___enumSeperatorCharArray_0; }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2** get_address_of_enumSeperatorCharArray_0() { return &___enumSeperatorCharArray_0; }
	inline void set_enumSeperatorCharArray_0(CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* value)
	{
		___enumSeperatorCharArray_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___enumSeperatorCharArray_0), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of System.Enum
struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_marshaled_pinvoke
{
};
// Native definition for COM marshalling of System.Enum
struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_marshaled_com
{
};

// System.Int32
struct Int32_t585191389E07734F19F3156FF88FB3EF4800D102 
{
public:
	// System.Int32 System.Int32::m_value
	int32_t ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Int32_t585191389E07734F19F3156FF88FB3EF4800D102, ___m_value_0)); }
	inline int32_t get_m_value_0() const { return ___m_value_0; }
	inline int32_t* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(int32_t value)
	{
		___m_value_0 = value;
	}
};


// System.IntPtr
struct IntPtr_t 
{
public:
	// System.Void* System.IntPtr::m_value
	void* ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(IntPtr_t, ___m_value_0)); }
	inline void* get_m_value_0() const { return ___m_value_0; }
	inline void** get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(void* value)
	{
		___m_value_0 = value;
	}
};

struct IntPtr_t_StaticFields
{
public:
	// System.IntPtr System.IntPtr::Zero
	intptr_t ___Zero_1;

public:
	inline static int32_t get_offset_of_Zero_1() { return static_cast<int32_t>(offsetof(IntPtr_t_StaticFields, ___Zero_1)); }
	inline intptr_t get_Zero_1() const { return ___Zero_1; }
	inline intptr_t* get_address_of_Zero_1() { return &___Zero_1; }
	inline void set_Zero_1(intptr_t value)
	{
		___Zero_1 = value;
	}
};


// System.Single
struct Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1 
{
public:
	// System.Single System.Single::m_value
	float ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1, ___m_value_0)); }
	inline float get_m_value_0() const { return ___m_value_0; }
	inline float* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(float value)
	{
		___m_value_0 = value;
	}
};


// System.Void
struct Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017 
{
public:
	union
	{
		struct
		{
		};
		uint8_t Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017__padding[1];
	};

public:
};


// UnityEngine.Color
struct Color_t119BCA590009762C7223FDD3AF9706653AC84ED2 
{
public:
	// System.Single UnityEngine.Color::r
	float ___r_0;
	// System.Single UnityEngine.Color::g
	float ___g_1;
	// System.Single UnityEngine.Color::b
	float ___b_2;
	// System.Single UnityEngine.Color::a
	float ___a_3;

public:
	inline static int32_t get_offset_of_r_0() { return static_cast<int32_t>(offsetof(Color_t119BCA590009762C7223FDD3AF9706653AC84ED2, ___r_0)); }
	inline float get_r_0() const { return ___r_0; }
	inline float* get_address_of_r_0() { return &___r_0; }
	inline void set_r_0(float value)
	{
		___r_0 = value;
	}

	inline static int32_t get_offset_of_g_1() { return static_cast<int32_t>(offsetof(Color_t119BCA590009762C7223FDD3AF9706653AC84ED2, ___g_1)); }
	inline float get_g_1() const { return ___g_1; }
	inline float* get_address_of_g_1() { return &___g_1; }
	inline void set_g_1(float value)
	{
		___g_1 = value;
	}

	inline static int32_t get_offset_of_b_2() { return static_cast<int32_t>(offsetof(Color_t119BCA590009762C7223FDD3AF9706653AC84ED2, ___b_2)); }
	inline float get_b_2() const { return ___b_2; }
	inline float* get_address_of_b_2() { return &___b_2; }
	inline void set_b_2(float value)
	{
		___b_2 = value;
	}

	inline static int32_t get_offset_of_a_3() { return static_cast<int32_t>(offsetof(Color_t119BCA590009762C7223FDD3AF9706653AC84ED2, ___a_3)); }
	inline float get_a_3() const { return ___a_3; }
	inline float* get_address_of_a_3() { return &___a_3; }
	inline void set_a_3(float value)
	{
		___a_3 = value;
	}
};


// UnityEngine.EventSystems.BaseEventData
struct BaseEventData_t46C9D2AE3183A742EDE89944AF64A23DBF1B80A5  : public AbstractEventData_t636F385820C291DAE25897BCEB4FBCADDA3B75F6
{
public:
	// UnityEngine.EventSystems.EventSystem UnityEngine.EventSystems.BaseEventData::m_EventSystem
	EventSystem_t06ACEF1C8D95D44D3A7F57ED4BAA577101B4EA77 * ___m_EventSystem_1;

public:
	inline static int32_t get_offset_of_m_EventSystem_1() { return static_cast<int32_t>(offsetof(BaseEventData_t46C9D2AE3183A742EDE89944AF64A23DBF1B80A5, ___m_EventSystem_1)); }
	inline EventSystem_t06ACEF1C8D95D44D3A7F57ED4BAA577101B4EA77 * get_m_EventSystem_1() const { return ___m_EventSystem_1; }
	inline EventSystem_t06ACEF1C8D95D44D3A7F57ED4BAA577101B4EA77 ** get_address_of_m_EventSystem_1() { return &___m_EventSystem_1; }
	inline void set_m_EventSystem_1(EventSystem_t06ACEF1C8D95D44D3A7F57ED4BAA577101B4EA77 * value)
	{
		___m_EventSystem_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_EventSystem_1), (void*)value);
	}
};


// UnityEngine.Events.UnityEvent
struct UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F  : public UnityEventBase_t6E0F7823762EE94BB8489B5AE41C7802A266D3D5
{
public:
	// System.Object[] UnityEngine.Events.UnityEvent::m_InvokeArray
	ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* ___m_InvokeArray_3;

public:
	inline static int32_t get_offset_of_m_InvokeArray_3() { return static_cast<int32_t>(offsetof(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F, ___m_InvokeArray_3)); }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* get_m_InvokeArray_3() const { return ___m_InvokeArray_3; }
	inline ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A** get_address_of_m_InvokeArray_3() { return &___m_InvokeArray_3; }
	inline void set_m_InvokeArray_3(ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* value)
	{
		___m_InvokeArray_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_InvokeArray_3), (void*)value);
	}
};


// UnityEngine.Keyframe
struct Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 
{
public:
	// System.Single UnityEngine.Keyframe::m_Time
	float ___m_Time_0;
	// System.Single UnityEngine.Keyframe::m_Value
	float ___m_Value_1;
	// System.Single UnityEngine.Keyframe::m_InTangent
	float ___m_InTangent_2;
	// System.Single UnityEngine.Keyframe::m_OutTangent
	float ___m_OutTangent_3;
	// System.Int32 UnityEngine.Keyframe::m_WeightedMode
	int32_t ___m_WeightedMode_4;
	// System.Single UnityEngine.Keyframe::m_InWeight
	float ___m_InWeight_5;
	// System.Single UnityEngine.Keyframe::m_OutWeight
	float ___m_OutWeight_6;

public:
	inline static int32_t get_offset_of_m_Time_0() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_Time_0)); }
	inline float get_m_Time_0() const { return ___m_Time_0; }
	inline float* get_address_of_m_Time_0() { return &___m_Time_0; }
	inline void set_m_Time_0(float value)
	{
		___m_Time_0 = value;
	}

	inline static int32_t get_offset_of_m_Value_1() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_Value_1)); }
	inline float get_m_Value_1() const { return ___m_Value_1; }
	inline float* get_address_of_m_Value_1() { return &___m_Value_1; }
	inline void set_m_Value_1(float value)
	{
		___m_Value_1 = value;
	}

	inline static int32_t get_offset_of_m_InTangent_2() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_InTangent_2)); }
	inline float get_m_InTangent_2() const { return ___m_InTangent_2; }
	inline float* get_address_of_m_InTangent_2() { return &___m_InTangent_2; }
	inline void set_m_InTangent_2(float value)
	{
		___m_InTangent_2 = value;
	}

	inline static int32_t get_offset_of_m_OutTangent_3() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_OutTangent_3)); }
	inline float get_m_OutTangent_3() const { return ___m_OutTangent_3; }
	inline float* get_address_of_m_OutTangent_3() { return &___m_OutTangent_3; }
	inline void set_m_OutTangent_3(float value)
	{
		___m_OutTangent_3 = value;
	}

	inline static int32_t get_offset_of_m_WeightedMode_4() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_WeightedMode_4)); }
	inline int32_t get_m_WeightedMode_4() const { return ___m_WeightedMode_4; }
	inline int32_t* get_address_of_m_WeightedMode_4() { return &___m_WeightedMode_4; }
	inline void set_m_WeightedMode_4(int32_t value)
	{
		___m_WeightedMode_4 = value;
	}

	inline static int32_t get_offset_of_m_InWeight_5() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_InWeight_5)); }
	inline float get_m_InWeight_5() const { return ___m_InWeight_5; }
	inline float* get_address_of_m_InWeight_5() { return &___m_InWeight_5; }
	inline void set_m_InWeight_5(float value)
	{
		___m_InWeight_5 = value;
	}

	inline static int32_t get_offset_of_m_OutWeight_6() { return static_cast<int32_t>(offsetof(Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74, ___m_OutWeight_6)); }
	inline float get_m_OutWeight_6() const { return ___m_OutWeight_6; }
	inline float* get_address_of_m_OutWeight_6() { return &___m_OutWeight_6; }
	inline void set_m_OutWeight_6(float value)
	{
		___m_OutWeight_6 = value;
	}
};


// UnityEngine.LayerMask
struct LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0 
{
public:
	// System.Int32 UnityEngine.LayerMask::m_Mask
	int32_t ___m_Mask_0;

public:
	inline static int32_t get_offset_of_m_Mask_0() { return static_cast<int32_t>(offsetof(LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0, ___m_Mask_0)); }
	inline int32_t get_m_Mask_0() const { return ___m_Mask_0; }
	inline int32_t* get_address_of_m_Mask_0() { return &___m_Mask_0; }
	inline void set_m_Mask_0(int32_t value)
	{
		___m_Mask_0 = value;
	}
};


// UnityEngine.Mathf
struct Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB 
{
public:
	union
	{
		struct
		{
		};
		uint8_t Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB__padding[1];
	};

public:
};

struct Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields
{
public:
	// System.Single UnityEngine.Mathf::Epsilon
	float ___Epsilon_0;

public:
	inline static int32_t get_offset_of_Epsilon_0() { return static_cast<int32_t>(offsetof(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields, ___Epsilon_0)); }
	inline float get_Epsilon_0() const { return ___Epsilon_0; }
	inline float* get_address_of_Epsilon_0() { return &___Epsilon_0; }
	inline void set_Epsilon_0(float value)
	{
		___Epsilon_0 = value;
	}
};


// UnityEngine.Quaternion
struct Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 
{
public:
	// System.Single UnityEngine.Quaternion::x
	float ___x_0;
	// System.Single UnityEngine.Quaternion::y
	float ___y_1;
	// System.Single UnityEngine.Quaternion::z
	float ___z_2;
	// System.Single UnityEngine.Quaternion::w
	float ___w_3;

public:
	inline static int32_t get_offset_of_x_0() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___x_0)); }
	inline float get_x_0() const { return ___x_0; }
	inline float* get_address_of_x_0() { return &___x_0; }
	inline void set_x_0(float value)
	{
		___x_0 = value;
	}

	inline static int32_t get_offset_of_y_1() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___y_1)); }
	inline float get_y_1() const { return ___y_1; }
	inline float* get_address_of_y_1() { return &___y_1; }
	inline void set_y_1(float value)
	{
		___y_1 = value;
	}

	inline static int32_t get_offset_of_z_2() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___z_2)); }
	inline float get_z_2() const { return ___z_2; }
	inline float* get_address_of_z_2() { return &___z_2; }
	inline void set_z_2(float value)
	{
		___z_2 = value;
	}

	inline static int32_t get_offset_of_w_3() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___w_3)); }
	inline float get_w_3() const { return ___w_3; }
	inline float* get_address_of_w_3() { return &___w_3; }
	inline void set_w_3(float value)
	{
		___w_3 = value;
	}
};

struct Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_StaticFields
{
public:
	// UnityEngine.Quaternion UnityEngine.Quaternion::identityQuaternion
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___identityQuaternion_4;

public:
	inline static int32_t get_offset_of_identityQuaternion_4() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_StaticFields, ___identityQuaternion_4)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_identityQuaternion_4() const { return ___identityQuaternion_4; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_identityQuaternion_4() { return &___identityQuaternion_4; }
	inline void set_identityQuaternion_4(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___identityQuaternion_4 = value;
	}
};


// UnityEngine.Rect
struct Rect_t35B976DE901B5423C11705E156938EA27AB402CE 
{
public:
	// System.Single UnityEngine.Rect::m_XMin
	float ___m_XMin_0;
	// System.Single UnityEngine.Rect::m_YMin
	float ___m_YMin_1;
	// System.Single UnityEngine.Rect::m_Width
	float ___m_Width_2;
	// System.Single UnityEngine.Rect::m_Height
	float ___m_Height_3;

public:
	inline static int32_t get_offset_of_m_XMin_0() { return static_cast<int32_t>(offsetof(Rect_t35B976DE901B5423C11705E156938EA27AB402CE, ___m_XMin_0)); }
	inline float get_m_XMin_0() const { return ___m_XMin_0; }
	inline float* get_address_of_m_XMin_0() { return &___m_XMin_0; }
	inline void set_m_XMin_0(float value)
	{
		___m_XMin_0 = value;
	}

	inline static int32_t get_offset_of_m_YMin_1() { return static_cast<int32_t>(offsetof(Rect_t35B976DE901B5423C11705E156938EA27AB402CE, ___m_YMin_1)); }
	inline float get_m_YMin_1() const { return ___m_YMin_1; }
	inline float* get_address_of_m_YMin_1() { return &___m_YMin_1; }
	inline void set_m_YMin_1(float value)
	{
		___m_YMin_1 = value;
	}

	inline static int32_t get_offset_of_m_Width_2() { return static_cast<int32_t>(offsetof(Rect_t35B976DE901B5423C11705E156938EA27AB402CE, ___m_Width_2)); }
	inline float get_m_Width_2() const { return ___m_Width_2; }
	inline float* get_address_of_m_Width_2() { return &___m_Width_2; }
	inline void set_m_Width_2(float value)
	{
		___m_Width_2 = value;
	}

	inline static int32_t get_offset_of_m_Height_3() { return static_cast<int32_t>(offsetof(Rect_t35B976DE901B5423C11705E156938EA27AB402CE, ___m_Height_3)); }
	inline float get_m_Height_3() const { return ___m_Height_3; }
	inline float* get_address_of_m_Height_3() { return &___m_Height_3; }
	inline void set_m_Height_3(float value)
	{
		___m_Height_3 = value;
	}
};


// UnityEngine.Vector2
struct Vector2_tA85D2DD88578276CA8A8796756458277E72D073D 
{
public:
	// System.Single UnityEngine.Vector2::x
	float ___x_0;
	// System.Single UnityEngine.Vector2::y
	float ___y_1;

public:
	inline static int32_t get_offset_of_x_0() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D, ___x_0)); }
	inline float get_x_0() const { return ___x_0; }
	inline float* get_address_of_x_0() { return &___x_0; }
	inline void set_x_0(float value)
	{
		___x_0 = value;
	}

	inline static int32_t get_offset_of_y_1() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D, ___y_1)); }
	inline float get_y_1() const { return ___y_1; }
	inline float* get_address_of_y_1() { return &___y_1; }
	inline void set_y_1(float value)
	{
		___y_1 = value;
	}
};

struct Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields
{
public:
	// UnityEngine.Vector2 UnityEngine.Vector2::zeroVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___zeroVector_2;
	// UnityEngine.Vector2 UnityEngine.Vector2::oneVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___oneVector_3;
	// UnityEngine.Vector2 UnityEngine.Vector2::upVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___upVector_4;
	// UnityEngine.Vector2 UnityEngine.Vector2::downVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___downVector_5;
	// UnityEngine.Vector2 UnityEngine.Vector2::leftVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___leftVector_6;
	// UnityEngine.Vector2 UnityEngine.Vector2::rightVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___rightVector_7;
	// UnityEngine.Vector2 UnityEngine.Vector2::positiveInfinityVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___positiveInfinityVector_8;
	// UnityEngine.Vector2 UnityEngine.Vector2::negativeInfinityVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___negativeInfinityVector_9;

public:
	inline static int32_t get_offset_of_zeroVector_2() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___zeroVector_2)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_zeroVector_2() const { return ___zeroVector_2; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_zeroVector_2() { return &___zeroVector_2; }
	inline void set_zeroVector_2(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___zeroVector_2 = value;
	}

	inline static int32_t get_offset_of_oneVector_3() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___oneVector_3)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_oneVector_3() const { return ___oneVector_3; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_oneVector_3() { return &___oneVector_3; }
	inline void set_oneVector_3(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___oneVector_3 = value;
	}

	inline static int32_t get_offset_of_upVector_4() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___upVector_4)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_upVector_4() const { return ___upVector_4; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_upVector_4() { return &___upVector_4; }
	inline void set_upVector_4(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___upVector_4 = value;
	}

	inline static int32_t get_offset_of_downVector_5() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___downVector_5)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_downVector_5() const { return ___downVector_5; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_downVector_5() { return &___downVector_5; }
	inline void set_downVector_5(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___downVector_5 = value;
	}

	inline static int32_t get_offset_of_leftVector_6() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___leftVector_6)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_leftVector_6() const { return ___leftVector_6; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_leftVector_6() { return &___leftVector_6; }
	inline void set_leftVector_6(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___leftVector_6 = value;
	}

	inline static int32_t get_offset_of_rightVector_7() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___rightVector_7)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_rightVector_7() const { return ___rightVector_7; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_rightVector_7() { return &___rightVector_7; }
	inline void set_rightVector_7(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___rightVector_7 = value;
	}

	inline static int32_t get_offset_of_positiveInfinityVector_8() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___positiveInfinityVector_8)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_positiveInfinityVector_8() const { return ___positiveInfinityVector_8; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_positiveInfinityVector_8() { return &___positiveInfinityVector_8; }
	inline void set_positiveInfinityVector_8(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___positiveInfinityVector_8 = value;
	}

	inline static int32_t get_offset_of_negativeInfinityVector_9() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___negativeInfinityVector_9)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_negativeInfinityVector_9() const { return ___negativeInfinityVector_9; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_negativeInfinityVector_9() { return &___negativeInfinityVector_9; }
	inline void set_negativeInfinityVector_9(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___negativeInfinityVector_9 = value;
	}
};


// UnityEngine.Vector3
struct Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 
{
public:
	// System.Single UnityEngine.Vector3::x
	float ___x_2;
	// System.Single UnityEngine.Vector3::y
	float ___y_3;
	// System.Single UnityEngine.Vector3::z
	float ___z_4;

public:
	inline static int32_t get_offset_of_x_2() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___x_2)); }
	inline float get_x_2() const { return ___x_2; }
	inline float* get_address_of_x_2() { return &___x_2; }
	inline void set_x_2(float value)
	{
		___x_2 = value;
	}

	inline static int32_t get_offset_of_y_3() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___y_3)); }
	inline float get_y_3() const { return ___y_3; }
	inline float* get_address_of_y_3() { return &___y_3; }
	inline void set_y_3(float value)
	{
		___y_3 = value;
	}

	inline static int32_t get_offset_of_z_4() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___z_4)); }
	inline float get_z_4() const { return ___z_4; }
	inline float* get_address_of_z_4() { return &___z_4; }
	inline void set_z_4(float value)
	{
		___z_4 = value;
	}
};

struct Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields
{
public:
	// UnityEngine.Vector3 UnityEngine.Vector3::zeroVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___zeroVector_5;
	// UnityEngine.Vector3 UnityEngine.Vector3::oneVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___oneVector_6;
	// UnityEngine.Vector3 UnityEngine.Vector3::upVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___upVector_7;
	// UnityEngine.Vector3 UnityEngine.Vector3::downVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___downVector_8;
	// UnityEngine.Vector3 UnityEngine.Vector3::leftVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___leftVector_9;
	// UnityEngine.Vector3 UnityEngine.Vector3::rightVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rightVector_10;
	// UnityEngine.Vector3 UnityEngine.Vector3::forwardVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___forwardVector_11;
	// UnityEngine.Vector3 UnityEngine.Vector3::backVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___backVector_12;
	// UnityEngine.Vector3 UnityEngine.Vector3::positiveInfinityVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___positiveInfinityVector_13;
	// UnityEngine.Vector3 UnityEngine.Vector3::negativeInfinityVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___negativeInfinityVector_14;

public:
	inline static int32_t get_offset_of_zeroVector_5() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___zeroVector_5)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_zeroVector_5() const { return ___zeroVector_5; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_zeroVector_5() { return &___zeroVector_5; }
	inline void set_zeroVector_5(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___zeroVector_5 = value;
	}

	inline static int32_t get_offset_of_oneVector_6() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___oneVector_6)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_oneVector_6() const { return ___oneVector_6; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_oneVector_6() { return &___oneVector_6; }
	inline void set_oneVector_6(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___oneVector_6 = value;
	}

	inline static int32_t get_offset_of_upVector_7() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___upVector_7)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_upVector_7() const { return ___upVector_7; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_upVector_7() { return &___upVector_7; }
	inline void set_upVector_7(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___upVector_7 = value;
	}

	inline static int32_t get_offset_of_downVector_8() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___downVector_8)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_downVector_8() const { return ___downVector_8; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_downVector_8() { return &___downVector_8; }
	inline void set_downVector_8(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___downVector_8 = value;
	}

	inline static int32_t get_offset_of_leftVector_9() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___leftVector_9)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_leftVector_9() const { return ___leftVector_9; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_leftVector_9() { return &___leftVector_9; }
	inline void set_leftVector_9(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___leftVector_9 = value;
	}

	inline static int32_t get_offset_of_rightVector_10() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___rightVector_10)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_rightVector_10() const { return ___rightVector_10; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_rightVector_10() { return &___rightVector_10; }
	inline void set_rightVector_10(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___rightVector_10 = value;
	}

	inline static int32_t get_offset_of_forwardVector_11() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___forwardVector_11)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_forwardVector_11() const { return ___forwardVector_11; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_forwardVector_11() { return &___forwardVector_11; }
	inline void set_forwardVector_11(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___forwardVector_11 = value;
	}

	inline static int32_t get_offset_of_backVector_12() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___backVector_12)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_backVector_12() const { return ___backVector_12; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_backVector_12() { return &___backVector_12; }
	inline void set_backVector_12(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___backVector_12 = value;
	}

	inline static int32_t get_offset_of_positiveInfinityVector_13() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___positiveInfinityVector_13)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_positiveInfinityVector_13() const { return ___positiveInfinityVector_13; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_positiveInfinityVector_13() { return &___positiveInfinityVector_13; }
	inline void set_positiveInfinityVector_13(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___positiveInfinityVector_13 = value;
	}

	inline static int32_t get_offset_of_negativeInfinityVector_14() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___negativeInfinityVector_14)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_negativeInfinityVector_14() const { return ___negativeInfinityVector_14; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_negativeInfinityVector_14() { return &___negativeInfinityVector_14; }
	inline void set_negativeInfinityVector_14(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___negativeInfinityVector_14 = value;
	}
};


// <PrivateImplementationDetails>
struct U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765  : public RuntimeObject
{
public:

public:
};

struct U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields
{
public:
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::3AF033CF3264B808760C3A2CDCFBD390AF81C8BE
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___3AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::42CFCBAA436AAD284E2C9997397BD83197DEDFA1
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___42CFCBAA436AAD284E2C9997397BD83197DEDFA1_2;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::64792C5DA8315C67B036FB03C56F50B02A7B97F7
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___64792C5DA8315C67B036FB03C56F50B02A7B97F7_4;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=48 <PrivateImplementationDetails>::8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50
	__StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5  ___8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::93A73E5548F18182D27703F6B878D761F8AC01FE
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___93A73E5548F18182D27703F6B878D761F8AC01FE_8;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::A5220740A843E2651AB2607371076B212DFF48E6
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___A5220740A843E2651AB2607371076B212DFF48E6_9;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::CD46CDCC7BDB27F008C934B0C63D21111452F976
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___CD46CDCC7BDB27F008C934B0C63D21111452F976_11;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>::CF55838B41489BA73EB8B45F930C50281E3A487A
	__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  ___CF55838B41489BA73EB8B45F930C50281E3A487A_12;
	// <PrivateImplementationDetails>/__StaticArrayInitTypeSize=24 <PrivateImplementationDetails>::D72172177518732AAED3F0F3CE771A3EB096E902
	__StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406  ___D72172177518732AAED3F0F3CE771A3EB096E902_13;

public:
	inline static int32_t get_offset_of_U32DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U32DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0() const { return ___2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U32DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0() { return &___2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0; }
	inline void set_U32DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___2DB493A5A27752CD4B12969E50B0EB94CB3C8EE7_0 = value;
	}

	inline static int32_t get_offset_of_U33AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___3AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U33AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1() const { return ___3AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U33AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1() { return &___3AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1; }
	inline void set_U33AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___3AF033CF3264B808760C3A2CDCFBD390AF81C8BE_1 = value;
	}

	inline static int32_t get_offset_of_U342CFCBAA436AAD284E2C9997397BD83197DEDFA1_2() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___42CFCBAA436AAD284E2C9997397BD83197DEDFA1_2)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U342CFCBAA436AAD284E2C9997397BD83197DEDFA1_2() const { return ___42CFCBAA436AAD284E2C9997397BD83197DEDFA1_2; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U342CFCBAA436AAD284E2C9997397BD83197DEDFA1_2() { return &___42CFCBAA436AAD284E2C9997397BD83197DEDFA1_2; }
	inline void set_U342CFCBAA436AAD284E2C9997397BD83197DEDFA1_2(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___42CFCBAA436AAD284E2C9997397BD83197DEDFA1_2 = value;
	}

	inline static int32_t get_offset_of_U35C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U35C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3() const { return ___5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U35C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3() { return &___5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3; }
	inline void set_U35C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___5C7D2BD1EC2DE9F5DBFE7F28BD05742BDE5E53E7_3 = value;
	}

	inline static int32_t get_offset_of_U364792C5DA8315C67B036FB03C56F50B02A7B97F7_4() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___64792C5DA8315C67B036FB03C56F50B02A7B97F7_4)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U364792C5DA8315C67B036FB03C56F50B02A7B97F7_4() const { return ___64792C5DA8315C67B036FB03C56F50B02A7B97F7_4; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U364792C5DA8315C67B036FB03C56F50B02A7B97F7_4() { return &___64792C5DA8315C67B036FB03C56F50B02A7B97F7_4; }
	inline void set_U364792C5DA8315C67B036FB03C56F50B02A7B97F7_4(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___64792C5DA8315C67B036FB03C56F50B02A7B97F7_4 = value;
	}

	inline static int32_t get_offset_of_U378560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U378560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5() const { return ___78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U378560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5() { return &___78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5; }
	inline void set_U378560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___78560B46D1DB1C5A4E5A2E032DEEB13ADA6E1F58_5 = value;
	}

	inline static int32_t get_offset_of_U37E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U37E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6() const { return ___7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U37E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6() { return &___7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6; }
	inline void set_U37E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___7E9171A585973EF4D4AC8A72EFB56AD9F0906A3D_6 = value;
	}

	inline static int32_t get_offset_of_U38F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7)); }
	inline __StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5  get_U38F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7() const { return ___8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7; }
	inline __StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5 * get_address_of_U38F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7() { return &___8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7; }
	inline void set_U38F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7(__StaticArrayInitTypeSizeU3D48_tA080233C99B95D221ECB9F8510AA5AA8A2D82AD5  value)
	{
		___8F9745321FB6DB37E637DB2B3AC0C65EDD88FC50_7 = value;
	}

	inline static int32_t get_offset_of_U393A73E5548F18182D27703F6B878D761F8AC01FE_8() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___93A73E5548F18182D27703F6B878D761F8AC01FE_8)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_U393A73E5548F18182D27703F6B878D761F8AC01FE_8() const { return ___93A73E5548F18182D27703F6B878D761F8AC01FE_8; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_U393A73E5548F18182D27703F6B878D761F8AC01FE_8() { return &___93A73E5548F18182D27703F6B878D761F8AC01FE_8; }
	inline void set_U393A73E5548F18182D27703F6B878D761F8AC01FE_8(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___93A73E5548F18182D27703F6B878D761F8AC01FE_8 = value;
	}

	inline static int32_t get_offset_of_A5220740A843E2651AB2607371076B212DFF48E6_9() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___A5220740A843E2651AB2607371076B212DFF48E6_9)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_A5220740A843E2651AB2607371076B212DFF48E6_9() const { return ___A5220740A843E2651AB2607371076B212DFF48E6_9; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_A5220740A843E2651AB2607371076B212DFF48E6_9() { return &___A5220740A843E2651AB2607371076B212DFF48E6_9; }
	inline void set_A5220740A843E2651AB2607371076B212DFF48E6_9(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___A5220740A843E2651AB2607371076B212DFF48E6_9 = value;
	}

	inline static int32_t get_offset_of_C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10() const { return ___C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10() { return &___C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10; }
	inline void set_C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10 = value;
	}

	inline static int32_t get_offset_of_CD46CDCC7BDB27F008C934B0C63D21111452F976_11() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___CD46CDCC7BDB27F008C934B0C63D21111452F976_11)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_CD46CDCC7BDB27F008C934B0C63D21111452F976_11() const { return ___CD46CDCC7BDB27F008C934B0C63D21111452F976_11; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_CD46CDCC7BDB27F008C934B0C63D21111452F976_11() { return &___CD46CDCC7BDB27F008C934B0C63D21111452F976_11; }
	inline void set_CD46CDCC7BDB27F008C934B0C63D21111452F976_11(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___CD46CDCC7BDB27F008C934B0C63D21111452F976_11 = value;
	}

	inline static int32_t get_offset_of_CF55838B41489BA73EB8B45F930C50281E3A487A_12() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___CF55838B41489BA73EB8B45F930C50281E3A487A_12)); }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  get_CF55838B41489BA73EB8B45F930C50281E3A487A_12() const { return ___CF55838B41489BA73EB8B45F930C50281E3A487A_12; }
	inline __StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC * get_address_of_CF55838B41489BA73EB8B45F930C50281E3A487A_12() { return &___CF55838B41489BA73EB8B45F930C50281E3A487A_12; }
	inline void set_CF55838B41489BA73EB8B45F930C50281E3A487A_12(__StaticArrayInitTypeSizeU3D16_tB97E7CED14B76D662D8444D99DFC7AA4251D25AC  value)
	{
		___CF55838B41489BA73EB8B45F930C50281E3A487A_12 = value;
	}

	inline static int32_t get_offset_of_D72172177518732AAED3F0F3CE771A3EB096E902_13() { return static_cast<int32_t>(offsetof(U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765_StaticFields, ___D72172177518732AAED3F0F3CE771A3EB096E902_13)); }
	inline __StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406  get_D72172177518732AAED3F0F3CE771A3EB096E902_13() const { return ___D72172177518732AAED3F0F3CE771A3EB096E902_13; }
	inline __StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406 * get_address_of_D72172177518732AAED3F0F3CE771A3EB096E902_13() { return &___D72172177518732AAED3F0F3CE771A3EB096E902_13; }
	inline void set_D72172177518732AAED3F0F3CE771A3EB096E902_13(__StaticArrayInitTypeSizeU3D24_t14E17D587DCFCF54B711E73538E107215E074406  value)
	{
		___D72172177518732AAED3F0F3CE771A3EB096E902_13 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Input.InputSourceType
struct InputSourceType_t7E93B54E969B1ADEFA7692E15D26DD751A47D22A 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Input.InputSourceType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(InputSourceType_t7E93B54E969B1ADEFA7692E15D26DD751A47D22A, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.AxisFlags
struct AxisFlags_tA706F4AF32ADDF855FEB5300A9A8DAB8F33D0696 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.AxisFlags::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(AxisFlags_tA706F4AF32ADDF855FEB5300A9A8DAB8F33D0696, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.AxisType
struct AxisType_t45CEF046648179DA1FDF98C495D40AA34823C164 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.AxisType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(AxisType_t45CEF046648179DA1FDF98C495D40AA34823C164, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.CollationOrder
struct CollationOrder_t515E0BB074BE25ED67629C76ACFE667E2DD373B6 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.CollationOrder::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(CollationOrder_t515E0BB074BE25ED67629C76ACFE667E2DD373B6, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Easing/BasicEaseCurves
struct BasicEaseCurves_t98A7EE5DBB8CE5EB9C18223017FD2DA9C78ABF9A 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Easing/BasicEaseCurves::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(BasicEaseCurves_t98A7EE5DBB8CE5EB9C18223017FD2DA9C78ABF9A, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Handedness
struct Handedness_tA51C49CA286A1BC201E1680F521639E9AC1165AB 
{
public:
	// System.Byte Microsoft.MixedReality.Toolkit.Utilities.Handedness::value__
	uint8_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(Handedness_tA51C49CA286A1BC201E1680F521639E9AC1165AB, ___value___2)); }
	inline uint8_t get_value___2() const { return ___value___2; }
	inline uint8_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(uint8_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor
struct LayoutAnchor_t2EBE10B32649E6BB5397827A8BFAD1C8AD9B2914 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(LayoutAnchor_t2EBE10B32649E6BB5397827A8BFAD1C8AD9B2914, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment
struct LayoutHorizontalAlignment_t7D6E56488785A501AFED9095CD688E0744EE3E48 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(LayoutHorizontalAlignment_t7D6E56488785A501AFED9095CD688E0744EE3E48, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder
struct LayoutOrder_tEEB3CE75A90E480BA984ADC4632861C017D51C0A 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(LayoutOrder_tEEB3CE75A90E480BA984ADC4632861C017D51C0A, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment
struct LayoutVerticalAlignment_tE626FCEA65D2DC8A9FE06DBD89C572A06DD6B025 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(LayoutVerticalAlignment_tE626FCEA65D2DC8A9FE06DBD89C572A06DD6B025, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose
struct MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 
{
public:
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::position
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___position_1;
	// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::rotation
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rotation_2;

public:
	inline static int32_t get_offset_of_position_1() { return static_cast<int32_t>(offsetof(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45, ___position_1)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_position_1() const { return ___position_1; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_position_1() { return &___position_1; }
	inline void set_position_1(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___position_1 = value;
	}

	inline static int32_t get_offset_of_rotation_2() { return static_cast<int32_t>(offsetof(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45, ___rotation_2)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_rotation_2() const { return ___rotation_2; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_rotation_2() { return &___rotation_2; }
	inline void set_rotation_2(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___rotation_2 = value;
	}
};

struct MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45_StaticFields
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::<ZeroIdentity>k__BackingField
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___U3CZeroIdentityU3Ek__BackingField_0;

public:
	inline static int32_t get_offset_of_U3CZeroIdentityU3Ek__BackingField_0() { return static_cast<int32_t>(offsetof(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45_StaticFields, ___U3CZeroIdentityU3Ek__BackingField_0)); }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  get_U3CZeroIdentityU3Ek__BackingField_0() const { return ___U3CZeroIdentityU3Ek__BackingField_0; }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * get_address_of_U3CZeroIdentityU3Ek__BackingField_0() { return &___U3CZeroIdentityU3Ek__BackingField_0; }
	inline void set_U3CZeroIdentityU3Ek__BackingField_0(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  value)
	{
		___U3CZeroIdentityU3Ek__BackingField_0 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode
struct ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425  : public RuntimeObject
{
public:
	// System.String Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::Name
	String_t* ___Name_0;
	// UnityEngine.Vector2 Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::Offset
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___Offset_1;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::Radius
	float ___Radius_2;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::Transform
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___Transform_3;
	// UnityEngine.Collider[] Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::Colliders
	ColliderU5BU5D_t70D1FDAE17E4359298B2BAA828048D1B7CFFE252* ___Colliders_4;

public:
	inline static int32_t get_offset_of_Name_0() { return static_cast<int32_t>(offsetof(ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425, ___Name_0)); }
	inline String_t* get_Name_0() const { return ___Name_0; }
	inline String_t** get_address_of_Name_0() { return &___Name_0; }
	inline void set_Name_0(String_t* value)
	{
		___Name_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Name_0), (void*)value);
	}

	inline static int32_t get_offset_of_Offset_1() { return static_cast<int32_t>(offsetof(ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425, ___Offset_1)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_Offset_1() const { return ___Offset_1; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_Offset_1() { return &___Offset_1; }
	inline void set_Offset_1(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___Offset_1 = value;
	}

	inline static int32_t get_offset_of_Radius_2() { return static_cast<int32_t>(offsetof(ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425, ___Radius_2)); }
	inline float get_Radius_2() const { return ___Radius_2; }
	inline float* get_address_of_Radius_2() { return &___Radius_2; }
	inline void set_Radius_2(float value)
	{
		___Radius_2 = value;
	}

	inline static int32_t get_offset_of_Transform_3() { return static_cast<int32_t>(offsetof(ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425, ___Transform_3)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_Transform_3() const { return ___Transform_3; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_Transform_3() { return &___Transform_3; }
	inline void set_Transform_3(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___Transform_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Transform_3), (void*)value);
	}

	inline static int32_t get_offset_of_Colliders_4() { return static_cast<int32_t>(offsetof(ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425, ___Colliders_4)); }
	inline ColliderU5BU5D_t70D1FDAE17E4359298B2BAA828048D1B7CFFE252* get_Colliders_4() const { return ___Colliders_4; }
	inline ColliderU5BU5D_t70D1FDAE17E4359298B2BAA828048D1B7CFFE252** get_address_of_Colliders_4() { return &___Colliders_4; }
	inline void set_Colliders_4(ColliderU5BU5D_t70D1FDAE17E4359298B2BAA828048D1B7CFFE252* value)
	{
		___Colliders_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Colliders_4), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType
struct ObjectOrientationSurfaceType_tEA4BE4186E677D04B5105B7CF9F5026895AF9F5D 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(ObjectOrientationSurfaceType_tEA4BE4186E677D04B5105B7CF9F5026895AF9F5D, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.OrientationType
struct OrientationType_tB6FB0E1746B10E1C14DCCEF33535D2EF537D1BEC 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.OrientationType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(OrientationType_tB6FB0E1746B10E1C14DCCEF33535D2EF537D1BEC, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.ScaleState
struct ScaleState_t1267BB5CBC733E6AD11436E37A0248DAB657F03D 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.ScaleState::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(ScaleState_t1267BB5CBC733E6AD11436E37A0248DAB657F03D, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType
struct SolverOrientationType_t76AF2F52E10AB44FF66F622603C8954247BCFBFD 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SolverOrientationType_t76AF2F52E10AB44FF66F622603C8954247BCFBFD, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType
struct AngularClampType_tCC8086D7102990E12CE5A41D5E403ADFE75247B5 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(AngularClampType_tCC8086D7102990E12CE5A41D5E403ADFE75247B5, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior
struct SolverOffsetBehavior_t65BB69DDE9A00DEBC884D045D66D79556CFB6234 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SolverOffsetBehavior_t65BB69DDE9A00DEBC884D045D66D79556CFB6234, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior
struct SolverRotationBehavior_tBB8D80D2AA5931C289965C0AAF2559BF8CA1C05D 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SolverRotationBehavior_tBB8D80D2AA5931C289965C0AAF2559BF8CA1C05D, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone
struct SolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint
struct TrackedHandJoint_tDE2FD40782A5B0C1D39386D6BF70D8A1CCF94E22 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(TrackedHandJoint_tDE2FD40782A5B0C1D39386D6BF70D8A1CCF94E22, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType
struct TrackedObjectType_tD9B3AD7CFF77DA9C8E5C17D3B17981BC948F66AC 
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(TrackedObjectType_tD9B3AD7CFF77DA9C8E5C17D3B17981BC948F66AC, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed
struct Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6 
{
public:
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed::<Current>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CCurrentU3Ek__BackingField_0;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed::<Goal>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CGoalU3Ek__BackingField_1;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed::<SmoothTime>k__BackingField
	float ___U3CSmoothTimeU3Ek__BackingField_2;

public:
	inline static int32_t get_offset_of_U3CCurrentU3Ek__BackingField_0() { return static_cast<int32_t>(offsetof(Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6, ___U3CCurrentU3Ek__BackingField_0)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CCurrentU3Ek__BackingField_0() const { return ___U3CCurrentU3Ek__BackingField_0; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CCurrentU3Ek__BackingField_0() { return &___U3CCurrentU3Ek__BackingField_0; }
	inline void set_U3CCurrentU3Ek__BackingField_0(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CCurrentU3Ek__BackingField_0 = value;
	}

	inline static int32_t get_offset_of_U3CGoalU3Ek__BackingField_1() { return static_cast<int32_t>(offsetof(Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6, ___U3CGoalU3Ek__BackingField_1)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CGoalU3Ek__BackingField_1() const { return ___U3CGoalU3Ek__BackingField_1; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CGoalU3Ek__BackingField_1() { return &___U3CGoalU3Ek__BackingField_1; }
	inline void set_U3CGoalU3Ek__BackingField_1(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CGoalU3Ek__BackingField_1 = value;
	}

	inline static int32_t get_offset_of_U3CSmoothTimeU3Ek__BackingField_2() { return static_cast<int32_t>(offsetof(Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6, ___U3CSmoothTimeU3Ek__BackingField_2)); }
	inline float get_U3CSmoothTimeU3Ek__BackingField_2() const { return ___U3CSmoothTimeU3Ek__BackingField_2; }
	inline float* get_address_of_U3CSmoothTimeU3Ek__BackingField_2() { return &___U3CSmoothTimeU3Ek__BackingField_2; }
	inline void set_U3CSmoothTimeU3Ek__BackingField_2(float value)
	{
		___U3CSmoothTimeU3Ek__BackingField_2 = value;
	}
};


// System.ByteEnum
struct ByteEnum_t406C975039F6312CDE58A265A6ECFD861F8C06CD 
{
public:
	// System.Byte System.ByteEnum::value__
	uint8_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(ByteEnum_t406C975039F6312CDE58A265A6ECFD861F8C06CD, ___value___2)); }
	inline uint8_t get_value___2() const { return ___value___2; }
	inline uint8_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(uint8_t value)
	{
		___value___2 = value;
	}
};


// System.Delegate
struct Delegate_t  : public RuntimeObject
{
public:
	// System.IntPtr System.Delegate::method_ptr
	Il2CppMethodPointer ___method_ptr_0;
	// System.IntPtr System.Delegate::invoke_impl
	intptr_t ___invoke_impl_1;
	// System.Object System.Delegate::m_target
	RuntimeObject * ___m_target_2;
	// System.IntPtr System.Delegate::method
	intptr_t ___method_3;
	// System.IntPtr System.Delegate::delegate_trampoline
	intptr_t ___delegate_trampoline_4;
	// System.IntPtr System.Delegate::extra_arg
	intptr_t ___extra_arg_5;
	// System.IntPtr System.Delegate::method_code
	intptr_t ___method_code_6;
	// System.Reflection.MethodInfo System.Delegate::method_info
	MethodInfo_t * ___method_info_7;
	// System.Reflection.MethodInfo System.Delegate::original_method_info
	MethodInfo_t * ___original_method_info_8;
	// System.DelegateData System.Delegate::data
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	// System.Boolean System.Delegate::method_is_virtual
	bool ___method_is_virtual_10;

public:
	inline static int32_t get_offset_of_method_ptr_0() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_ptr_0)); }
	inline Il2CppMethodPointer get_method_ptr_0() const { return ___method_ptr_0; }
	inline Il2CppMethodPointer* get_address_of_method_ptr_0() { return &___method_ptr_0; }
	inline void set_method_ptr_0(Il2CppMethodPointer value)
	{
		___method_ptr_0 = value;
	}

	inline static int32_t get_offset_of_invoke_impl_1() { return static_cast<int32_t>(offsetof(Delegate_t, ___invoke_impl_1)); }
	inline intptr_t get_invoke_impl_1() const { return ___invoke_impl_1; }
	inline intptr_t* get_address_of_invoke_impl_1() { return &___invoke_impl_1; }
	inline void set_invoke_impl_1(intptr_t value)
	{
		___invoke_impl_1 = value;
	}

	inline static int32_t get_offset_of_m_target_2() { return static_cast<int32_t>(offsetof(Delegate_t, ___m_target_2)); }
	inline RuntimeObject * get_m_target_2() const { return ___m_target_2; }
	inline RuntimeObject ** get_address_of_m_target_2() { return &___m_target_2; }
	inline void set_m_target_2(RuntimeObject * value)
	{
		___m_target_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_target_2), (void*)value);
	}

	inline static int32_t get_offset_of_method_3() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_3)); }
	inline intptr_t get_method_3() const { return ___method_3; }
	inline intptr_t* get_address_of_method_3() { return &___method_3; }
	inline void set_method_3(intptr_t value)
	{
		___method_3 = value;
	}

	inline static int32_t get_offset_of_delegate_trampoline_4() { return static_cast<int32_t>(offsetof(Delegate_t, ___delegate_trampoline_4)); }
	inline intptr_t get_delegate_trampoline_4() const { return ___delegate_trampoline_4; }
	inline intptr_t* get_address_of_delegate_trampoline_4() { return &___delegate_trampoline_4; }
	inline void set_delegate_trampoline_4(intptr_t value)
	{
		___delegate_trampoline_4 = value;
	}

	inline static int32_t get_offset_of_extra_arg_5() { return static_cast<int32_t>(offsetof(Delegate_t, ___extra_arg_5)); }
	inline intptr_t get_extra_arg_5() const { return ___extra_arg_5; }
	inline intptr_t* get_address_of_extra_arg_5() { return &___extra_arg_5; }
	inline void set_extra_arg_5(intptr_t value)
	{
		___extra_arg_5 = value;
	}

	inline static int32_t get_offset_of_method_code_6() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_code_6)); }
	inline intptr_t get_method_code_6() const { return ___method_code_6; }
	inline intptr_t* get_address_of_method_code_6() { return &___method_code_6; }
	inline void set_method_code_6(intptr_t value)
	{
		___method_code_6 = value;
	}

	inline static int32_t get_offset_of_method_info_7() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_info_7)); }
	inline MethodInfo_t * get_method_info_7() const { return ___method_info_7; }
	inline MethodInfo_t ** get_address_of_method_info_7() { return &___method_info_7; }
	inline void set_method_info_7(MethodInfo_t * value)
	{
		___method_info_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___method_info_7), (void*)value);
	}

	inline static int32_t get_offset_of_original_method_info_8() { return static_cast<int32_t>(offsetof(Delegate_t, ___original_method_info_8)); }
	inline MethodInfo_t * get_original_method_info_8() const { return ___original_method_info_8; }
	inline MethodInfo_t ** get_address_of_original_method_info_8() { return &___original_method_info_8; }
	inline void set_original_method_info_8(MethodInfo_t * value)
	{
		___original_method_info_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___original_method_info_8), (void*)value);
	}

	inline static int32_t get_offset_of_data_9() { return static_cast<int32_t>(offsetof(Delegate_t, ___data_9)); }
	inline DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * get_data_9() const { return ___data_9; }
	inline DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE ** get_address_of_data_9() { return &___data_9; }
	inline void set_data_9(DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * value)
	{
		___data_9 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___data_9), (void*)value);
	}

	inline static int32_t get_offset_of_method_is_virtual_10() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_is_virtual_10)); }
	inline bool get_method_is_virtual_10() const { return ___method_is_virtual_10; }
	inline bool* get_address_of_method_is_virtual_10() { return &___method_is_virtual_10; }
	inline void set_method_is_virtual_10(bool value)
	{
		___method_is_virtual_10 = value;
	}
};

// Native definition for P/Invoke marshalling of System.Delegate
struct Delegate_t_marshaled_pinvoke
{
	intptr_t ___method_ptr_0;
	intptr_t ___invoke_impl_1;
	Il2CppIUnknown* ___m_target_2;
	intptr_t ___method_3;
	intptr_t ___delegate_trampoline_4;
	intptr_t ___extra_arg_5;
	intptr_t ___method_code_6;
	MethodInfo_t * ___method_info_7;
	MethodInfo_t * ___original_method_info_8;
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	int32_t ___method_is_virtual_10;
};
// Native definition for COM marshalling of System.Delegate
struct Delegate_t_marshaled_com
{
	intptr_t ___method_ptr_0;
	intptr_t ___invoke_impl_1;
	Il2CppIUnknown* ___m_target_2;
	intptr_t ___method_3;
	intptr_t ___delegate_trampoline_4;
	intptr_t ___extra_arg_5;
	intptr_t ___method_code_6;
	MethodInfo_t * ___method_info_7;
	MethodInfo_t * ___original_method_info_8;
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	int32_t ___method_is_virtual_10;
};

// System.Exception
struct Exception_t  : public RuntimeObject
{
public:
	// System.String System.Exception::_className
	String_t* ____className_1;
	// System.String System.Exception::_message
	String_t* ____message_2;
	// System.Collections.IDictionary System.Exception::_data
	RuntimeObject* ____data_3;
	// System.Exception System.Exception::_innerException
	Exception_t * ____innerException_4;
	// System.String System.Exception::_helpURL
	String_t* ____helpURL_5;
	// System.Object System.Exception::_stackTrace
	RuntimeObject * ____stackTrace_6;
	// System.String System.Exception::_stackTraceString
	String_t* ____stackTraceString_7;
	// System.String System.Exception::_remoteStackTraceString
	String_t* ____remoteStackTraceString_8;
	// System.Int32 System.Exception::_remoteStackIndex
	int32_t ____remoteStackIndex_9;
	// System.Object System.Exception::_dynamicMethods
	RuntimeObject * ____dynamicMethods_10;
	// System.Int32 System.Exception::_HResult
	int32_t ____HResult_11;
	// System.String System.Exception::_source
	String_t* ____source_12;
	// System.Runtime.Serialization.SafeSerializationManager System.Exception::_safeSerializationManager
	SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 * ____safeSerializationManager_13;
	// System.Diagnostics.StackTrace[] System.Exception::captured_traces
	StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196* ___captured_traces_14;
	// System.IntPtr[] System.Exception::native_trace_ips
	IntPtrU5BU5D_t4DC01DCB9A6DF6C9792A6513595D7A11E637DCDD* ___native_trace_ips_15;

public:
	inline static int32_t get_offset_of__className_1() { return static_cast<int32_t>(offsetof(Exception_t, ____className_1)); }
	inline String_t* get__className_1() const { return ____className_1; }
	inline String_t** get_address_of__className_1() { return &____className_1; }
	inline void set__className_1(String_t* value)
	{
		____className_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____className_1), (void*)value);
	}

	inline static int32_t get_offset_of__message_2() { return static_cast<int32_t>(offsetof(Exception_t, ____message_2)); }
	inline String_t* get__message_2() const { return ____message_2; }
	inline String_t** get_address_of__message_2() { return &____message_2; }
	inline void set__message_2(String_t* value)
	{
		____message_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____message_2), (void*)value);
	}

	inline static int32_t get_offset_of__data_3() { return static_cast<int32_t>(offsetof(Exception_t, ____data_3)); }
	inline RuntimeObject* get__data_3() const { return ____data_3; }
	inline RuntimeObject** get_address_of__data_3() { return &____data_3; }
	inline void set__data_3(RuntimeObject* value)
	{
		____data_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____data_3), (void*)value);
	}

	inline static int32_t get_offset_of__innerException_4() { return static_cast<int32_t>(offsetof(Exception_t, ____innerException_4)); }
	inline Exception_t * get__innerException_4() const { return ____innerException_4; }
	inline Exception_t ** get_address_of__innerException_4() { return &____innerException_4; }
	inline void set__innerException_4(Exception_t * value)
	{
		____innerException_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____innerException_4), (void*)value);
	}

	inline static int32_t get_offset_of__helpURL_5() { return static_cast<int32_t>(offsetof(Exception_t, ____helpURL_5)); }
	inline String_t* get__helpURL_5() const { return ____helpURL_5; }
	inline String_t** get_address_of__helpURL_5() { return &____helpURL_5; }
	inline void set__helpURL_5(String_t* value)
	{
		____helpURL_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____helpURL_5), (void*)value);
	}

	inline static int32_t get_offset_of__stackTrace_6() { return static_cast<int32_t>(offsetof(Exception_t, ____stackTrace_6)); }
	inline RuntimeObject * get__stackTrace_6() const { return ____stackTrace_6; }
	inline RuntimeObject ** get_address_of__stackTrace_6() { return &____stackTrace_6; }
	inline void set__stackTrace_6(RuntimeObject * value)
	{
		____stackTrace_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____stackTrace_6), (void*)value);
	}

	inline static int32_t get_offset_of__stackTraceString_7() { return static_cast<int32_t>(offsetof(Exception_t, ____stackTraceString_7)); }
	inline String_t* get__stackTraceString_7() const { return ____stackTraceString_7; }
	inline String_t** get_address_of__stackTraceString_7() { return &____stackTraceString_7; }
	inline void set__stackTraceString_7(String_t* value)
	{
		____stackTraceString_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____stackTraceString_7), (void*)value);
	}

	inline static int32_t get_offset_of__remoteStackTraceString_8() { return static_cast<int32_t>(offsetof(Exception_t, ____remoteStackTraceString_8)); }
	inline String_t* get__remoteStackTraceString_8() const { return ____remoteStackTraceString_8; }
	inline String_t** get_address_of__remoteStackTraceString_8() { return &____remoteStackTraceString_8; }
	inline void set__remoteStackTraceString_8(String_t* value)
	{
		____remoteStackTraceString_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____remoteStackTraceString_8), (void*)value);
	}

	inline static int32_t get_offset_of__remoteStackIndex_9() { return static_cast<int32_t>(offsetof(Exception_t, ____remoteStackIndex_9)); }
	inline int32_t get__remoteStackIndex_9() const { return ____remoteStackIndex_9; }
	inline int32_t* get_address_of__remoteStackIndex_9() { return &____remoteStackIndex_9; }
	inline void set__remoteStackIndex_9(int32_t value)
	{
		____remoteStackIndex_9 = value;
	}

	inline static int32_t get_offset_of__dynamicMethods_10() { return static_cast<int32_t>(offsetof(Exception_t, ____dynamicMethods_10)); }
	inline RuntimeObject * get__dynamicMethods_10() const { return ____dynamicMethods_10; }
	inline RuntimeObject ** get_address_of__dynamicMethods_10() { return &____dynamicMethods_10; }
	inline void set__dynamicMethods_10(RuntimeObject * value)
	{
		____dynamicMethods_10 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____dynamicMethods_10), (void*)value);
	}

	inline static int32_t get_offset_of__HResult_11() { return static_cast<int32_t>(offsetof(Exception_t, ____HResult_11)); }
	inline int32_t get__HResult_11() const { return ____HResult_11; }
	inline int32_t* get_address_of__HResult_11() { return &____HResult_11; }
	inline void set__HResult_11(int32_t value)
	{
		____HResult_11 = value;
	}

	inline static int32_t get_offset_of__source_12() { return static_cast<int32_t>(offsetof(Exception_t, ____source_12)); }
	inline String_t* get__source_12() const { return ____source_12; }
	inline String_t** get_address_of__source_12() { return &____source_12; }
	inline void set__source_12(String_t* value)
	{
		____source_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____source_12), (void*)value);
	}

	inline static int32_t get_offset_of__safeSerializationManager_13() { return static_cast<int32_t>(offsetof(Exception_t, ____safeSerializationManager_13)); }
	inline SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 * get__safeSerializationManager_13() const { return ____safeSerializationManager_13; }
	inline SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 ** get_address_of__safeSerializationManager_13() { return &____safeSerializationManager_13; }
	inline void set__safeSerializationManager_13(SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 * value)
	{
		____safeSerializationManager_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&____safeSerializationManager_13), (void*)value);
	}

	inline static int32_t get_offset_of_captured_traces_14() { return static_cast<int32_t>(offsetof(Exception_t, ___captured_traces_14)); }
	inline StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196* get_captured_traces_14() const { return ___captured_traces_14; }
	inline StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196** get_address_of_captured_traces_14() { return &___captured_traces_14; }
	inline void set_captured_traces_14(StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196* value)
	{
		___captured_traces_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___captured_traces_14), (void*)value);
	}

	inline static int32_t get_offset_of_native_trace_ips_15() { return static_cast<int32_t>(offsetof(Exception_t, ___native_trace_ips_15)); }
	inline IntPtrU5BU5D_t4DC01DCB9A6DF6C9792A6513595D7A11E637DCDD* get_native_trace_ips_15() const { return ___native_trace_ips_15; }
	inline IntPtrU5BU5D_t4DC01DCB9A6DF6C9792A6513595D7A11E637DCDD** get_address_of_native_trace_ips_15() { return &___native_trace_ips_15; }
	inline void set_native_trace_ips_15(IntPtrU5BU5D_t4DC01DCB9A6DF6C9792A6513595D7A11E637DCDD* value)
	{
		___native_trace_ips_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___native_trace_ips_15), (void*)value);
	}
};

struct Exception_t_StaticFields
{
public:
	// System.Object System.Exception::s_EDILock
	RuntimeObject * ___s_EDILock_0;

public:
	inline static int32_t get_offset_of_s_EDILock_0() { return static_cast<int32_t>(offsetof(Exception_t_StaticFields, ___s_EDILock_0)); }
	inline RuntimeObject * get_s_EDILock_0() const { return ___s_EDILock_0; }
	inline RuntimeObject ** get_address_of_s_EDILock_0() { return &___s_EDILock_0; }
	inline void set_s_EDILock_0(RuntimeObject * value)
	{
		___s_EDILock_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___s_EDILock_0), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of System.Exception
struct Exception_t_marshaled_pinvoke
{
	char* ____className_1;
	char* ____message_2;
	RuntimeObject* ____data_3;
	Exception_t_marshaled_pinvoke* ____innerException_4;
	char* ____helpURL_5;
	Il2CppIUnknown* ____stackTrace_6;
	char* ____stackTraceString_7;
	char* ____remoteStackTraceString_8;
	int32_t ____remoteStackIndex_9;
	Il2CppIUnknown* ____dynamicMethods_10;
	int32_t ____HResult_11;
	char* ____source_12;
	SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 * ____safeSerializationManager_13;
	StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196* ___captured_traces_14;
	Il2CppSafeArray/*NONE*/* ___native_trace_ips_15;
};
// Native definition for COM marshalling of System.Exception
struct Exception_t_marshaled_com
{
	Il2CppChar* ____className_1;
	Il2CppChar* ____message_2;
	RuntimeObject* ____data_3;
	Exception_t_marshaled_com* ____innerException_4;
	Il2CppChar* ____helpURL_5;
	Il2CppIUnknown* ____stackTrace_6;
	Il2CppChar* ____stackTraceString_7;
	Il2CppChar* ____remoteStackTraceString_8;
	int32_t ____remoteStackIndex_9;
	Il2CppIUnknown* ____dynamicMethods_10;
	int32_t ____HResult_11;
	Il2CppChar* ____source_12;
	SafeSerializationManager_t4A754D86B0F784B18CBC36C073BA564BED109770 * ____safeSerializationManager_13;
	StackTraceU5BU5D_t855F09649EA34DEE7C1B6F088E0538E3CCC3F196* ___captured_traces_14;
	Il2CppSafeArray/*NONE*/* ___native_trace_ips_15;
};

// System.Int32Enum
struct Int32Enum_t6312CE4586C17FE2E2E513D2E7655B574F10FDCD 
{
public:
	// System.Int32 System.Int32Enum::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(Int32Enum_t6312CE4586C17FE2E2E513D2E7655B574F10FDCD, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// System.RuntimeFieldHandle
struct RuntimeFieldHandle_t844BDF00E8E6FE69D9AEAA7657F09018B864F4EF 
{
public:
	// System.IntPtr System.RuntimeFieldHandle::value
	intptr_t ___value_0;

public:
	inline static int32_t get_offset_of_value_0() { return static_cast<int32_t>(offsetof(RuntimeFieldHandle_t844BDF00E8E6FE69D9AEAA7657F09018B864F4EF, ___value_0)); }
	inline intptr_t get_value_0() const { return ___value_0; }
	inline intptr_t* get_address_of_value_0() { return &___value_0; }
	inline void set_value_0(intptr_t value)
	{
		___value_0 = value;
	}
};


// UnityEngine.AnimationCurve
struct AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C  : public RuntimeObject
{
public:
	// System.IntPtr UnityEngine.AnimationCurve::m_Ptr
	intptr_t ___m_Ptr_0;

public:
	inline static int32_t get_offset_of_m_Ptr_0() { return static_cast<int32_t>(offsetof(AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C, ___m_Ptr_0)); }
	inline intptr_t get_m_Ptr_0() const { return ___m_Ptr_0; }
	inline intptr_t* get_address_of_m_Ptr_0() { return &___m_Ptr_0; }
	inline void set_m_Ptr_0(intptr_t value)
	{
		___m_Ptr_0 = value;
	}
};

// Native definition for P/Invoke marshalling of UnityEngine.AnimationCurve
struct AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_marshaled_pinvoke
{
	intptr_t ___m_Ptr_0;
};
// Native definition for COM marshalling of UnityEngine.AnimationCurve
struct AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_marshaled_com
{
	intptr_t ___m_Ptr_0;
};

// UnityEngine.Bounds
struct Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 
{
public:
	// UnityEngine.Vector3 UnityEngine.Bounds::m_Center
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___m_Center_0;
	// UnityEngine.Vector3 UnityEngine.Bounds::m_Extents
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___m_Extents_1;

public:
	inline static int32_t get_offset_of_m_Center_0() { return static_cast<int32_t>(offsetof(Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890, ___m_Center_0)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_m_Center_0() const { return ___m_Center_0; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_m_Center_0() { return &___m_Center_0; }
	inline void set_m_Center_0(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___m_Center_0 = value;
	}

	inline static int32_t get_offset_of_m_Extents_1() { return static_cast<int32_t>(offsetof(Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890, ___m_Extents_1)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_m_Extents_1() const { return ___m_Extents_1; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_m_Extents_1() { return &___m_Extents_1; }
	inline void set_m_Extents_1(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___m_Extents_1 = value;
	}
};


// UnityEngine.Coroutine
struct Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC  : public YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44
{
public:
	// System.IntPtr UnityEngine.Coroutine::m_Ptr
	intptr_t ___m_Ptr_0;

public:
	inline static int32_t get_offset_of_m_Ptr_0() { return static_cast<int32_t>(offsetof(Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC, ___m_Ptr_0)); }
	inline intptr_t get_m_Ptr_0() const { return ___m_Ptr_0; }
	inline intptr_t* get_address_of_m_Ptr_0() { return &___m_Ptr_0; }
	inline void set_m_Ptr_0(intptr_t value)
	{
		___m_Ptr_0 = value;
	}
};

// Native definition for P/Invoke marshalling of UnityEngine.Coroutine
struct Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC_marshaled_pinvoke : public YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44_marshaled_pinvoke
{
	intptr_t ___m_Ptr_0;
};
// Native definition for COM marshalling of UnityEngine.Coroutine
struct Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC_marshaled_com : public YieldInstruction_t836035AC7BD07A3C7909F7AD2A5B42DE99D91C44_marshaled_com
{
	intptr_t ___m_Ptr_0;
};

// UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0  : public RuntimeObject
{
public:
	// System.IntPtr UnityEngine.Object::m_CachedPtr
	intptr_t ___m_CachedPtr_0;

public:
	inline static int32_t get_offset_of_m_CachedPtr_0() { return static_cast<int32_t>(offsetof(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0, ___m_CachedPtr_0)); }
	inline intptr_t get_m_CachedPtr_0() const { return ___m_CachedPtr_0; }
	inline intptr_t* get_address_of_m_CachedPtr_0() { return &___m_CachedPtr_0; }
	inline void set_m_CachedPtr_0(intptr_t value)
	{
		___m_CachedPtr_0 = value;
	}
};

struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_StaticFields
{
public:
	// System.Int32 UnityEngine.Object::OffsetOfInstanceIDInCPlusPlusObject
	int32_t ___OffsetOfInstanceIDInCPlusPlusObject_1;

public:
	inline static int32_t get_offset_of_OffsetOfInstanceIDInCPlusPlusObject_1() { return static_cast<int32_t>(offsetof(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_StaticFields, ___OffsetOfInstanceIDInCPlusPlusObject_1)); }
	inline int32_t get_OffsetOfInstanceIDInCPlusPlusObject_1() const { return ___OffsetOfInstanceIDInCPlusPlusObject_1; }
	inline int32_t* get_address_of_OffsetOfInstanceIDInCPlusPlusObject_1() { return &___OffsetOfInstanceIDInCPlusPlusObject_1; }
	inline void set_OffsetOfInstanceIDInCPlusPlusObject_1(int32_t value)
	{
		___OffsetOfInstanceIDInCPlusPlusObject_1 = value;
	}
};

// Native definition for P/Invoke marshalling of UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_marshaled_pinvoke
{
	intptr_t ___m_CachedPtr_0;
};
// Native definition for COM marshalling of UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_marshaled_com
{
	intptr_t ___m_CachedPtr_0;
};

// UnityEngine.Plane
struct Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED 
{
public:
	// UnityEngine.Vector3 UnityEngine.Plane::m_Normal
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___m_Normal_0;
	// System.Single UnityEngine.Plane::m_Distance
	float ___m_Distance_1;

public:
	inline static int32_t get_offset_of_m_Normal_0() { return static_cast<int32_t>(offsetof(Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED, ___m_Normal_0)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_m_Normal_0() const { return ___m_Normal_0; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_m_Normal_0() { return &___m_Normal_0; }
	inline void set_m_Normal_0(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___m_Normal_0 = value;
	}

	inline static int32_t get_offset_of_m_Distance_1() { return static_cast<int32_t>(offsetof(Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED, ___m_Distance_1)); }
	inline float get_m_Distance_1() const { return ___m_Distance_1; }
	inline float* get_address_of_m_Distance_1() { return &___m_Distance_1; }
	inline void set_m_Distance_1(float value)
	{
		___m_Distance_1 = value;
	}
};


// UnityEngine.Ray
struct Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 
{
public:
	// UnityEngine.Vector3 UnityEngine.Ray::m_Origin
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___m_Origin_0;
	// UnityEngine.Vector3 UnityEngine.Ray::m_Direction
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___m_Direction_1;

public:
	inline static int32_t get_offset_of_m_Origin_0() { return static_cast<int32_t>(offsetof(Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2, ___m_Origin_0)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_m_Origin_0() const { return ___m_Origin_0; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_m_Origin_0() { return &___m_Origin_0; }
	inline void set_m_Origin_0(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___m_Origin_0 = value;
	}

	inline static int32_t get_offset_of_m_Direction_1() { return static_cast<int32_t>(offsetof(Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2, ___m_Direction_1)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_m_Direction_1() const { return ___m_Direction_1; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_m_Direction_1() { return &___m_Direction_1; }
	inline void set_m_Direction_1(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___m_Direction_1 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction
struct MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073 
{
public:
	// System.UInt32 Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction::id
	uint32_t ___id_1;
	// System.String Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction::description
	String_t* ___description_2;
	// Microsoft.MixedReality.Toolkit.Utilities.AxisType Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction::axisConstraint
	int32_t ___axisConstraint_3;

public:
	inline static int32_t get_offset_of_id_1() { return static_cast<int32_t>(offsetof(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073, ___id_1)); }
	inline uint32_t get_id_1() const { return ___id_1; }
	inline uint32_t* get_address_of_id_1() { return &___id_1; }
	inline void set_id_1(uint32_t value)
	{
		___id_1 = value;
	}

	inline static int32_t get_offset_of_description_2() { return static_cast<int32_t>(offsetof(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073, ___description_2)); }
	inline String_t* get_description_2() const { return ___description_2; }
	inline String_t** get_address_of_description_2() { return &___description_2; }
	inline void set_description_2(String_t* value)
	{
		___description_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___description_2), (void*)value);
	}

	inline static int32_t get_offset_of_axisConstraint_3() { return static_cast<int32_t>(offsetof(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073, ___axisConstraint_3)); }
	inline int32_t get_axisConstraint_3() const { return ___axisConstraint_3; }
	inline int32_t* get_address_of_axisConstraint_3() { return &___axisConstraint_3; }
	inline void set_axisConstraint_3(int32_t value)
	{
		___axisConstraint_3 = value;
	}
};

struct MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073_StaticFields
{
public:
	// Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction::<None>k__BackingField
	MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  ___U3CNoneU3Ek__BackingField_0;

public:
	inline static int32_t get_offset_of_U3CNoneU3Ek__BackingField_0() { return static_cast<int32_t>(offsetof(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073_StaticFields, ___U3CNoneU3Ek__BackingField_0)); }
	inline MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  get_U3CNoneU3Ek__BackingField_0() const { return ___U3CNoneU3Ek__BackingField_0; }
	inline MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073 * get_address_of_U3CNoneU3Ek__BackingField_0() { return &___U3CNoneU3Ek__BackingField_0; }
	inline void set_U3CNoneU3Ek__BackingField_0(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  value)
	{
		___U3CNoneU3Ek__BackingField_0 = value;
		Il2CppCodeGenWriteBarrier((void**)&(((&___U3CNoneU3Ek__BackingField_0))->___description_2), (void*)NULL);
	}
};

// Native definition for P/Invoke marshalling of Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction
struct MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073_marshaled_pinvoke
{
	uint32_t ___id_1;
	char* ___description_2;
	int32_t ___axisConstraint_3;
};
// Native definition for COM marshalling of Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction
struct MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073_marshaled_com
{
	uint32_t ___id_1;
	Il2CppChar* ___description_2;
	int32_t ___axisConstraint_3;
};

// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42
struct U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0  : public RuntimeObject
{
public:
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<>1__state
	int32_t ___U3CU3E1__state_0;
	// System.Object Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<>2__current
	RuntimeObject * ___U3CU3E2__current_1;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<>4__this
	HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * ___U3CU3E4__this_2;
	// Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<palmPose>5__1
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___U3CpalmPoseU3E5__1_3;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<jointedHand>5__2
	RuntimeObject* ___U3CjointedHandU3E5__2_4;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::<palmCameraAngle>5__3
	float ___U3CpalmCameraAngleU3E5__3_5;

public:
	inline static int32_t get_offset_of_U3CU3E1__state_0() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CU3E1__state_0)); }
	inline int32_t get_U3CU3E1__state_0() const { return ___U3CU3E1__state_0; }
	inline int32_t* get_address_of_U3CU3E1__state_0() { return &___U3CU3E1__state_0; }
	inline void set_U3CU3E1__state_0(int32_t value)
	{
		___U3CU3E1__state_0 = value;
	}

	inline static int32_t get_offset_of_U3CU3E2__current_1() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CU3E2__current_1)); }
	inline RuntimeObject * get_U3CU3E2__current_1() const { return ___U3CU3E2__current_1; }
	inline RuntimeObject ** get_address_of_U3CU3E2__current_1() { return &___U3CU3E2__current_1; }
	inline void set_U3CU3E2__current_1(RuntimeObject * value)
	{
		___U3CU3E2__current_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CU3E2__current_1), (void*)value);
	}

	inline static int32_t get_offset_of_U3CU3E4__this_2() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CU3E4__this_2)); }
	inline HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * get_U3CU3E4__this_2() const { return ___U3CU3E4__this_2; }
	inline HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 ** get_address_of_U3CU3E4__this_2() { return &___U3CU3E4__this_2; }
	inline void set_U3CU3E4__this_2(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * value)
	{
		___U3CU3E4__this_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CU3E4__this_2), (void*)value);
	}

	inline static int32_t get_offset_of_U3CpalmPoseU3E5__1_3() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CpalmPoseU3E5__1_3)); }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  get_U3CpalmPoseU3E5__1_3() const { return ___U3CpalmPoseU3E5__1_3; }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * get_address_of_U3CpalmPoseU3E5__1_3() { return &___U3CpalmPoseU3E5__1_3; }
	inline void set_U3CpalmPoseU3E5__1_3(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  value)
	{
		___U3CpalmPoseU3E5__1_3 = value;
	}

	inline static int32_t get_offset_of_U3CjointedHandU3E5__2_4() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CjointedHandU3E5__2_4)); }
	inline RuntimeObject* get_U3CjointedHandU3E5__2_4() const { return ___U3CjointedHandU3E5__2_4; }
	inline RuntimeObject** get_address_of_U3CjointedHandU3E5__2_4() { return &___U3CjointedHandU3E5__2_4; }
	inline void set_U3CjointedHandU3E5__2_4(RuntimeObject* value)
	{
		___U3CjointedHandU3E5__2_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CjointedHandU3E5__2_4), (void*)value);
	}

	inline static int32_t get_offset_of_U3CpalmCameraAngleU3E5__3_5() { return static_cast<int32_t>(offsetof(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0, ___U3CpalmCameraAngleU3E5__3_5)); }
	inline float get_U3CpalmCameraAngleU3E5__3_5() const { return ___U3CpalmCameraAngleU3E5__3_5; }
	inline float* get_address_of_U3CpalmCameraAngleU3E5__3_5() { return &___U3CpalmCameraAngleU3E5__3_5; }
	inline void set_U3CpalmCameraAngleU3E5__3_5(float value)
	{
		___U3CpalmCameraAngleU3E5__3_5 = value;
	}
};


// System.MulticastDelegate
struct MulticastDelegate_t  : public Delegate_t
{
public:
	// System.Delegate[] System.MulticastDelegate::delegates
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* ___delegates_11;

public:
	inline static int32_t get_offset_of_delegates_11() { return static_cast<int32_t>(offsetof(MulticastDelegate_t, ___delegates_11)); }
	inline DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* get_delegates_11() const { return ___delegates_11; }
	inline DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86** get_address_of_delegates_11() { return &___delegates_11; }
	inline void set_delegates_11(DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* value)
	{
		___delegates_11 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___delegates_11), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of System.MulticastDelegate
struct MulticastDelegate_t_marshaled_pinvoke : public Delegate_t_marshaled_pinvoke
{
	Delegate_t_marshaled_pinvoke** ___delegates_11;
};
// Native definition for COM marshalling of System.MulticastDelegate
struct MulticastDelegate_t_marshaled_com : public Delegate_t_marshaled_com
{
	Delegate_t_marshaled_com** ___delegates_11;
};

// System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.Handedness>
struct Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 
{
public:
	// T System.Nullable`1::value
	uint8_t ___value_0;
	// System.Boolean System.Nullable`1::has_value
	bool ___has_value_1;

public:
	inline static int32_t get_offset_of_value_0() { return static_cast<int32_t>(offsetof(Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231, ___value_0)); }
	inline uint8_t get_value_0() const { return ___value_0; }
	inline uint8_t* get_address_of_value_0() { return &___value_0; }
	inline void set_value_0(uint8_t value)
	{
		___value_0 = value;
	}

	inline static int32_t get_offset_of_has_value_1() { return static_cast<int32_t>(offsetof(Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231, ___has_value_1)); }
	inline bool get_has_value_1() const { return ___has_value_1; }
	inline bool* get_address_of_has_value_1() { return &___has_value_1; }
	inline void set_has_value_1(bool value)
	{
		___has_value_1 = value;
	}
};


// System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>
struct Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F 
{
public:
	// T System.Nullable`1::value
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___value_0;
	// System.Boolean System.Nullable`1::has_value
	bool ___has_value_1;

public:
	inline static int32_t get_offset_of_value_0() { return static_cast<int32_t>(offsetof(Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F, ___value_0)); }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  get_value_0() const { return ___value_0; }
	inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * get_address_of_value_0() { return &___value_0; }
	inline void set_value_0(MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  value)
	{
		___value_0 = value;
	}

	inline static int32_t get_offset_of_has_value_1() { return static_cast<int32_t>(offsetof(Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F, ___has_value_1)); }
	inline bool get_has_value_1() const { return ___has_value_1; }
	inline bool* get_address_of_has_value_1() { return &___has_value_1; }
	inline void set_has_value_1(bool value)
	{
		___has_value_1 = value;
	}
};


// System.Nullable`1<System.ByteEnum>
struct Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 
{
public:
	// T System.Nullable`1::value
	uint8_t ___value_0;
	// System.Boolean System.Nullable`1::has_value
	bool ___has_value_1;

public:
	inline static int32_t get_offset_of_value_0() { return static_cast<int32_t>(offsetof(Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152, ___value_0)); }
	inline uint8_t get_value_0() const { return ___value_0; }
	inline uint8_t* get_address_of_value_0() { return &___value_0; }
	inline void set_value_0(uint8_t value)
	{
		___value_0 = value;
	}

	inline static int32_t get_offset_of_has_value_1() { return static_cast<int32_t>(offsetof(Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152, ___has_value_1)); }
	inline bool get_has_value_1() const { return ___has_value_1; }
	inline bool* get_address_of_has_value_1() { return &___has_value_1; }
	inline void set_has_value_1(bool value)
	{
		___has_value_1 = value;
	}
};


// System.SystemException
struct SystemException_t5380468142AA850BE4A341D7AF3EAB9C78746782  : public Exception_t
{
public:

public:
};


// UnityEngine.Component
struct Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621  : public Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0
{
public:

public:
};


// UnityEngine.GameObject
struct GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F  : public Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0
{
public:

public:
};


// UnityEngine.Mesh
struct Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C  : public Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0
{
public:

public:
};


// Microsoft.MixedReality.Toolkit.Input.BaseInputEventData
struct BaseInputEventData_tAF6552FE95917E1D365301264A6A2135813628FE  : public BaseEventData_t46C9D2AE3183A742EDE89944AF64A23DBF1B80A5
{
public:
	// System.DateTime Microsoft.MixedReality.Toolkit.Input.BaseInputEventData::<EventTime>k__BackingField
	DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  ___U3CEventTimeU3Ek__BackingField_2;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource Microsoft.MixedReality.Toolkit.Input.BaseInputEventData::<InputSource>k__BackingField
	RuntimeObject* ___U3CInputSourceU3Ek__BackingField_3;
	// Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction Microsoft.MixedReality.Toolkit.Input.BaseInputEventData::<MixedRealityInputAction>k__BackingField
	MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  ___U3CMixedRealityInputActionU3Ek__BackingField_4;

public:
	inline static int32_t get_offset_of_U3CEventTimeU3Ek__BackingField_2() { return static_cast<int32_t>(offsetof(BaseInputEventData_tAF6552FE95917E1D365301264A6A2135813628FE, ___U3CEventTimeU3Ek__BackingField_2)); }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  get_U3CEventTimeU3Ek__BackingField_2() const { return ___U3CEventTimeU3Ek__BackingField_2; }
	inline DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132 * get_address_of_U3CEventTimeU3Ek__BackingField_2() { return &___U3CEventTimeU3Ek__BackingField_2; }
	inline void set_U3CEventTimeU3Ek__BackingField_2(DateTime_t349B7449FBAAFF4192636E2B7A07694DA9236132  value)
	{
		___U3CEventTimeU3Ek__BackingField_2 = value;
	}

	inline static int32_t get_offset_of_U3CInputSourceU3Ek__BackingField_3() { return static_cast<int32_t>(offsetof(BaseInputEventData_tAF6552FE95917E1D365301264A6A2135813628FE, ___U3CInputSourceU3Ek__BackingField_3)); }
	inline RuntimeObject* get_U3CInputSourceU3Ek__BackingField_3() const { return ___U3CInputSourceU3Ek__BackingField_3; }
	inline RuntimeObject** get_address_of_U3CInputSourceU3Ek__BackingField_3() { return &___U3CInputSourceU3Ek__BackingField_3; }
	inline void set_U3CInputSourceU3Ek__BackingField_3(RuntimeObject* value)
	{
		___U3CInputSourceU3Ek__BackingField_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CInputSourceU3Ek__BackingField_3), (void*)value);
	}

	inline static int32_t get_offset_of_U3CMixedRealityInputActionU3Ek__BackingField_4() { return static_cast<int32_t>(offsetof(BaseInputEventData_tAF6552FE95917E1D365301264A6A2135813628FE, ___U3CMixedRealityInputActionU3Ek__BackingField_4)); }
	inline MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  get_U3CMixedRealityInputActionU3Ek__BackingField_4() const { return ___U3CMixedRealityInputActionU3Ek__BackingField_4; }
	inline MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073 * get_address_of_U3CMixedRealityInputActionU3Ek__BackingField_4() { return &___U3CMixedRealityInputActionU3Ek__BackingField_4; }
	inline void set_U3CMixedRealityInputActionU3Ek__BackingField_4(MixedRealityInputAction_tF3298AB582C6E52C2107F4AC4E6E4381EA0A5073  value)
	{
		___U3CMixedRealityInputActionU3Ek__BackingField_4 = value;
		Il2CppCodeGenWriteBarrier((void**)&(((&___U3CMixedRealityInputActionU3Ek__BackingField_4))->___description_2), (void*)NULL);
	}
};


// System.Comparison`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>
struct Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4  : public MulticastDelegate_t
{
public:

public:
};


// System.NotSupportedException
struct NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010  : public SystemException_t5380468142AA850BE4A341D7AF3EAB9C78746782
{
public:

public:
};


// UnityEngine.Behaviour
struct Behaviour_tBDC7E9C3C898AD8348891B82D3E345801D920CA8  : public Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621
{
public:

public:
};


// UnityEngine.Collider
struct Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF  : public Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621
{
public:

public:
};


// UnityEngine.Renderer
struct Renderer_t0556D67DD582620D1F495627EDE30D03284151F4  : public Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621
{
public:

public:
};


// UnityEngine.Transform
struct Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA  : public Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621
{
public:

public:
};


// Microsoft.MixedReality.Toolkit.Input.SourceStateEventData
struct SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8  : public BaseInputEventData_tAF6552FE95917E1D365301264A6A2135813628FE
{
public:
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Input.SourceStateEventData::<Controller>k__BackingField
	RuntimeObject* ___U3CControllerU3Ek__BackingField_5;

public:
	inline static int32_t get_offset_of_U3CControllerU3Ek__BackingField_5() { return static_cast<int32_t>(offsetof(SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8, ___U3CControllerU3Ek__BackingField_5)); }
	inline RuntimeObject* get_U3CControllerU3Ek__BackingField_5() const { return ___U3CControllerU3Ek__BackingField_5; }
	inline RuntimeObject** get_address_of_U3CControllerU3Ek__BackingField_5() { return &___U3CControllerU3Ek__BackingField_5; }
	inline void set_U3CControllerU3Ek__BackingField_5(RuntimeObject* value)
	{
		___U3CControllerU3Ek__BackingField_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CControllerU3Ek__BackingField_5), (void*)value);
	}
};


// UnityEngine.Camera
struct Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34  : public Behaviour_tBDC7E9C3C898AD8348891B82D3E345801D920CA8
{
public:

public:
};

struct Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34_StaticFields
{
public:
	// UnityEngine.Camera/CameraCallback UnityEngine.Camera::onPreCull
	CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * ___onPreCull_4;
	// UnityEngine.Camera/CameraCallback UnityEngine.Camera::onPreRender
	CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * ___onPreRender_5;
	// UnityEngine.Camera/CameraCallback UnityEngine.Camera::onPostRender
	CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * ___onPostRender_6;

public:
	inline static int32_t get_offset_of_onPreCull_4() { return static_cast<int32_t>(offsetof(Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34_StaticFields, ___onPreCull_4)); }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * get_onPreCull_4() const { return ___onPreCull_4; }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 ** get_address_of_onPreCull_4() { return &___onPreCull_4; }
	inline void set_onPreCull_4(CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * value)
	{
		___onPreCull_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onPreCull_4), (void*)value);
	}

	inline static int32_t get_offset_of_onPreRender_5() { return static_cast<int32_t>(offsetof(Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34_StaticFields, ___onPreRender_5)); }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * get_onPreRender_5() const { return ___onPreRender_5; }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 ** get_address_of_onPreRender_5() { return &___onPreRender_5; }
	inline void set_onPreRender_5(CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * value)
	{
		___onPreRender_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onPreRender_5), (void*)value);
	}

	inline static int32_t get_offset_of_onPostRender_6() { return static_cast<int32_t>(offsetof(Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34_StaticFields, ___onPostRender_6)); }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * get_onPostRender_6() const { return ___onPostRender_6; }
	inline CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 ** get_address_of_onPostRender_6() { return &___onPostRender_6; }
	inline void set_onPostRender_6(CameraCallback_t8BBB42AA08D7498DFC11F4128117055BC7F0B9D0 * value)
	{
		___onPostRender_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onPostRender_6), (void*)value);
	}
};


// UnityEngine.MonoBehaviour
struct MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429  : public Behaviour_tBDC7E9C3C898AD8348891B82D3E345801D920CA8
{
public:

public:
};


// UnityEngine.RectTransform
struct RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20  : public Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA
{
public:

public:
};

struct RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_StaticFields
{
public:
	// UnityEngine.RectTransform/ReapplyDrivenProperties UnityEngine.RectTransform::reapplyDrivenProperties
	ReapplyDrivenProperties_t431F4FBD9C59AE097FE33C4354CC6251B01B527D * ___reapplyDrivenProperties_4;

public:
	inline static int32_t get_offset_of_reapplyDrivenProperties_4() { return static_cast<int32_t>(offsetof(RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_StaticFields, ___reapplyDrivenProperties_4)); }
	inline ReapplyDrivenProperties_t431F4FBD9C59AE097FE33C4354CC6251B01B527D * get_reapplyDrivenProperties_4() const { return ___reapplyDrivenProperties_4; }
	inline ReapplyDrivenProperties_t431F4FBD9C59AE097FE33C4354CC6251B01B527D ** get_address_of_reapplyDrivenProperties_4() { return &___reapplyDrivenProperties_4; }
	inline void set_reapplyDrivenProperties_4(ReapplyDrivenProperties_t431F4FBD9C59AE097FE33C4354CC6251B01B527D * value)
	{
		___reapplyDrivenProperties_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___reapplyDrivenProperties_4), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Input.HandBounds
struct HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds> Microsoft.MixedReality.Toolkit.Input.HandBounds::<Bounds>k__BackingField
	Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * ___U3CBoundsU3Ek__BackingField_4;
	// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds> Microsoft.MixedReality.Toolkit.Input.HandBounds::<LocalBounds>k__BackingField
	Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * ___U3CLocalBoundsU3Ek__BackingField_5;
	// System.Boolean Microsoft.MixedReality.Toolkit.Input.HandBounds::drawBoundsGizmo
	bool ___drawBoundsGizmo_6;
	// System.Boolean Microsoft.MixedReality.Toolkit.Input.HandBounds::drawLocalBoundsGizmo
	bool ___drawLocalBoundsGizmo_7;
	// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Matrix4x4> Microsoft.MixedReality.Toolkit.Input.HandBounds::BoundsTransforms
	Dictionary_2_t6D450793C27BD2AB4FD2C371EE20ED59D572B3D3 * ___BoundsTransforms_8;

public:
	inline static int32_t get_offset_of_U3CBoundsU3Ek__BackingField_4() { return static_cast<int32_t>(offsetof(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E, ___U3CBoundsU3Ek__BackingField_4)); }
	inline Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * get_U3CBoundsU3Ek__BackingField_4() const { return ___U3CBoundsU3Ek__BackingField_4; }
	inline Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 ** get_address_of_U3CBoundsU3Ek__BackingField_4() { return &___U3CBoundsU3Ek__BackingField_4; }
	inline void set_U3CBoundsU3Ek__BackingField_4(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * value)
	{
		___U3CBoundsU3Ek__BackingField_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CBoundsU3Ek__BackingField_4), (void*)value);
	}

	inline static int32_t get_offset_of_U3CLocalBoundsU3Ek__BackingField_5() { return static_cast<int32_t>(offsetof(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E, ___U3CLocalBoundsU3Ek__BackingField_5)); }
	inline Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * get_U3CLocalBoundsU3Ek__BackingField_5() const { return ___U3CLocalBoundsU3Ek__BackingField_5; }
	inline Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 ** get_address_of_U3CLocalBoundsU3Ek__BackingField_5() { return &___U3CLocalBoundsU3Ek__BackingField_5; }
	inline void set_U3CLocalBoundsU3Ek__BackingField_5(Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * value)
	{
		___U3CLocalBoundsU3Ek__BackingField_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CLocalBoundsU3Ek__BackingField_5), (void*)value);
	}

	inline static int32_t get_offset_of_drawBoundsGizmo_6() { return static_cast<int32_t>(offsetof(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E, ___drawBoundsGizmo_6)); }
	inline bool get_drawBoundsGizmo_6() const { return ___drawBoundsGizmo_6; }
	inline bool* get_address_of_drawBoundsGizmo_6() { return &___drawBoundsGizmo_6; }
	inline void set_drawBoundsGizmo_6(bool value)
	{
		___drawBoundsGizmo_6 = value;
	}

	inline static int32_t get_offset_of_drawLocalBoundsGizmo_7() { return static_cast<int32_t>(offsetof(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E, ___drawLocalBoundsGizmo_7)); }
	inline bool get_drawLocalBoundsGizmo_7() const { return ___drawLocalBoundsGizmo_7; }
	inline bool* get_address_of_drawLocalBoundsGizmo_7() { return &___drawLocalBoundsGizmo_7; }
	inline void set_drawLocalBoundsGizmo_7(bool value)
	{
		___drawLocalBoundsGizmo_7 = value;
	}

	inline static int32_t get_offset_of_BoundsTransforms_8() { return static_cast<int32_t>(offsetof(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E, ___BoundsTransforms_8)); }
	inline Dictionary_2_t6D450793C27BD2AB4FD2C371EE20ED59D572B3D3 * get_BoundsTransforms_8() const { return ___BoundsTransforms_8; }
	inline Dictionary_2_t6D450793C27BD2AB4FD2C371EE20ED59D572B3D3 ** get_address_of_BoundsTransforms_8() { return &___BoundsTransforms_8; }
	inline void set_BoundsTransforms_8(Dictionary_2_t6D450793C27BD2AB4FD2C371EE20ED59D572B3D3 * value)
	{
		___BoundsTransforms_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___BoundsTransforms_8), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection
struct BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// System.Action`1<Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection> Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::<OnCollectionUpdated>k__BackingField
	Action_1_tA52C815DBCC271D58DD715D9119E8FADD0789DB4 * ___U3COnCollectionUpdatedU3Ek__BackingField_4;
	// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode> Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::nodeList
	List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * ___nodeList_5;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::ignoreInactiveTransforms
	bool ___ignoreInactiveTransforms_6;
	// Microsoft.MixedReality.Toolkit.Utilities.CollationOrder Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::sortType
	int32_t ___sortType_7;

public:
	inline static int32_t get_offset_of_U3COnCollectionUpdatedU3Ek__BackingField_4() { return static_cast<int32_t>(offsetof(BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873, ___U3COnCollectionUpdatedU3Ek__BackingField_4)); }
	inline Action_1_tA52C815DBCC271D58DD715D9119E8FADD0789DB4 * get_U3COnCollectionUpdatedU3Ek__BackingField_4() const { return ___U3COnCollectionUpdatedU3Ek__BackingField_4; }
	inline Action_1_tA52C815DBCC271D58DD715D9119E8FADD0789DB4 ** get_address_of_U3COnCollectionUpdatedU3Ek__BackingField_4() { return &___U3COnCollectionUpdatedU3Ek__BackingField_4; }
	inline void set_U3COnCollectionUpdatedU3Ek__BackingField_4(Action_1_tA52C815DBCC271D58DD715D9119E8FADD0789DB4 * value)
	{
		___U3COnCollectionUpdatedU3Ek__BackingField_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3COnCollectionUpdatedU3Ek__BackingField_4), (void*)value);
	}

	inline static int32_t get_offset_of_nodeList_5() { return static_cast<int32_t>(offsetof(BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873, ___nodeList_5)); }
	inline List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * get_nodeList_5() const { return ___nodeList_5; }
	inline List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE ** get_address_of_nodeList_5() { return &___nodeList_5; }
	inline void set_nodeList_5(List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * value)
	{
		___nodeList_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___nodeList_5), (void*)value);
	}

	inline static int32_t get_offset_of_ignoreInactiveTransforms_6() { return static_cast<int32_t>(offsetof(BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873, ___ignoreInactiveTransforms_6)); }
	inline bool get_ignoreInactiveTransforms_6() const { return ___ignoreInactiveTransforms_6; }
	inline bool* get_address_of_ignoreInactiveTransforms_6() { return &___ignoreInactiveTransforms_6; }
	inline void set_ignoreInactiveTransforms_6(bool value)
	{
		___ignoreInactiveTransforms_6 = value;
	}

	inline static int32_t get_offset_of_sortType_7() { return static_cast<int32_t>(offsetof(BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873, ___sortType_7)); }
	inline int32_t get_sortType_7() const { return ___sortType_7; }
	inline int32_t* get_address_of_sortType_7() { return &___sortType_7; }
	inline void set_sortType_7(int32_t value)
	{
		___sortType_7 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset
struct HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset::HeadOffset
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___HeadOffset_4;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset::started
	bool ___started_5;

public:
	inline static int32_t get_offset_of_HeadOffset_4() { return static_cast<int32_t>(offsetof(HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3, ___HeadOffset_4)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_HeadOffset_4() const { return ___HeadOffset_4; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_HeadOffset_4() { return &___HeadOffset_4; }
	inline void set_HeadOffset_4(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___HeadOffset_4 = value;
	}

	inline static int32_t get_offset_of_started_5() { return static_cast<int32_t>(offsetof(HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3, ___started_5)); }
	inline bool get_started_5() const { return ___started_5; }
	inline bool* get_address_of_started_5() { return &___started_5; }
	inline void set_started_5(bool value)
	{
		___started_5 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler
struct RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// UnityEngine.RectTransform Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::rectTransform
	RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * ___rectTransform_4;
	// UnityEngine.Vector2 Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::prevRectSize
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___prevRectSize_5;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::objectToScale
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___objectToScale_6;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::prevObjectToScale
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___prevObjectToScale_7;

public:
	inline static int32_t get_offset_of_rectTransform_4() { return static_cast<int32_t>(offsetof(RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0, ___rectTransform_4)); }
	inline RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * get_rectTransform_4() const { return ___rectTransform_4; }
	inline RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 ** get_address_of_rectTransform_4() { return &___rectTransform_4; }
	inline void set_rectTransform_4(RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * value)
	{
		___rectTransform_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___rectTransform_4), (void*)value);
	}

	inline static int32_t get_offset_of_prevRectSize_5() { return static_cast<int32_t>(offsetof(RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0, ___prevRectSize_5)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_prevRectSize_5() const { return ___prevRectSize_5; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_prevRectSize_5() { return &___prevRectSize_5; }
	inline void set_prevRectSize_5(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___prevRectSize_5 = value;
	}

	inline static int32_t get_offset_of_objectToScale_6() { return static_cast<int32_t>(offsetof(RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0, ___objectToScale_6)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_objectToScale_6() const { return ___objectToScale_6; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_objectToScale_6() { return &___objectToScale_6; }
	inline void set_objectToScale_6(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___objectToScale_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___objectToScale_6), (void*)value);
	}

	inline static int32_t get_offset_of_prevObjectToScale_7() { return static_cast<int32_t>(offsetof(RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0, ___prevObjectToScale_7)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_prevObjectToScale_7() const { return ___prevObjectToScale_7; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_prevObjectToScale_7() { return &___prevObjectToScale_7; }
	inline void set_prevObjectToScale_7(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___prevObjectToScale_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___prevObjectToScale_7), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder
struct ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::handedness
	uint8_t ___handedness_4;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::ControllerTransform
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___ControllerTransform_5;

public:
	inline static int32_t get_offset_of_handedness_4() { return static_cast<int32_t>(offsetof(ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F, ___handedness_4)); }
	inline uint8_t get_handedness_4() const { return ___handedness_4; }
	inline uint8_t* get_address_of_handedness_4() { return &___handedness_4; }
	inline void set_handedness_4(uint8_t value)
	{
		___handedness_4 = value;
	}

	inline static int32_t get_offset_of_ControllerTransform_5() { return static_cast<int32_t>(offsetof(ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F, ___ControllerTransform_5)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_ControllerTransform_5() const { return ___ControllerTransform_5; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_ControllerTransform_5() { return &___ControllerTransform_5; }
	inline void set_ControllerTransform_5(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___ControllerTransform_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___ControllerTransform_5), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver
struct Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::updateLinkedTransform
	bool ___updateLinkedTransform_4;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::moveLerpTime
	float ___moveLerpTime_5;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::rotateLerpTime
	float ___rotateLerpTime_6;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::scaleLerpTime
	float ___scaleLerpTime_7;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::maintainScaleOnInitialization
	bool ___maintainScaleOnInitialization_8;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::smoothing
	bool ___smoothing_9;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::lifetime
	float ___lifetime_10;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::currentLifetime
	float ___currentLifetime_11;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::SolverHandler
	SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * ___SolverHandler_12;

public:
	inline static int32_t get_offset_of_updateLinkedTransform_4() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___updateLinkedTransform_4)); }
	inline bool get_updateLinkedTransform_4() const { return ___updateLinkedTransform_4; }
	inline bool* get_address_of_updateLinkedTransform_4() { return &___updateLinkedTransform_4; }
	inline void set_updateLinkedTransform_4(bool value)
	{
		___updateLinkedTransform_4 = value;
	}

	inline static int32_t get_offset_of_moveLerpTime_5() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___moveLerpTime_5)); }
	inline float get_moveLerpTime_5() const { return ___moveLerpTime_5; }
	inline float* get_address_of_moveLerpTime_5() { return &___moveLerpTime_5; }
	inline void set_moveLerpTime_5(float value)
	{
		___moveLerpTime_5 = value;
	}

	inline static int32_t get_offset_of_rotateLerpTime_6() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___rotateLerpTime_6)); }
	inline float get_rotateLerpTime_6() const { return ___rotateLerpTime_6; }
	inline float* get_address_of_rotateLerpTime_6() { return &___rotateLerpTime_6; }
	inline void set_rotateLerpTime_6(float value)
	{
		___rotateLerpTime_6 = value;
	}

	inline static int32_t get_offset_of_scaleLerpTime_7() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___scaleLerpTime_7)); }
	inline float get_scaleLerpTime_7() const { return ___scaleLerpTime_7; }
	inline float* get_address_of_scaleLerpTime_7() { return &___scaleLerpTime_7; }
	inline void set_scaleLerpTime_7(float value)
	{
		___scaleLerpTime_7 = value;
	}

	inline static int32_t get_offset_of_maintainScaleOnInitialization_8() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___maintainScaleOnInitialization_8)); }
	inline bool get_maintainScaleOnInitialization_8() const { return ___maintainScaleOnInitialization_8; }
	inline bool* get_address_of_maintainScaleOnInitialization_8() { return &___maintainScaleOnInitialization_8; }
	inline void set_maintainScaleOnInitialization_8(bool value)
	{
		___maintainScaleOnInitialization_8 = value;
	}

	inline static int32_t get_offset_of_smoothing_9() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___smoothing_9)); }
	inline bool get_smoothing_9() const { return ___smoothing_9; }
	inline bool* get_address_of_smoothing_9() { return &___smoothing_9; }
	inline void set_smoothing_9(bool value)
	{
		___smoothing_9 = value;
	}

	inline static int32_t get_offset_of_lifetime_10() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___lifetime_10)); }
	inline float get_lifetime_10() const { return ___lifetime_10; }
	inline float* get_address_of_lifetime_10() { return &___lifetime_10; }
	inline void set_lifetime_10(float value)
	{
		___lifetime_10 = value;
	}

	inline static int32_t get_offset_of_currentLifetime_11() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___currentLifetime_11)); }
	inline float get_currentLifetime_11() const { return ___currentLifetime_11; }
	inline float* get_address_of_currentLifetime_11() { return &___currentLifetime_11; }
	inline void set_currentLifetime_11(float value)
	{
		___currentLifetime_11 = value;
	}

	inline static int32_t get_offset_of_SolverHandler_12() { return static_cast<int32_t>(offsetof(Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011, ___SolverHandler_12)); }
	inline SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * get_SolverHandler_12() const { return ___SolverHandler_12; }
	inline SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE ** get_address_of_SolverHandler_12() { return &___SolverHandler_12; }
	inline void set_SolverHandler_12(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * value)
	{
		___SolverHandler_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___SolverHandler_12), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler
struct SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE  : public MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::trackedTargetType
	int32_t ___trackedTargetType_4;
	// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::trackedHandedness
	uint8_t ___trackedHandedness_5;
	// Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::trackedHandJoint
	int32_t ___trackedHandJoint_6;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::transformOverride
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___transformOverride_7;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::additionalOffset
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___additionalOffset_8;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::additionalRotation
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___additionalRotation_9;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::updateSolvers
	bool ___updateSolvers_10;
	// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver> Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::solvers
	List_1_t03B34F7709599434AEB744E8135E739798FC6B4F * ___solvers_11;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::updateSolversList
	bool ___updateSolversList_12;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::<GoalPosition>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CGoalPositionU3Ek__BackingField_13;
	// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::<GoalRotation>k__BackingField
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___U3CGoalRotationU3Ek__BackingField_14;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::<GoalScale>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CGoalScaleU3Ek__BackingField_15;
	// Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::<AltScale>k__BackingField
	Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  ___U3CAltScaleU3Ek__BackingField_16;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::<DeltaTime>k__BackingField
	float ___U3CDeltaTimeU3Ek__BackingField_17;
	// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::currentTrackedHandedness
	uint8_t ___currentTrackedHandedness_18;
	// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::preferredTrackedHandedness
	uint8_t ___preferredTrackedHandedness_19;
	// UnityEngine.GameObject Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::trackingTarget
	GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___trackingTarget_20;
	// Microsoft.MixedReality.Toolkit.Input.LinePointer Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::controllerRay
	LinePointer_t5101B76E2EFDEFB6FA643831C5C549615BBE2665 * ___controllerRay_21;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::lastUpdateTime
	float ___lastUpdateTime_22;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointService Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::handJointService
	RuntimeObject* ___handJointService_23;

public:
	inline static int32_t get_offset_of_trackedTargetType_4() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___trackedTargetType_4)); }
	inline int32_t get_trackedTargetType_4() const { return ___trackedTargetType_4; }
	inline int32_t* get_address_of_trackedTargetType_4() { return &___trackedTargetType_4; }
	inline void set_trackedTargetType_4(int32_t value)
	{
		___trackedTargetType_4 = value;
	}

	inline static int32_t get_offset_of_trackedHandedness_5() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___trackedHandedness_5)); }
	inline uint8_t get_trackedHandedness_5() const { return ___trackedHandedness_5; }
	inline uint8_t* get_address_of_trackedHandedness_5() { return &___trackedHandedness_5; }
	inline void set_trackedHandedness_5(uint8_t value)
	{
		___trackedHandedness_5 = value;
	}

	inline static int32_t get_offset_of_trackedHandJoint_6() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___trackedHandJoint_6)); }
	inline int32_t get_trackedHandJoint_6() const { return ___trackedHandJoint_6; }
	inline int32_t* get_address_of_trackedHandJoint_6() { return &___trackedHandJoint_6; }
	inline void set_trackedHandJoint_6(int32_t value)
	{
		___trackedHandJoint_6 = value;
	}

	inline static int32_t get_offset_of_transformOverride_7() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___transformOverride_7)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_transformOverride_7() const { return ___transformOverride_7; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_transformOverride_7() { return &___transformOverride_7; }
	inline void set_transformOverride_7(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___transformOverride_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___transformOverride_7), (void*)value);
	}

	inline static int32_t get_offset_of_additionalOffset_8() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___additionalOffset_8)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_additionalOffset_8() const { return ___additionalOffset_8; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_additionalOffset_8() { return &___additionalOffset_8; }
	inline void set_additionalOffset_8(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___additionalOffset_8 = value;
	}

	inline static int32_t get_offset_of_additionalRotation_9() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___additionalRotation_9)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_additionalRotation_9() const { return ___additionalRotation_9; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_additionalRotation_9() { return &___additionalRotation_9; }
	inline void set_additionalRotation_9(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___additionalRotation_9 = value;
	}

	inline static int32_t get_offset_of_updateSolvers_10() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___updateSolvers_10)); }
	inline bool get_updateSolvers_10() const { return ___updateSolvers_10; }
	inline bool* get_address_of_updateSolvers_10() { return &___updateSolvers_10; }
	inline void set_updateSolvers_10(bool value)
	{
		___updateSolvers_10 = value;
	}

	inline static int32_t get_offset_of_solvers_11() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___solvers_11)); }
	inline List_1_t03B34F7709599434AEB744E8135E739798FC6B4F * get_solvers_11() const { return ___solvers_11; }
	inline List_1_t03B34F7709599434AEB744E8135E739798FC6B4F ** get_address_of_solvers_11() { return &___solvers_11; }
	inline void set_solvers_11(List_1_t03B34F7709599434AEB744E8135E739798FC6B4F * value)
	{
		___solvers_11 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___solvers_11), (void*)value);
	}

	inline static int32_t get_offset_of_updateSolversList_12() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___updateSolversList_12)); }
	inline bool get_updateSolversList_12() const { return ___updateSolversList_12; }
	inline bool* get_address_of_updateSolversList_12() { return &___updateSolversList_12; }
	inline void set_updateSolversList_12(bool value)
	{
		___updateSolversList_12 = value;
	}

	inline static int32_t get_offset_of_U3CGoalPositionU3Ek__BackingField_13() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___U3CGoalPositionU3Ek__BackingField_13)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CGoalPositionU3Ek__BackingField_13() const { return ___U3CGoalPositionU3Ek__BackingField_13; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CGoalPositionU3Ek__BackingField_13() { return &___U3CGoalPositionU3Ek__BackingField_13; }
	inline void set_U3CGoalPositionU3Ek__BackingField_13(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CGoalPositionU3Ek__BackingField_13 = value;
	}

	inline static int32_t get_offset_of_U3CGoalRotationU3Ek__BackingField_14() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___U3CGoalRotationU3Ek__BackingField_14)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_U3CGoalRotationU3Ek__BackingField_14() const { return ___U3CGoalRotationU3Ek__BackingField_14; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_U3CGoalRotationU3Ek__BackingField_14() { return &___U3CGoalRotationU3Ek__BackingField_14; }
	inline void set_U3CGoalRotationU3Ek__BackingField_14(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___U3CGoalRotationU3Ek__BackingField_14 = value;
	}

	inline static int32_t get_offset_of_U3CGoalScaleU3Ek__BackingField_15() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___U3CGoalScaleU3Ek__BackingField_15)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CGoalScaleU3Ek__BackingField_15() const { return ___U3CGoalScaleU3Ek__BackingField_15; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CGoalScaleU3Ek__BackingField_15() { return &___U3CGoalScaleU3Ek__BackingField_15; }
	inline void set_U3CGoalScaleU3Ek__BackingField_15(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CGoalScaleU3Ek__BackingField_15 = value;
	}

	inline static int32_t get_offset_of_U3CAltScaleU3Ek__BackingField_16() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___U3CAltScaleU3Ek__BackingField_16)); }
	inline Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  get_U3CAltScaleU3Ek__BackingField_16() const { return ___U3CAltScaleU3Ek__BackingField_16; }
	inline Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6 * get_address_of_U3CAltScaleU3Ek__BackingField_16() { return &___U3CAltScaleU3Ek__BackingField_16; }
	inline void set_U3CAltScaleU3Ek__BackingField_16(Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  value)
	{
		___U3CAltScaleU3Ek__BackingField_16 = value;
	}

	inline static int32_t get_offset_of_U3CDeltaTimeU3Ek__BackingField_17() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___U3CDeltaTimeU3Ek__BackingField_17)); }
	inline float get_U3CDeltaTimeU3Ek__BackingField_17() const { return ___U3CDeltaTimeU3Ek__BackingField_17; }
	inline float* get_address_of_U3CDeltaTimeU3Ek__BackingField_17() { return &___U3CDeltaTimeU3Ek__BackingField_17; }
	inline void set_U3CDeltaTimeU3Ek__BackingField_17(float value)
	{
		___U3CDeltaTimeU3Ek__BackingField_17 = value;
	}

	inline static int32_t get_offset_of_currentTrackedHandedness_18() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___currentTrackedHandedness_18)); }
	inline uint8_t get_currentTrackedHandedness_18() const { return ___currentTrackedHandedness_18; }
	inline uint8_t* get_address_of_currentTrackedHandedness_18() { return &___currentTrackedHandedness_18; }
	inline void set_currentTrackedHandedness_18(uint8_t value)
	{
		___currentTrackedHandedness_18 = value;
	}

	inline static int32_t get_offset_of_preferredTrackedHandedness_19() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___preferredTrackedHandedness_19)); }
	inline uint8_t get_preferredTrackedHandedness_19() const { return ___preferredTrackedHandedness_19; }
	inline uint8_t* get_address_of_preferredTrackedHandedness_19() { return &___preferredTrackedHandedness_19; }
	inline void set_preferredTrackedHandedness_19(uint8_t value)
	{
		___preferredTrackedHandedness_19 = value;
	}

	inline static int32_t get_offset_of_trackingTarget_20() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___trackingTarget_20)); }
	inline GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * get_trackingTarget_20() const { return ___trackingTarget_20; }
	inline GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F ** get_address_of_trackingTarget_20() { return &___trackingTarget_20; }
	inline void set_trackingTarget_20(GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * value)
	{
		___trackingTarget_20 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___trackingTarget_20), (void*)value);
	}

	inline static int32_t get_offset_of_controllerRay_21() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___controllerRay_21)); }
	inline LinePointer_t5101B76E2EFDEFB6FA643831C5C549615BBE2665 * get_controllerRay_21() const { return ___controllerRay_21; }
	inline LinePointer_t5101B76E2EFDEFB6FA643831C5C549615BBE2665 ** get_address_of_controllerRay_21() { return &___controllerRay_21; }
	inline void set_controllerRay_21(LinePointer_t5101B76E2EFDEFB6FA643831C5C549615BBE2665 * value)
	{
		___controllerRay_21 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___controllerRay_21), (void*)value);
	}

	inline static int32_t get_offset_of_lastUpdateTime_22() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___lastUpdateTime_22)); }
	inline float get_lastUpdateTime_22() const { return ___lastUpdateTime_22; }
	inline float* get_address_of_lastUpdateTime_22() { return &___lastUpdateTime_22; }
	inline void set_lastUpdateTime_22(float value)
	{
		___lastUpdateTime_22 = value;
	}

	inline static int32_t get_offset_of_handJointService_23() { return static_cast<int32_t>(offsetof(SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE, ___handJointService_23)); }
	inline RuntimeObject* get_handJointService_23() const { return ___handJointService_23; }
	inline RuntimeObject** get_address_of_handJointService_23() { return &___handJointService_23; }
	inline void set_handJointService_23(RuntimeObject* value)
	{
		___handJointService_23 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___handJointService_23), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection
struct GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4  : public BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::surfaceType
	int32_t ___surfaceType_8;
	// Microsoft.MixedReality.Toolkit.Utilities.OrientationType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::orientType
	int32_t ___orientType_9;
	// Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::layout
	int32_t ___layout_10;
	// Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::anchor
	int32_t ___anchor_11;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::anchorAlongAxis
	bool ___anchorAlongAxis_12;
	// Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::columnAlignment
	int32_t ___columnAlignment_13;
	// Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::rowAlignment
	int32_t ___rowAlignment_14;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::radius
	float ___radius_15;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::radialRange
	float ___radialRange_16;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::distance
	float ___distance_17;
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::rows
	int32_t ___rows_19;
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::columns
	int32_t ___columns_20;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::cellWidth
	float ___cellWidth_21;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::cellHeight
	float ___cellHeight_22;
	// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::<SphereMesh>k__BackingField
	Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * ___U3CSphereMeshU3Ek__BackingField_23;
	// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::<CylinderMesh>k__BackingField
	Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * ___U3CCylinderMeshU3Ek__BackingField_24;
	// UnityEngine.Vector2 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::HalfCell
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___HalfCell_25;
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::assetVersion
	int32_t ___assetVersion_27;

public:
	inline static int32_t get_offset_of_surfaceType_8() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___surfaceType_8)); }
	inline int32_t get_surfaceType_8() const { return ___surfaceType_8; }
	inline int32_t* get_address_of_surfaceType_8() { return &___surfaceType_8; }
	inline void set_surfaceType_8(int32_t value)
	{
		___surfaceType_8 = value;
	}

	inline static int32_t get_offset_of_orientType_9() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___orientType_9)); }
	inline int32_t get_orientType_9() const { return ___orientType_9; }
	inline int32_t* get_address_of_orientType_9() { return &___orientType_9; }
	inline void set_orientType_9(int32_t value)
	{
		___orientType_9 = value;
	}

	inline static int32_t get_offset_of_layout_10() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___layout_10)); }
	inline int32_t get_layout_10() const { return ___layout_10; }
	inline int32_t* get_address_of_layout_10() { return &___layout_10; }
	inline void set_layout_10(int32_t value)
	{
		___layout_10 = value;
	}

	inline static int32_t get_offset_of_anchor_11() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___anchor_11)); }
	inline int32_t get_anchor_11() const { return ___anchor_11; }
	inline int32_t* get_address_of_anchor_11() { return &___anchor_11; }
	inline void set_anchor_11(int32_t value)
	{
		___anchor_11 = value;
	}

	inline static int32_t get_offset_of_anchorAlongAxis_12() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___anchorAlongAxis_12)); }
	inline bool get_anchorAlongAxis_12() const { return ___anchorAlongAxis_12; }
	inline bool* get_address_of_anchorAlongAxis_12() { return &___anchorAlongAxis_12; }
	inline void set_anchorAlongAxis_12(bool value)
	{
		___anchorAlongAxis_12 = value;
	}

	inline static int32_t get_offset_of_columnAlignment_13() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___columnAlignment_13)); }
	inline int32_t get_columnAlignment_13() const { return ___columnAlignment_13; }
	inline int32_t* get_address_of_columnAlignment_13() { return &___columnAlignment_13; }
	inline void set_columnAlignment_13(int32_t value)
	{
		___columnAlignment_13 = value;
	}

	inline static int32_t get_offset_of_rowAlignment_14() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___rowAlignment_14)); }
	inline int32_t get_rowAlignment_14() const { return ___rowAlignment_14; }
	inline int32_t* get_address_of_rowAlignment_14() { return &___rowAlignment_14; }
	inline void set_rowAlignment_14(int32_t value)
	{
		___rowAlignment_14 = value;
	}

	inline static int32_t get_offset_of_radius_15() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___radius_15)); }
	inline float get_radius_15() const { return ___radius_15; }
	inline float* get_address_of_radius_15() { return &___radius_15; }
	inline void set_radius_15(float value)
	{
		___radius_15 = value;
	}

	inline static int32_t get_offset_of_radialRange_16() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___radialRange_16)); }
	inline float get_radialRange_16() const { return ___radialRange_16; }
	inline float* get_address_of_radialRange_16() { return &___radialRange_16; }
	inline void set_radialRange_16(float value)
	{
		___radialRange_16 = value;
	}

	inline static int32_t get_offset_of_distance_17() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___distance_17)); }
	inline float get_distance_17() const { return ___distance_17; }
	inline float* get_address_of_distance_17() { return &___distance_17; }
	inline void set_distance_17(float value)
	{
		___distance_17 = value;
	}

	inline static int32_t get_offset_of_rows_19() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___rows_19)); }
	inline int32_t get_rows_19() const { return ___rows_19; }
	inline int32_t* get_address_of_rows_19() { return &___rows_19; }
	inline void set_rows_19(int32_t value)
	{
		___rows_19 = value;
	}

	inline static int32_t get_offset_of_columns_20() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___columns_20)); }
	inline int32_t get_columns_20() const { return ___columns_20; }
	inline int32_t* get_address_of_columns_20() { return &___columns_20; }
	inline void set_columns_20(int32_t value)
	{
		___columns_20 = value;
	}

	inline static int32_t get_offset_of_cellWidth_21() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___cellWidth_21)); }
	inline float get_cellWidth_21() const { return ___cellWidth_21; }
	inline float* get_address_of_cellWidth_21() { return &___cellWidth_21; }
	inline void set_cellWidth_21(float value)
	{
		___cellWidth_21 = value;
	}

	inline static int32_t get_offset_of_cellHeight_22() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___cellHeight_22)); }
	inline float get_cellHeight_22() const { return ___cellHeight_22; }
	inline float* get_address_of_cellHeight_22() { return &___cellHeight_22; }
	inline void set_cellHeight_22(float value)
	{
		___cellHeight_22 = value;
	}

	inline static int32_t get_offset_of_U3CSphereMeshU3Ek__BackingField_23() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___U3CSphereMeshU3Ek__BackingField_23)); }
	inline Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * get_U3CSphereMeshU3Ek__BackingField_23() const { return ___U3CSphereMeshU3Ek__BackingField_23; }
	inline Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C ** get_address_of_U3CSphereMeshU3Ek__BackingField_23() { return &___U3CSphereMeshU3Ek__BackingField_23; }
	inline void set_U3CSphereMeshU3Ek__BackingField_23(Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * value)
	{
		___U3CSphereMeshU3Ek__BackingField_23 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CSphereMeshU3Ek__BackingField_23), (void*)value);
	}

	inline static int32_t get_offset_of_U3CCylinderMeshU3Ek__BackingField_24() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___U3CCylinderMeshU3Ek__BackingField_24)); }
	inline Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * get_U3CCylinderMeshU3Ek__BackingField_24() const { return ___U3CCylinderMeshU3Ek__BackingField_24; }
	inline Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C ** get_address_of_U3CCylinderMeshU3Ek__BackingField_24() { return &___U3CCylinderMeshU3Ek__BackingField_24; }
	inline void set_U3CCylinderMeshU3Ek__BackingField_24(Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * value)
	{
		___U3CCylinderMeshU3Ek__BackingField_24 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CCylinderMeshU3Ek__BackingField_24), (void*)value);
	}

	inline static int32_t get_offset_of_HalfCell_25() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___HalfCell_25)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_HalfCell_25() const { return ___HalfCell_25; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_HalfCell_25() { return &___HalfCell_25; }
	inline void set_HalfCell_25(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___HalfCell_25 = value;
	}

	inline static int32_t get_offset_of_assetVersion_27() { return static_cast<int32_t>(offsetof(GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4, ___assetVersion_27)); }
	inline int32_t get_assetVersion_27() const { return ___assetVersion_27; }
	inline int32_t* get_address_of_assetVersion_27() { return &___assetVersion_27; }
	inline void set_assetVersion_27(int32_t value)
	{
		___assetVersion_27 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize
struct ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C  : public Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011
{
public:
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::targetViewPercentV
	float ___targetViewPercentV_13;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::minDistance
	float ___minDistance_14;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::maxDistance
	float ___maxDistance_15;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::minScale
	float ___minScale_16;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::maxScale
	float ___maxScale_17;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::scaleBuffer
	float ___scaleBuffer_18;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::manualObjectSize
	float ___manualObjectSize_19;
	// Microsoft.MixedReality.Toolkit.Utilities.ScaleState Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::<ScaleState>k__BackingField
	int32_t ___U3CScaleStateU3Ek__BackingField_20;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::<CurrentScalePercent>k__BackingField
	float ___U3CCurrentScalePercentU3Ek__BackingField_21;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::<CurrentDistancePercent>k__BackingField
	float ___U3CCurrentDistancePercentU3Ek__BackingField_22;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::fovScalar
	float ___fovScalar_23;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::objectSize
	float ___objectSize_24;

public:
	inline static int32_t get_offset_of_targetViewPercentV_13() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___targetViewPercentV_13)); }
	inline float get_targetViewPercentV_13() const { return ___targetViewPercentV_13; }
	inline float* get_address_of_targetViewPercentV_13() { return &___targetViewPercentV_13; }
	inline void set_targetViewPercentV_13(float value)
	{
		___targetViewPercentV_13 = value;
	}

	inline static int32_t get_offset_of_minDistance_14() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___minDistance_14)); }
	inline float get_minDistance_14() const { return ___minDistance_14; }
	inline float* get_address_of_minDistance_14() { return &___minDistance_14; }
	inline void set_minDistance_14(float value)
	{
		___minDistance_14 = value;
	}

	inline static int32_t get_offset_of_maxDistance_15() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___maxDistance_15)); }
	inline float get_maxDistance_15() const { return ___maxDistance_15; }
	inline float* get_address_of_maxDistance_15() { return &___maxDistance_15; }
	inline void set_maxDistance_15(float value)
	{
		___maxDistance_15 = value;
	}

	inline static int32_t get_offset_of_minScale_16() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___minScale_16)); }
	inline float get_minScale_16() const { return ___minScale_16; }
	inline float* get_address_of_minScale_16() { return &___minScale_16; }
	inline void set_minScale_16(float value)
	{
		___minScale_16 = value;
	}

	inline static int32_t get_offset_of_maxScale_17() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___maxScale_17)); }
	inline float get_maxScale_17() const { return ___maxScale_17; }
	inline float* get_address_of_maxScale_17() { return &___maxScale_17; }
	inline void set_maxScale_17(float value)
	{
		___maxScale_17 = value;
	}

	inline static int32_t get_offset_of_scaleBuffer_18() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___scaleBuffer_18)); }
	inline float get_scaleBuffer_18() const { return ___scaleBuffer_18; }
	inline float* get_address_of_scaleBuffer_18() { return &___scaleBuffer_18; }
	inline void set_scaleBuffer_18(float value)
	{
		___scaleBuffer_18 = value;
	}

	inline static int32_t get_offset_of_manualObjectSize_19() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___manualObjectSize_19)); }
	inline float get_manualObjectSize_19() const { return ___manualObjectSize_19; }
	inline float* get_address_of_manualObjectSize_19() { return &___manualObjectSize_19; }
	inline void set_manualObjectSize_19(float value)
	{
		___manualObjectSize_19 = value;
	}

	inline static int32_t get_offset_of_U3CScaleStateU3Ek__BackingField_20() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___U3CScaleStateU3Ek__BackingField_20)); }
	inline int32_t get_U3CScaleStateU3Ek__BackingField_20() const { return ___U3CScaleStateU3Ek__BackingField_20; }
	inline int32_t* get_address_of_U3CScaleStateU3Ek__BackingField_20() { return &___U3CScaleStateU3Ek__BackingField_20; }
	inline void set_U3CScaleStateU3Ek__BackingField_20(int32_t value)
	{
		___U3CScaleStateU3Ek__BackingField_20 = value;
	}

	inline static int32_t get_offset_of_U3CCurrentScalePercentU3Ek__BackingField_21() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___U3CCurrentScalePercentU3Ek__BackingField_21)); }
	inline float get_U3CCurrentScalePercentU3Ek__BackingField_21() const { return ___U3CCurrentScalePercentU3Ek__BackingField_21; }
	inline float* get_address_of_U3CCurrentScalePercentU3Ek__BackingField_21() { return &___U3CCurrentScalePercentU3Ek__BackingField_21; }
	inline void set_U3CCurrentScalePercentU3Ek__BackingField_21(float value)
	{
		___U3CCurrentScalePercentU3Ek__BackingField_21 = value;
	}

	inline static int32_t get_offset_of_U3CCurrentDistancePercentU3Ek__BackingField_22() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___U3CCurrentDistancePercentU3Ek__BackingField_22)); }
	inline float get_U3CCurrentDistancePercentU3Ek__BackingField_22() const { return ___U3CCurrentDistancePercentU3Ek__BackingField_22; }
	inline float* get_address_of_U3CCurrentDistancePercentU3Ek__BackingField_22() { return &___U3CCurrentDistancePercentU3Ek__BackingField_22; }
	inline void set_U3CCurrentDistancePercentU3Ek__BackingField_22(float value)
	{
		___U3CCurrentDistancePercentU3Ek__BackingField_22 = value;
	}

	inline static int32_t get_offset_of_fovScalar_23() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___fovScalar_23)); }
	inline float get_fovScalar_23() const { return ___fovScalar_23; }
	inline float* get_address_of_fovScalar_23() { return &___fovScalar_23; }
	inline void set_fovScalar_23(float value)
	{
		___fovScalar_23 = value;
	}

	inline static int32_t get_offset_of_objectSize_24() { return static_cast<int32_t>(offsetof(ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C, ___objectSize_24)); }
	inline float get_objectSize_24() const { return ___objectSize_24; }
	inline float* get_address_of_objectSize_24() { return &___objectSize_24; }
	inline void set_objectSize_24(float value)
	{
		___objectSize_24 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator
struct DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711  : public Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011
{
public:
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::DirectionalTarget
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___DirectionalTarget_13;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::MinIndicatorScale
	float ___MinIndicatorScale_14;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::MaxIndicatorScale
	float ___MaxIndicatorScale_15;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::VisibilityScaleFactor
	float ___VisibilityScaleFactor_16;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::ViewOffset
	float ___ViewOffset_17;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::indicatorShown
	bool ___indicatorShown_18;

public:
	inline static int32_t get_offset_of_DirectionalTarget_13() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___DirectionalTarget_13)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_DirectionalTarget_13() const { return ___DirectionalTarget_13; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_DirectionalTarget_13() { return &___DirectionalTarget_13; }
	inline void set_DirectionalTarget_13(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___DirectionalTarget_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___DirectionalTarget_13), (void*)value);
	}

	inline static int32_t get_offset_of_MinIndicatorScale_14() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___MinIndicatorScale_14)); }
	inline float get_MinIndicatorScale_14() const { return ___MinIndicatorScale_14; }
	inline float* get_address_of_MinIndicatorScale_14() { return &___MinIndicatorScale_14; }
	inline void set_MinIndicatorScale_14(float value)
	{
		___MinIndicatorScale_14 = value;
	}

	inline static int32_t get_offset_of_MaxIndicatorScale_15() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___MaxIndicatorScale_15)); }
	inline float get_MaxIndicatorScale_15() const { return ___MaxIndicatorScale_15; }
	inline float* get_address_of_MaxIndicatorScale_15() { return &___MaxIndicatorScale_15; }
	inline void set_MaxIndicatorScale_15(float value)
	{
		___MaxIndicatorScale_15 = value;
	}

	inline static int32_t get_offset_of_VisibilityScaleFactor_16() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___VisibilityScaleFactor_16)); }
	inline float get_VisibilityScaleFactor_16() const { return ___VisibilityScaleFactor_16; }
	inline float* get_address_of_VisibilityScaleFactor_16() { return &___VisibilityScaleFactor_16; }
	inline void set_VisibilityScaleFactor_16(float value)
	{
		___VisibilityScaleFactor_16 = value;
	}

	inline static int32_t get_offset_of_ViewOffset_17() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___ViewOffset_17)); }
	inline float get_ViewOffset_17() const { return ___ViewOffset_17; }
	inline float* get_address_of_ViewOffset_17() { return &___ViewOffset_17; }
	inline void set_ViewOffset_17(float value)
	{
		___ViewOffset_17 = value;
	}

	inline static int32_t get_offset_of_indicatorShown_18() { return static_cast<int32_t>(offsetof(DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711, ___indicatorShown_18)); }
	inline bool get_indicatorShown_18() const { return ___indicatorShown_18; }
	inline bool* get_address_of_indicatorShown_18() { return &___indicatorShown_18; }
	inline void set_indicatorShown_18(bool value)
	{
		___indicatorShown_18 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow
struct Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A  : public Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::orientationType
	int32_t ___orientationType_13;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::faceTrackedObjectWhileClamped
	bool ___faceTrackedObjectWhileClamped_14;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::faceUserDefinedTargetTransform
	bool ___faceUserDefinedTargetTransform_15;
	// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::targetToFace
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___targetToFace_16;
	// Microsoft.MixedReality.Toolkit.Utilities.AxisFlags Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::pivotAxis
	int32_t ___pivotAxis_17;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::minDistance
	float ___minDistance_18;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::maxDistance
	float ___maxDistance_19;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::defaultDistance
	float ___defaultDistance_20;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::maxViewHorizontalDegrees
	float ___maxViewHorizontalDegrees_21;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::maxViewVerticalDegrees
	float ___maxViewVerticalDegrees_22;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::reorientWhenOutsideParameters
	bool ___reorientWhenOutsideParameters_23;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::orientToControllerDeadzoneDegrees
	float ___orientToControllerDeadzoneDegrees_24;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::ignoreAngleClamp
	bool ___ignoreAngleClamp_25;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::ignoreDistanceClamp
	bool ___ignoreDistanceClamp_26;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::ignoreReferencePitchAndRoll
	bool ___ignoreReferencePitchAndRoll_27;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::pitchOffset
	float ___pitchOffset_28;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::verticalMaxDistance
	float ___verticalMaxDistance_29;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::angularClampMode
	int32_t ___angularClampMode_30;
	// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::tetherAngleSteps
	int32_t ___tetherAngleSteps_31;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::boundsScaler
	float ___boundsScaler_32;
	// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::PreviousGoalRotation
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___PreviousGoalRotation_33;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::recenterNextUpdate
	bool ___recenterNextUpdate_34;
	// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::boundsExtents
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___boundsExtents_35;

public:
	inline static int32_t get_offset_of_orientationType_13() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___orientationType_13)); }
	inline int32_t get_orientationType_13() const { return ___orientationType_13; }
	inline int32_t* get_address_of_orientationType_13() { return &___orientationType_13; }
	inline void set_orientationType_13(int32_t value)
	{
		___orientationType_13 = value;
	}

	inline static int32_t get_offset_of_faceTrackedObjectWhileClamped_14() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___faceTrackedObjectWhileClamped_14)); }
	inline bool get_faceTrackedObjectWhileClamped_14() const { return ___faceTrackedObjectWhileClamped_14; }
	inline bool* get_address_of_faceTrackedObjectWhileClamped_14() { return &___faceTrackedObjectWhileClamped_14; }
	inline void set_faceTrackedObjectWhileClamped_14(bool value)
	{
		___faceTrackedObjectWhileClamped_14 = value;
	}

	inline static int32_t get_offset_of_faceUserDefinedTargetTransform_15() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___faceUserDefinedTargetTransform_15)); }
	inline bool get_faceUserDefinedTargetTransform_15() const { return ___faceUserDefinedTargetTransform_15; }
	inline bool* get_address_of_faceUserDefinedTargetTransform_15() { return &___faceUserDefinedTargetTransform_15; }
	inline void set_faceUserDefinedTargetTransform_15(bool value)
	{
		___faceUserDefinedTargetTransform_15 = value;
	}

	inline static int32_t get_offset_of_targetToFace_16() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___targetToFace_16)); }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * get_targetToFace_16() const { return ___targetToFace_16; }
	inline Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA ** get_address_of_targetToFace_16() { return &___targetToFace_16; }
	inline void set_targetToFace_16(Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * value)
	{
		___targetToFace_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___targetToFace_16), (void*)value);
	}

	inline static int32_t get_offset_of_pivotAxis_17() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___pivotAxis_17)); }
	inline int32_t get_pivotAxis_17() const { return ___pivotAxis_17; }
	inline int32_t* get_address_of_pivotAxis_17() { return &___pivotAxis_17; }
	inline void set_pivotAxis_17(int32_t value)
	{
		___pivotAxis_17 = value;
	}

	inline static int32_t get_offset_of_minDistance_18() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___minDistance_18)); }
	inline float get_minDistance_18() const { return ___minDistance_18; }
	inline float* get_address_of_minDistance_18() { return &___minDistance_18; }
	inline void set_minDistance_18(float value)
	{
		___minDistance_18 = value;
	}

	inline static int32_t get_offset_of_maxDistance_19() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___maxDistance_19)); }
	inline float get_maxDistance_19() const { return ___maxDistance_19; }
	inline float* get_address_of_maxDistance_19() { return &___maxDistance_19; }
	inline void set_maxDistance_19(float value)
	{
		___maxDistance_19 = value;
	}

	inline static int32_t get_offset_of_defaultDistance_20() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___defaultDistance_20)); }
	inline float get_defaultDistance_20() const { return ___defaultDistance_20; }
	inline float* get_address_of_defaultDistance_20() { return &___defaultDistance_20; }
	inline void set_defaultDistance_20(float value)
	{
		___defaultDistance_20 = value;
	}

	inline static int32_t get_offset_of_maxViewHorizontalDegrees_21() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___maxViewHorizontalDegrees_21)); }
	inline float get_maxViewHorizontalDegrees_21() const { return ___maxViewHorizontalDegrees_21; }
	inline float* get_address_of_maxViewHorizontalDegrees_21() { return &___maxViewHorizontalDegrees_21; }
	inline void set_maxViewHorizontalDegrees_21(float value)
	{
		___maxViewHorizontalDegrees_21 = value;
	}

	inline static int32_t get_offset_of_maxViewVerticalDegrees_22() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___maxViewVerticalDegrees_22)); }
	inline float get_maxViewVerticalDegrees_22() const { return ___maxViewVerticalDegrees_22; }
	inline float* get_address_of_maxViewVerticalDegrees_22() { return &___maxViewVerticalDegrees_22; }
	inline void set_maxViewVerticalDegrees_22(float value)
	{
		___maxViewVerticalDegrees_22 = value;
	}

	inline static int32_t get_offset_of_reorientWhenOutsideParameters_23() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___reorientWhenOutsideParameters_23)); }
	inline bool get_reorientWhenOutsideParameters_23() const { return ___reorientWhenOutsideParameters_23; }
	inline bool* get_address_of_reorientWhenOutsideParameters_23() { return &___reorientWhenOutsideParameters_23; }
	inline void set_reorientWhenOutsideParameters_23(bool value)
	{
		___reorientWhenOutsideParameters_23 = value;
	}

	inline static int32_t get_offset_of_orientToControllerDeadzoneDegrees_24() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___orientToControllerDeadzoneDegrees_24)); }
	inline float get_orientToControllerDeadzoneDegrees_24() const { return ___orientToControllerDeadzoneDegrees_24; }
	inline float* get_address_of_orientToControllerDeadzoneDegrees_24() { return &___orientToControllerDeadzoneDegrees_24; }
	inline void set_orientToControllerDeadzoneDegrees_24(float value)
	{
		___orientToControllerDeadzoneDegrees_24 = value;
	}

	inline static int32_t get_offset_of_ignoreAngleClamp_25() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___ignoreAngleClamp_25)); }
	inline bool get_ignoreAngleClamp_25() const { return ___ignoreAngleClamp_25; }
	inline bool* get_address_of_ignoreAngleClamp_25() { return &___ignoreAngleClamp_25; }
	inline void set_ignoreAngleClamp_25(bool value)
	{
		___ignoreAngleClamp_25 = value;
	}

	inline static int32_t get_offset_of_ignoreDistanceClamp_26() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___ignoreDistanceClamp_26)); }
	inline bool get_ignoreDistanceClamp_26() const { return ___ignoreDistanceClamp_26; }
	inline bool* get_address_of_ignoreDistanceClamp_26() { return &___ignoreDistanceClamp_26; }
	inline void set_ignoreDistanceClamp_26(bool value)
	{
		___ignoreDistanceClamp_26 = value;
	}

	inline static int32_t get_offset_of_ignoreReferencePitchAndRoll_27() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___ignoreReferencePitchAndRoll_27)); }
	inline bool get_ignoreReferencePitchAndRoll_27() const { return ___ignoreReferencePitchAndRoll_27; }
	inline bool* get_address_of_ignoreReferencePitchAndRoll_27() { return &___ignoreReferencePitchAndRoll_27; }
	inline void set_ignoreReferencePitchAndRoll_27(bool value)
	{
		___ignoreReferencePitchAndRoll_27 = value;
	}

	inline static int32_t get_offset_of_pitchOffset_28() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___pitchOffset_28)); }
	inline float get_pitchOffset_28() const { return ___pitchOffset_28; }
	inline float* get_address_of_pitchOffset_28() { return &___pitchOffset_28; }
	inline void set_pitchOffset_28(float value)
	{
		___pitchOffset_28 = value;
	}

	inline static int32_t get_offset_of_verticalMaxDistance_29() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___verticalMaxDistance_29)); }
	inline float get_verticalMaxDistance_29() const { return ___verticalMaxDistance_29; }
	inline float* get_address_of_verticalMaxDistance_29() { return &___verticalMaxDistance_29; }
	inline void set_verticalMaxDistance_29(float value)
	{
		___verticalMaxDistance_29 = value;
	}

	inline static int32_t get_offset_of_angularClampMode_30() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___angularClampMode_30)); }
	inline int32_t get_angularClampMode_30() const { return ___angularClampMode_30; }
	inline int32_t* get_address_of_angularClampMode_30() { return &___angularClampMode_30; }
	inline void set_angularClampMode_30(int32_t value)
	{
		___angularClampMode_30 = value;
	}

	inline static int32_t get_offset_of_tetherAngleSteps_31() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___tetherAngleSteps_31)); }
	inline int32_t get_tetherAngleSteps_31() const { return ___tetherAngleSteps_31; }
	inline int32_t* get_address_of_tetherAngleSteps_31() { return &___tetherAngleSteps_31; }
	inline void set_tetherAngleSteps_31(int32_t value)
	{
		___tetherAngleSteps_31 = value;
	}

	inline static int32_t get_offset_of_boundsScaler_32() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___boundsScaler_32)); }
	inline float get_boundsScaler_32() const { return ___boundsScaler_32; }
	inline float* get_address_of_boundsScaler_32() { return &___boundsScaler_32; }
	inline void set_boundsScaler_32(float value)
	{
		___boundsScaler_32 = value;
	}

	inline static int32_t get_offset_of_PreviousGoalRotation_33() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___PreviousGoalRotation_33)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_PreviousGoalRotation_33() const { return ___PreviousGoalRotation_33; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_PreviousGoalRotation_33() { return &___PreviousGoalRotation_33; }
	inline void set_PreviousGoalRotation_33(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___PreviousGoalRotation_33 = value;
	}

	inline static int32_t get_offset_of_recenterNextUpdate_34() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___recenterNextUpdate_34)); }
	inline bool get_recenterNextUpdate_34() const { return ___recenterNextUpdate_34; }
	inline bool* get_address_of_recenterNextUpdate_34() { return &___recenterNextUpdate_34; }
	inline void set_recenterNextUpdate_34(bool value)
	{
		___recenterNextUpdate_34 = value;
	}

	inline static int32_t get_offset_of_boundsExtents_35() { return static_cast<int32_t>(offsetof(Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A, ___boundsExtents_35)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_boundsExtents_35() const { return ___boundsExtents_35; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_boundsExtents_35() { return &___boundsExtents_35; }
	inline void set_boundsExtents_35(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___boundsExtents_35 = value;
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint
struct HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A  : public Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::safeZone
	int32_t ___safeZone_14;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::safeZoneBuffer
	float ___safeZoneBuffer_15;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::updateWhenOppositeHandNear
	bool ___updateWhenOppositeHandNear_16;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::hideHandCursorsOnActivate
	bool ___hideHandCursorsOnActivate_17;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::rotationBehavior
	int32_t ___rotationBehavior_18;
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::offsetBehavior
	int32_t ___offsetBehavior_19;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::forwardOffset
	float ___forwardOffset_20;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::safeZoneAngleOffset
	float ___safeZoneAngleOffset_21;
	// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::onHandActivate
	UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___onHandActivate_22;
	// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::onHandDeactivate
	UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___onHandDeactivate_23;
	// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::onFirstHandDetected
	UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___onFirstHandDetected_24;
	// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::onLastHandLost
	UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___onLastHandLost_25;
	// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::previousHandedness
	uint8_t ___previousHandedness_26;
	// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::trackedController
	RuntimeObject* ___trackedController_27;
	// Microsoft.MixedReality.Toolkit.Input.HandBounds Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::handBounds
	HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * ___handBounds_28;
	// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::handToWorldRotation
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___handToWorldRotation_29;

public:
	inline static int32_t get_offset_of_safeZone_14() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___safeZone_14)); }
	inline int32_t get_safeZone_14() const { return ___safeZone_14; }
	inline int32_t* get_address_of_safeZone_14() { return &___safeZone_14; }
	inline void set_safeZone_14(int32_t value)
	{
		___safeZone_14 = value;
	}

	inline static int32_t get_offset_of_safeZoneBuffer_15() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___safeZoneBuffer_15)); }
	inline float get_safeZoneBuffer_15() const { return ___safeZoneBuffer_15; }
	inline float* get_address_of_safeZoneBuffer_15() { return &___safeZoneBuffer_15; }
	inline void set_safeZoneBuffer_15(float value)
	{
		___safeZoneBuffer_15 = value;
	}

	inline static int32_t get_offset_of_updateWhenOppositeHandNear_16() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___updateWhenOppositeHandNear_16)); }
	inline bool get_updateWhenOppositeHandNear_16() const { return ___updateWhenOppositeHandNear_16; }
	inline bool* get_address_of_updateWhenOppositeHandNear_16() { return &___updateWhenOppositeHandNear_16; }
	inline void set_updateWhenOppositeHandNear_16(bool value)
	{
		___updateWhenOppositeHandNear_16 = value;
	}

	inline static int32_t get_offset_of_hideHandCursorsOnActivate_17() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___hideHandCursorsOnActivate_17)); }
	inline bool get_hideHandCursorsOnActivate_17() const { return ___hideHandCursorsOnActivate_17; }
	inline bool* get_address_of_hideHandCursorsOnActivate_17() { return &___hideHandCursorsOnActivate_17; }
	inline void set_hideHandCursorsOnActivate_17(bool value)
	{
		___hideHandCursorsOnActivate_17 = value;
	}

	inline static int32_t get_offset_of_rotationBehavior_18() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___rotationBehavior_18)); }
	inline int32_t get_rotationBehavior_18() const { return ___rotationBehavior_18; }
	inline int32_t* get_address_of_rotationBehavior_18() { return &___rotationBehavior_18; }
	inline void set_rotationBehavior_18(int32_t value)
	{
		___rotationBehavior_18 = value;
	}

	inline static int32_t get_offset_of_offsetBehavior_19() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___offsetBehavior_19)); }
	inline int32_t get_offsetBehavior_19() const { return ___offsetBehavior_19; }
	inline int32_t* get_address_of_offsetBehavior_19() { return &___offsetBehavior_19; }
	inline void set_offsetBehavior_19(int32_t value)
	{
		___offsetBehavior_19 = value;
	}

	inline static int32_t get_offset_of_forwardOffset_20() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___forwardOffset_20)); }
	inline float get_forwardOffset_20() const { return ___forwardOffset_20; }
	inline float* get_address_of_forwardOffset_20() { return &___forwardOffset_20; }
	inline void set_forwardOffset_20(float value)
	{
		___forwardOffset_20 = value;
	}

	inline static int32_t get_offset_of_safeZoneAngleOffset_21() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___safeZoneAngleOffset_21)); }
	inline float get_safeZoneAngleOffset_21() const { return ___safeZoneAngleOffset_21; }
	inline float* get_address_of_safeZoneAngleOffset_21() { return &___safeZoneAngleOffset_21; }
	inline void set_safeZoneAngleOffset_21(float value)
	{
		___safeZoneAngleOffset_21 = value;
	}

	inline static int32_t get_offset_of_onHandActivate_22() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___onHandActivate_22)); }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * get_onHandActivate_22() const { return ___onHandActivate_22; }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F ** get_address_of_onHandActivate_22() { return &___onHandActivate_22; }
	inline void set_onHandActivate_22(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * value)
	{
		___onHandActivate_22 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onHandActivate_22), (void*)value);
	}

	inline static int32_t get_offset_of_onHandDeactivate_23() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___onHandDeactivate_23)); }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * get_onHandDeactivate_23() const { return ___onHandDeactivate_23; }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F ** get_address_of_onHandDeactivate_23() { return &___onHandDeactivate_23; }
	inline void set_onHandDeactivate_23(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * value)
	{
		___onHandDeactivate_23 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onHandDeactivate_23), (void*)value);
	}

	inline static int32_t get_offset_of_onFirstHandDetected_24() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___onFirstHandDetected_24)); }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * get_onFirstHandDetected_24() const { return ___onFirstHandDetected_24; }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F ** get_address_of_onFirstHandDetected_24() { return &___onFirstHandDetected_24; }
	inline void set_onFirstHandDetected_24(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * value)
	{
		___onFirstHandDetected_24 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onFirstHandDetected_24), (void*)value);
	}

	inline static int32_t get_offset_of_onLastHandLost_25() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___onLastHandLost_25)); }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * get_onLastHandLost_25() const { return ___onLastHandLost_25; }
	inline UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F ** get_address_of_onLastHandLost_25() { return &___onLastHandLost_25; }
	inline void set_onLastHandLost_25(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * value)
	{
		___onLastHandLost_25 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onLastHandLost_25), (void*)value);
	}

	inline static int32_t get_offset_of_previousHandedness_26() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___previousHandedness_26)); }
	inline uint8_t get_previousHandedness_26() const { return ___previousHandedness_26; }
	inline uint8_t* get_address_of_previousHandedness_26() { return &___previousHandedness_26; }
	inline void set_previousHandedness_26(uint8_t value)
	{
		___previousHandedness_26 = value;
	}

	inline static int32_t get_offset_of_trackedController_27() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___trackedController_27)); }
	inline RuntimeObject* get_trackedController_27() const { return ___trackedController_27; }
	inline RuntimeObject** get_address_of_trackedController_27() { return &___trackedController_27; }
	inline void set_trackedController_27(RuntimeObject* value)
	{
		___trackedController_27 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___trackedController_27), (void*)value);
	}

	inline static int32_t get_offset_of_handBounds_28() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___handBounds_28)); }
	inline HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * get_handBounds_28() const { return ___handBounds_28; }
	inline HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E ** get_address_of_handBounds_28() { return &___handBounds_28; }
	inline void set_handBounds_28(HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * value)
	{
		___handBounds_28 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___handBounds_28), (void*)value);
	}

	inline static int32_t get_offset_of_handToWorldRotation_29() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A, ___handToWorldRotation_29)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_handToWorldRotation_29() const { return ___handToWorldRotation_29; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_handToWorldRotation_29() { return &___handToWorldRotation_29; }
	inline void set_handToWorldRotation_29(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___handToWorldRotation_29 = value;
	}
};

struct HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields
{
public:
	// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone[] Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::handSafeZonesClockWiseRightHand
	SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* ___handSafeZonesClockWiseRightHand_13;

public:
	inline static int32_t get_offset_of_handSafeZonesClockWiseRightHand_13() { return static_cast<int32_t>(offsetof(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields, ___handSafeZonesClockWiseRightHand_13)); }
	inline SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* get_handSafeZonesClockWiseRightHand_13() const { return ___handSafeZonesClockWiseRightHand_13; }
	inline SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90** get_address_of_handSafeZonesClockWiseRightHand_13() { return &___handSafeZonesClockWiseRightHand_13; }
	inline void set_handSafeZonesClockWiseRightHand_13(SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* value)
	{
		___handSafeZonesClockWiseRightHand_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___handSafeZonesClockWiseRightHand_13), (void*)value);
	}
};


// Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection
struct ScatterObjectCollection_t2932B812F93E9835CF59CD0CCD179DF22A0136F0  : public GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4
{
public:

public:
};


// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp
struct HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6  : public HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A
{
public:
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::facingCameraTrackingThreshold
	float ___facingCameraTrackingThreshold_30;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::requireFlatHand
	bool ___requireFlatHand_31;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::flatHandThreshold
	float ___flatHandThreshold_32;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::followHandUntilFacingCamera
	bool ___followHandUntilFacingCamera_33;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::followHandCameraFacingThresholdAngle
	float ___followHandCameraFacingThresholdAngle_34;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::useGazeActivation
	bool ___useGazeActivation_35;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::eyeGazeProximityThreshold
	float ___eyeGazeProximityThreshold_36;
	// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::headGazeProximityThreshold
	float ___headGazeProximityThreshold_37;
	// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::gazeActivationAlreadyTriggered
	bool ___gazeActivationAlreadyTriggered_38;

public:
	inline static int32_t get_offset_of_facingCameraTrackingThreshold_30() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___facingCameraTrackingThreshold_30)); }
	inline float get_facingCameraTrackingThreshold_30() const { return ___facingCameraTrackingThreshold_30; }
	inline float* get_address_of_facingCameraTrackingThreshold_30() { return &___facingCameraTrackingThreshold_30; }
	inline void set_facingCameraTrackingThreshold_30(float value)
	{
		___facingCameraTrackingThreshold_30 = value;
	}

	inline static int32_t get_offset_of_requireFlatHand_31() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___requireFlatHand_31)); }
	inline bool get_requireFlatHand_31() const { return ___requireFlatHand_31; }
	inline bool* get_address_of_requireFlatHand_31() { return &___requireFlatHand_31; }
	inline void set_requireFlatHand_31(bool value)
	{
		___requireFlatHand_31 = value;
	}

	inline static int32_t get_offset_of_flatHandThreshold_32() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___flatHandThreshold_32)); }
	inline float get_flatHandThreshold_32() const { return ___flatHandThreshold_32; }
	inline float* get_address_of_flatHandThreshold_32() { return &___flatHandThreshold_32; }
	inline void set_flatHandThreshold_32(float value)
	{
		___flatHandThreshold_32 = value;
	}

	inline static int32_t get_offset_of_followHandUntilFacingCamera_33() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___followHandUntilFacingCamera_33)); }
	inline bool get_followHandUntilFacingCamera_33() const { return ___followHandUntilFacingCamera_33; }
	inline bool* get_address_of_followHandUntilFacingCamera_33() { return &___followHandUntilFacingCamera_33; }
	inline void set_followHandUntilFacingCamera_33(bool value)
	{
		___followHandUntilFacingCamera_33 = value;
	}

	inline static int32_t get_offset_of_followHandCameraFacingThresholdAngle_34() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___followHandCameraFacingThresholdAngle_34)); }
	inline float get_followHandCameraFacingThresholdAngle_34() const { return ___followHandCameraFacingThresholdAngle_34; }
	inline float* get_address_of_followHandCameraFacingThresholdAngle_34() { return &___followHandCameraFacingThresholdAngle_34; }
	inline void set_followHandCameraFacingThresholdAngle_34(float value)
	{
		___followHandCameraFacingThresholdAngle_34 = value;
	}

	inline static int32_t get_offset_of_useGazeActivation_35() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___useGazeActivation_35)); }
	inline bool get_useGazeActivation_35() const { return ___useGazeActivation_35; }
	inline bool* get_address_of_useGazeActivation_35() { return &___useGazeActivation_35; }
	inline void set_useGazeActivation_35(bool value)
	{
		___useGazeActivation_35 = value;
	}

	inline static int32_t get_offset_of_eyeGazeProximityThreshold_36() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___eyeGazeProximityThreshold_36)); }
	inline float get_eyeGazeProximityThreshold_36() const { return ___eyeGazeProximityThreshold_36; }
	inline float* get_address_of_eyeGazeProximityThreshold_36() { return &___eyeGazeProximityThreshold_36; }
	inline void set_eyeGazeProximityThreshold_36(float value)
	{
		___eyeGazeProximityThreshold_36 = value;
	}

	inline static int32_t get_offset_of_headGazeProximityThreshold_37() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___headGazeProximityThreshold_37)); }
	inline float get_headGazeProximityThreshold_37() const { return ___headGazeProximityThreshold_37; }
	inline float* get_address_of_headGazeProximityThreshold_37() { return &___headGazeProximityThreshold_37; }
	inline void set_headGazeProximityThreshold_37(float value)
	{
		___headGazeProximityThreshold_37 = value;
	}

	inline static int32_t get_offset_of_gazeActivationAlreadyTriggered_38() { return static_cast<int32_t>(offsetof(HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6, ___gazeActivationAlreadyTriggered_38)); }
	inline bool get_gazeActivationAlreadyTriggered_38() const { return ___gazeActivationAlreadyTriggered_38; }
	inline bool* get_address_of_gazeActivationAlreadyTriggered_38() { return &___gazeActivationAlreadyTriggered_38; }
	inline void set_gazeActivationAlreadyTriggered_38(bool value)
	{
		___gazeActivationAlreadyTriggered_38 = value;
	}
};

#ifdef __clang__
#pragma clang diagnostic pop
#endif
// UnityEngine.Keyframe[]
struct KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  m_Items[1];

public:
	inline Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  value)
	{
		m_Items[index] = value;
	}
};
// UnityEngine.Vector3[]
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  m_Items[1];

public:
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		m_Items[index] = value;
	}
};
// UnityEngine.Renderer[]
struct RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * m_Items[1];

public:
	inline Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 ** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 ** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer[]
struct IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) RuntimeObject* m_Items[1];

public:
	inline RuntimeObject* GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline RuntimeObject** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, RuntimeObject* value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline RuntimeObject* GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline RuntimeObject** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, RuntimeObject* value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone[]
struct SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};
// System.Object[]
struct ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) RuntimeObject * m_Items[1];

public:
	inline RuntimeObject * GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline RuntimeObject ** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, RuntimeObject * value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline RuntimeObject * GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline RuntimeObject ** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, RuntimeObject * value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};


// System.Int32 System.Collections.Generic.List`1<System.Object>::get_Count()
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR int32_t List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22_gshared_inline (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, const RuntimeMethod* method);
// !0 System.Collections.Generic.List`1<System.Object>::get_Item(System.Int32)
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR RuntimeObject * List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588_gshared_inline (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, int32_t ___index0, const RuntimeMethod* method);
// System.Void System.Collections.Generic.List`1<System.Object>::set_Item(System.Int32,!0)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_set_Item_m451452782977192583A6374A799099FCCD9BD83E_gshared (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, int32_t ___index0, RuntimeObject * ___value1, const RuntimeMethod* method);
// !!0 UnityEngine.Component::GetComponent<System.Object>()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * Component_GetComponent_TisRuntimeObject_m15E3130603CE5400743CCCDEE7600FB9EEFAE5C0_gshared (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method);
// !!0 UnityEngine.Component::GetComponentInChildren<System.Object>()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * Component_GetComponentInChildren_TisRuntimeObject_m2094C39A775FDD39B5FB9B5A77E988F3482DC46B_gshared (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method);
// System.Void System.Comparison`1<System.Object>::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Comparison_1__ctor_m3445CDEBFFF4A3A9EAED69CBCC2D247630CA5BD4_gshared (Comparison_1_tD9DBDF7B2E4774B4D35E113A76D75828A24641F4 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method);
// System.Void System.Collections.Generic.List`1<System.Object>::Sort(System.Comparison`1<!0>)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_Sort_mA3939603201EC0E13489EDA5975A07790CEDB483_gshared (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, Comparison_1_tD9DBDF7B2E4774B4D35E113A76D75828A24641F4 * ___comparison0, const RuntimeMethod* method);
// !!0[] UnityEngine.Component::GetComponentsInChildren<System.Object>()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* Component_GetComponentsInChildren_TisRuntimeObject_m96A4AA0545C19F58121E6C5142474CB26EAB9717_gshared (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method);
// System.Void System.Nullable`1<System.ByteEnum>::.ctor(!0)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Nullable_1__ctor_mA37A97B81445268412FC4754069FD1AD7ED89B8E_gshared (Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 * __this, uint8_t ___value0, const RuntimeMethod* method);
// !0 System.Nullable`1<System.ByteEnum>::GetValueOrDefault()
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR uint8_t Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EB_gshared_inline (Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 * __this, const RuntimeMethod* method);
// System.Boolean System.Nullable`1<System.ByteEnum>::get_HasValue()
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR bool Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4F_gshared_inline (Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 * __this, const RuntimeMethod* method);
// System.Collections.Generic.HashSet`1/Enumerator<!0> System.Collections.Generic.HashSet`1<System.Object>::GetEnumerator()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133  HashSet_1_GetEnumerator_m874F2BBF69C804D425AFCF30B376C9718AA298B5_gshared (HashSet_1_t297CD7F944846107B388993164FCD9E317A338A3 * __this, const RuntimeMethod* method);
// !0 System.Collections.Generic.HashSet`1/Enumerator<System.Object>::get_Current()
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR RuntimeObject * Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5F_gshared_inline (Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133 * __this, const RuntimeMethod* method);
// System.Boolean System.Collections.Generic.HashSet`1/Enumerator<System.Object>::MoveNext()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Enumerator_MoveNext_m3C52626EAD0998616A661D927B94DD52E67118D4_gshared (Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133 * __this, const RuntimeMethod* method);
// System.Void System.Collections.Generic.HashSet`1/Enumerator<System.Object>::Dispose()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Enumerator_Dispose_mE2BD5476A999119F49555D958386A0688E9C0C01_gshared (Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133 * __this, const RuntimeMethod* method);
// System.Boolean System.Collections.Generic.Dictionary`2<System.ByteEnum,UnityEngine.Bounds>::TryGetValue(!0,!1&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Dictionary_2_TryGetValue_m0A921D41F0B350F77239ABCCE69572F83309B3E4_gshared (Dictionary_2_t3A5FD15F1CA4E8B8943DFFB112420B6B2B19D760 * __this, uint8_t ___key0, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___value1, const RuntimeMethod* method);
// System.Boolean System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::get_HasValue()
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR bool Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_gshared_inline (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, const RuntimeMethod* method);
// !0 System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::get_Value()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_gshared (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, const RuntimeMethod* method);
// System.Int32 System.Array::IndexOf<System.Int32Enum>(!!0[],!!0)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Array_IndexOf_TisInt32Enum_t6312CE4586C17FE2E2E513D2E7655B574F10FDCD_mD060960651C0FA233C07C1A2661087BC323B5610_gshared (Int32EnumU5BU5D_t0A5530B4D0EA3796F661E767F9F7D7005A62CE4A* ___array0, int32_t ___value1, const RuntimeMethod* method);
// System.Void System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::.ctor(!0)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8_gshared (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___value0, const RuntimeMethod* method);

// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Smoothing::SmoothTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goal1, float ___lerpTime2, float ___deltaTime3, const RuntimeMethod* method);
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Smoothing::SmoothTo(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___source0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___goal1, float ___slerpTime2, float ___deltaTime3, const RuntimeMethod* method);
// System.Void System.Object::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0 (RuntimeObject * __this, const RuntimeMethod* method);
// UnityEngine.AnimationCurve UnityEngine.AnimationCurve::Linear(System.Single,System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * AnimationCurve_Linear_m1391DBE6C481643128387302FAB1142D1F13438A (float ___timeStart0, float ___valueStart1, float ___timeEnd2, float ___valueEnd3, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::Stop()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Time::get_deltaTime()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Time_get_deltaTime_m16F98FC9BA931581236008C288E3B25CBCB7C81E (const RuntimeMethod* method);
// System.Single UnityEngine.Mathf::Min(System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Mathf_Min_mCF9BE0E9CAC9F18D207692BB2DAC7F3E1D4E1CB7 (float ___a0, float ___b1, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Easing::IsLinear()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Easing::GetLinear()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.AnimationCurve::Evaluate(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float AnimationCurve_Evaluate_m51CAA6B1C54B7EF44FE4D74B422C1DA1FA6F8776 (AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * __this, float ___time0, const RuntimeMethod* method);
// UnityEngine.Keyframe[] UnityEngine.AnimationCurve::get_keys()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* AnimationCurve_get_keys_m88E1848D255C2893F379E855A522DA9B0E0F78FB (AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Keyframe::get_value()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Keyframe_get_value_m0DD3FAD00F43E7018FECBD011B04310E25C590FD (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Keyframe::.ctor(System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Keyframe__ctor_m0EA9CF8E65F32EE7603302E2CC670C56DC177C13 (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 * __this, float ___time0, float ___value1, const RuntimeMethod* method);
// System.Void UnityEngine.Keyframe::.ctor(System.Single,System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Keyframe__ctor_m10FFFE5FE1213C3AE88359375398F213B24F18D5 (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 * __this, float ___time0, float ___value1, float ___inTangent2, float ___outTangent3, const RuntimeMethod* method);
// System.Void UnityEngine.AnimationCurve::.ctor(UnityEngine.Keyframe[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AnimationCurve__ctor_mE9462D171C06A2A746B9DA1B0A6B0F4FC7DB94CF (AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * __this, KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* ___keys0, const RuntimeMethod* method);
// UnityEngine.AnimationCurve UnityEngine.AnimationCurve::EaseInOut(System.Single,System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * AnimationCurve_EaseInOut_m05634A1E02A101E8FFEF7479ED4CF821270F483C (float ___timeStart0, float ___valueStart1, float ___timeEnd2, float ___valueEnd3, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Layout()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Debug::LogError(System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29 (RuntimeObject * ___message0, const RuntimeMethod* method);
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Columns()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CellWidth()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CellHeight()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode> Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::get_NodeList()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA (BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873 * __this, const RuntimeMethod* method);
// System.Int32 System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>::get_Count()
inline int32_t List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * __this, const RuntimeMethod* method)
{
	return ((  int32_t (*) (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE *, const RuntimeMethod*))List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22_gshared_inline)(__this, method);
}
// System.Int32 UnityEngine.Mathf::CeilToInt(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Mathf_CeilToInt_m0230CCC7CC9266F18125D9425C38A25D1CA4275B (float ___f0, const RuntimeMethod* method);
// System.Void UnityEngine.Vector2::.ctor(System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0 (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * __this, float ___x0, float ___y1, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::ResolveGridLayout(UnityEngine.Vector3[],Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___grid0, int32_t ___order1, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_SurfaceType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// !0 System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>::get_Item(System.Int32)
inline ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * __this, int32_t ___index0, const RuntimeMethod* method)
{
	return ((  ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * (*) (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE *, int32_t, const RuntimeMethod*))List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588_gshared_inline)(__this, ___index0, method);
}
// System.Void UnityEngine.Transform::set_localPosition(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::UpdateNodeFacing(Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * ___node0, const RuntimeMethod* method);
// System.Void System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>::set_Item(System.Int32,!0)
inline void List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4 (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * __this, int32_t ___index0, ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * ___value1, const RuntimeMethod* method)
{
	((  void (*) (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE *, int32_t, ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 *, const RuntimeMethod*))List_1_set_Item_m451452782977192583A6374A799099FCCD9BD83E_gshared)(__this, ___index0, ___value1, method);
}
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.VectorExtensions::CylindricalMapping(UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  VectorExtensions_CylindricalMapping_m8AB7E338CF50AA22C733D0A0AA4336B643B0CA98 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, float ___radius1, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.VectorExtensions::SphericalMapping(UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  VectorExtensions_SphericalMapping_m2AD72F118F19681668486035FFC0A3F8E499C82E (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, float ___radius1, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.VectorExtensions::RadialMapping(UnityEngine.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  VectorExtensions_RadialMapping_mF50AB7F2B671DCAB77A128FC686C4CE8926EDC1B (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, float ___radialRange1, float ___radius2, int32_t ___row3, int32_t ___totalRows4, int32_t ___column5, int32_t ___totalColumns6, const RuntimeMethod* method);
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Rows()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_ColumnAlignment()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Vector3::Set(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector3_Set_m8F08F9B5324A755A28A0832DCA2A0CB19423E5EC (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, float ___newX0, float ___newY1, float ___newZ2, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_RowAlignment()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.OrientationType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_OrientType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_position()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// UnityEngine.Transform UnityEngine.Component::get_transform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9 (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_up()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::LookRotation(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___forward0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___upwards1, const RuntimeMethod* method);
// System.Void UnityEngine.Transform::set_rotation(UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Transform_set_rotation_m429694E264117C6DC682EC6AF45C7864E5155935 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___value0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::Project(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_Project_m3A2D462C2548AA76EB0BCD3305B1E8588347DB9D (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___vector0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___onNormal1, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Transform::get_rotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_forward()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D (const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Quaternion::op_Multiply(UnityEngine.Quaternion,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rotation0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___point1, const RuntimeMethod* method);
// System.Void UnityEngine.Transform::set_forward(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Transform_set_forward_m02858E8B3313B27174B19E9113F24EF25FBCEC7F (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_back()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_back_mE7EF8625637E6F8B9E6B42A6AE140777C51E02F7 (const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_up()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7 (const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_down()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_down_m3F76A48E5B7C82B35EE047375538AFD91A305F55 (const RuntimeMethod* method);
// System.Void UnityEngine.Debug::LogWarning(System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Debug_LogWarning_m37338644DC81F640CCDFEAE35A223F0E965F0568 (RuntimeObject * ___message0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_one()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB (const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_Multiply(System.Single,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_Multiply_mC7A8D6FD19E58DBF98E30D454F59F142F7BF8839 (float ___d0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a1, const RuntimeMethod* method);
// UnityEngine.Color UnityEngine.Color::get_green()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Color_t119BCA590009762C7223FDD3AF9706653AC84ED2  Color_get_green_mD53D8F980E92A0755759FBB2981E3DDEFCD084C0 (const RuntimeMethod* method);
// System.Void UnityEngine.Gizmos::set_color(UnityEngine.Color)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Gizmos_set_color_mFA6C199DF05FF557AEF662222CA60EC25DF54F28 (Color_t119BCA590009762C7223FDD3AF9706653AC84ED2  ___value0, const RuntimeMethod* method);
// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CylinderMesh()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_inline (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Gizmos::DrawWireMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Gizmos_DrawWireMesh_mCAAFD2D9A13919911A410B61C953FB73E92D16AB (Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * ___mesh0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___position1, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rotation2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___scale3, const RuntimeMethod* method);
// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_SphereMesh()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_inline (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.String Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::GetUserFriendlyName()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::UpgradeAssetToVersion1()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Layout(Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method);
// System.String System.String::Concat(System.String,System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_mF4626905368D6558695A823466A1AF65EADB9923 (String_t* ___str00, String_t* ___str11, String_t* ___str22, const RuntimeMethod* method);
// System.Void UnityEngine.Debug::Log(System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Debug_Log_m4B7C70BAFD477C6BDB59C88A0934F0B018D03708 (RuntimeObject * ___message0, const RuntimeMethod* method);
// UnityEngine.GameObject UnityEngine.Component::get_gameObject()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method);
// System.String UnityEngine.Object::get_name()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* Object_get_name_mA2D400141CB3C991C87A2556429781DE961A83CE (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 * __this, const RuntimeMethod* method);
// UnityEngine.Transform UnityEngine.GameObject::get_transform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * GameObject_get_transform_mA5C38857137F137CB96C69FAA624199EB1C2FB2C (GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * __this, const RuntimeMethod* method);
// UnityEngine.Transform UnityEngine.Transform::get_parent()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Transform_get_parent_m8FA24E38A1FA29D90CBF3CDC9F9F017C65BB3403 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1 (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 * ___x0, Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 * ___y1, const RuntimeMethod* method);
// System.String System.String::Concat(System.String,System.String,System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_mDD2E38332DED3A8C088D38D78A0E0BEB5091DA64 (String_t* ___str00, String_t* ___str11, String_t* ___str22, String_t* ___str33, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void BaseObjectCollection__ctor_mB4DB96D598D759957AAF2B78F6BF4F3DED7A2BD4 (BaseObjectCollection_t28800ED99C48E52676F95791DA3FE02771D11873 * __this, const RuntimeMethod* method);
// UnityEngine.Camera Microsoft.MixedReality.Toolkit.Utilities.CameraCache::get_Main()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554 (const RuntimeMethod* method);
// System.Void UnityEngine.Transform::set_position(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Transform_set_position_mDA89E4893F14ECA5CBEEE7FB80A5BF7C1B8EA6DC (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, float ___x0, float ___y1, float ___z2, const RuntimeMethod* method);
// System.Void UnityEngine.MonoBehaviour::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void MonoBehaviour__ctor_mEAEC84B222C60319D593E456D769B3311DFCEF97 (MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429 * __this, const RuntimeMethod* method);
// !!0 UnityEngine.Component::GetComponent<UnityEngine.RectTransform>()
inline RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * Component_GetComponent_TisRectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_mEF939F54B6B56187EC11E16F51DCB12EB62C2103 (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method)
{
	return ((  RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * (*) (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 *, const RuntimeMethod*))Component_GetComponent_TisRuntimeObject_m15E3130603CE5400743CCCDEE7600FB9EEFAE5C0_gshared)(__this, method);
}
// UnityEngine.Rect UnityEngine.RectTransform::get_rect()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Rect_t35B976DE901B5423C11705E156938EA27AB402CE  RectTransform_get_rect_mE5F283FCB99A66403AC1F0607CA49C156D73A15E (RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * __this, const RuntimeMethod* method);
// UnityEngine.Vector2 UnityEngine.Rect::get_size()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  Rect_get_size_m731642B8F03F6CE372A2C9E2E4A925450630606C (Rect_t35B976DE901B5423C11705E156938EA27AB402CE * __this, const RuntimeMethod* method);
// System.Boolean UnityEngine.Vector2::op_Inequality(UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Vector2_op_Inequality_mC16161C640C89D98A00800924F83FF09FD7C100E (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___lhs0, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___rhs1, const RuntimeMethod* method);
// System.Void UnityEngine.Transform::set_localScale(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Transform_set_localScale_m7ED1A6E5A87CD1D483515B99D6D3121FB92B0556 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// UnityEngine.Vector2 UnityEngine.Vector2::get_zero()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  Vector2_get_zero_mFE0C3213BB698130D6C5247AB4B887A59074D0A8 (const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Columns(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Radius()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.VectorExtensions::ScatterMapping(UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  VectorExtensions_ScatterMapping_mF028279E3B06B380631CABDC90C11AA11081F611 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, float ___radius1, const RuntimeMethod* method);
// !!0 UnityEngine.Component::GetComponentInChildren<UnityEngine.Collider>()
inline Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * Component_GetComponentInChildren_TisCollider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF_m92EFF432C642AEB971AAC3333F7A7170A7CC3318 (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method)
{
	return ((  Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * (*) (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 *, const RuntimeMethod*))Component_GetComponentInChildren_TisRuntimeObject_m2094C39A775FDD39B5FB9B5A77E988F3482DC46B_gshared)(__this, method);
}
// UnityEngine.Bounds UnityEngine.Collider::get_bounds()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  Collider_get_bounds_mD3CB68E38FB998406193A88D18C01F510272058A (Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Bounds::get_size()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Bounds_get_size_m0739F2686AE2D3416A33AEF892653091347FD4A6 (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Mathf::Max(System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Mathf_Max_m670AE0EC1B09ED1A56FF9606B0F954670319CB65 (float ___a0, float ___b1, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection::IterateScatterPacking(System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * ___nodes0, float ___radiusPadding1, const RuntimeMethod* method);
// System.Void System.Comparison`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>::.ctor(System.Object,System.IntPtr)
inline void Comparison_1__ctor_m15AE944F3556CD05B000BF7B327058B44D4B1FB5 (Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	((  void (*) (Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 *, RuntimeObject *, intptr_t, const RuntimeMethod*))Comparison_1__ctor_m3445CDEBFFF4A3A9EAED69CBCC2D247630CA5BD4_gshared)(__this, ___object0, ___method1, method);
}
// System.Void System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>::Sort(System.Comparison`1<!0>)
inline void List_1_Sort_m323C2301497D0BAFC3256EA3601B5F697F0A008D (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * __this, Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 * ___comparison0, const RuntimeMethod* method)
{
	((  void (*) (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE *, Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 *, const RuntimeMethod*))List_1_Sort_mA3939603201EC0E13489EDA5975A07790CEDB483_gshared)(__this, ___comparison0, method);
}
// UnityEngine.Vector3 UnityEngine.Transform::get_localPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Vector2::SqrMagnitude()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector2_SqrMagnitude_mBFCF6C90827FF29E3FA3C2082F8F7F840A09B2FD (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Vector2::Normalize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector2_Normalize_m99A2CC6E4CB65C1B9231F898D5B7A12B6D72E722 (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_Multiply(UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, float ___d1, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::get_sqrMagnitude()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, const RuntimeMethod* method);
// System.Int32 System.Single::CompareTo(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Single_CompareTo_mFBF2345D81E00F834E558A4ACFD4E5137582DBBC (float* __this, float ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::Lerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_Lerp_m5BA75496B803820CC64079383956D73C6FD4A8A1 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, float ___t2, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_Slerp_m56DE173C3520C83DF3F1C6EDFA82FF88A2C9E756 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___a0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___b1, float ___t2, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::RecalculateBounds()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Camera::get_aspect()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Camera_get_aspect_m2ADA7982754920C3B58B4DB664801D6F2416E0C6 (Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Camera::get_fieldOfView()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Camera_get_fieldOfView_m065A50B70AC3661337ACA482DDEFA29CCBD249D6 (Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_Start_m0CEF9100BB0981E30F791222FF24D030D176505D (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_CurrentScalePercent()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method);
// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_TransformTarget()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_FovScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_AltScale()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851A_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_localScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_localScale_mD8F631021C2D62B7C341B1A17FA75491F64E13DA (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed::SetGoal(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector3Smoothed_SetGoal_m9C7BF69C97208D6AB4BD4B19A4A8ECDE8705B7BF (Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___newGoal0, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::Distance(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_Distance_mE316E10B9B319A5C2A29F86E028740FD528149E7 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, const RuntimeMethod* method);
// System.Single UnityEngine.Mathf::Clamp(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507 (float ___value0, float ___min1, float ___max2, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::set_GoalScale(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_set_GoalScale_m923D113233485CD56065FE83C453CC21218B20BB (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Single UnityEngine.Mathf::InverseLerp(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Mathf_InverseLerp_m7054CDF25056E9B27D2467F91C95D628508F1F31 (float ___a0, float ___b1, float ___value2, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_CurrentDistancePercent(System.Single)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_CurrentScalePercent(System.Single)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_DeltaTime()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_ScaleState(Microsoft.MixedReality.Toolkit.Utilities.ScaleState)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, int32_t ___value0, const RuntimeMethod* method);
// UnityEngine.Transform UnityEngine.Transform::get_root()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Transform_get_root_m101A8B5C2CC6D868B6B66EEDBD5336FC1EB5DDD6 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_zero()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2 (const RuntimeMethod* method);
// System.Void UnityEngine.Bounds::.ctor(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Bounds__ctor_m294E77A20EC1A3E96985FE1A925CB271D1B5266D (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___center0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___size1, const RuntimeMethod* method);
// !!0[] UnityEngine.Component::GetComponentsInChildren<UnityEngine.Renderer>()
inline RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9 (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method)
{
	return ((  RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* (*) (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 *, const RuntimeMethod*))Component_GetComponentsInChildren_TisRuntimeObject_m96A4AA0545C19F58121E6C5142474CB26EAB9717_gshared)(__this, method);
}
// UnityEngine.Bounds UnityEngine.Renderer::get_bounds()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  Renderer_get_bounds_mB29E41E26DD95939C09F3EC67F5B2793A438BDB5 (Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Bounds::Encapsulate(UnityEngine.Bounds)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Bounds_Encapsulate_m394E7F823ADE56B97E6723B645C9458F1ADF0089 (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  ___bounds0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Bounds::get_extents()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Bounds_get_extents_mBA4B2196036DD5A858BDAD53BC71A778B41841C9 (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::get_magnitude()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver__ctor_m45C1467BE22F4DD1541D08434DD5A046F1099CAC (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem Microsoft.MixedReality.Toolkit.CoreServices::get_InputSystem()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8 (const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Input.SourceStateEventData::get_Controller()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR RuntimeObject* SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline (SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * __this, const RuntimeMethod* method);
// System.Void System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.Handedness>::.ctor(!0)
inline void Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 * __this, uint8_t ___value0, const RuntimeMethod* method)
{
	((  void (*) (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *, uint8_t, const RuntimeMethod*))Nullable_1__ctor_mA37A97B81445268412FC4754069FD1AD7ED89B8E_gshared)(__this, ___value0, method);
}
// !0 System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.Handedness>::GetValueOrDefault()
inline uint8_t Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_inline (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 * __this, const RuntimeMethod* method)
{
	return ((  uint8_t (*) (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *, const RuntimeMethod*))Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EB_gshared_inline)(__this, method);
}
// System.Boolean System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.Handedness>::get_HasValue()
inline bool Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_inline (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 * __this, const RuntimeMethod* method)
{
	return ((  bool (*) (Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *, const RuntimeMethod*))Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4F_gshared_inline)(__this, method);
}
// System.Collections.Generic.HashSet`1/Enumerator<!0> System.Collections.Generic.HashSet`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>::GetEnumerator()
inline Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416 (HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * __this, const RuntimeMethod* method)
{
	return ((  Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  (*) (HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 *, const RuntimeMethod*))HashSet_1_GetEnumerator_m874F2BBF69C804D425AFCF30B376C9718AA298B5_gshared)(__this, method);
}
// !0 System.Collections.Generic.HashSet`1/Enumerator<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>::get_Current()
inline RuntimeObject* Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_inline (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD * __this, const RuntimeMethod* method)
{
	return ((  RuntimeObject* (*) (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *, const RuntimeMethod*))Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5F_gshared_inline)(__this, method);
}
// System.Boolean System.Collections.Generic.HashSet`1/Enumerator<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>::MoveNext()
inline bool Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992 (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD * __this, const RuntimeMethod* method)
{
	return ((  bool (*) (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *, const RuntimeMethod*))Enumerator_MoveNext_m3C52626EAD0998616A661D927B94DD52E67118D4_gshared)(__this, method);
}
// System.Void System.Collections.Generic.HashSet`1/Enumerator<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController>::Dispose()
inline void Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD * __this, const RuntimeMethod* method)
{
	((  void (*) (Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *, const RuntimeMethod*))Enumerator_Dispose_mE2BD5476A999119F49555D958386A0688E9C0C01_gshared)(__this, method);
}
// System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 * ___x0, Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 * ___y1, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::ShouldShowIndicator()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70 (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::SetIndicatorVisibility(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, bool ___showIndicator0, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.CameraExtensions::GetHorizontalFieldOfViewDegrees(UnityEngine.Camera)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float CameraExtensions_GetHorizontalFieldOfViewDegrees_m6B1F37E65453362A8F58A9410D223A9611041563 (Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * ___camera0, const RuntimeMethod* method);
// System.Single UnityEngine.Camera::get_nearClipPlane()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Camera_get_nearClipPlane_mD9D3E3D27186BBAC2CC354CE3609E6118A5BF66C (Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * __this, const RuntimeMethod* method);
// System.Single UnityEngine.Camera::get_farClipPlane()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Camera_get_farClipPlane_mF51F1FF5BE87719CFAC293E272B1138DC1EFFD4B (Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.MathUtilities::IsInFOV(UnityEngine.Vector3,UnityEngine.Transform,System.Single,System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool MathUtilities_IsInFOV_mA2F9EFE9F654D701DA4AE2C40C77D80492923300 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___testPosition0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___frameOfReference1, float ___verticalFOV2, float ___horizontalFOV3, float ___minPlaneDistance4, float ___maxPlaneDistance5, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::set_UpdateSolvers(System.Boolean)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BB_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, bool ___value0, const RuntimeMethod* method);
// System.Void UnityEngine.Renderer::set_enabled(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Renderer_set_enabled_m0933766657F2685BAAE3340B0A984C0E63925303 (Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * __this, bool ___value0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_forward()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_normalized()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_UnaryNegation(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::ProjectOnPlane(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_ProjectOnPlane_mAF89645654808BBD9754610879F94A2B3323D206 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___vector0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___planeNormal1, const RuntimeMethod* method);
// System.Boolean UnityEngine.Vector3::op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Vector3_op_Equality_mA9E2F96E98E71AE7ACCE74766D700D41F0404806 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___lhs0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rhs1, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_right()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_right_mC32CE648E98D3D4F62F897A2751EE567C7C0CFB0 (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::set_GoalPosition(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_set_GoalPosition_mA4209D5D63BDC3ACFA8D2B57CAE4440112C7D2A0 (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::set_GoalRotation(UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_set_GoalRotation_mD9DA2B8177E59A95991E10A791208842451CB80E (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___value0, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::Angle(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_Angle_m8911FFA1DD1C8C46D923B52645B352FA1521CD5F (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___from0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___to1, const RuntimeMethod* method);
// System.Single UnityEngine.Mathf::Lerp(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Mathf_Lerp_m9A74C5A0C37D0CDF45EE66E7774D12A9B93B1364 (float ___a0, float ___b1, float ___t2, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::RecalculateBoundsExtents()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Int32 UnityEngine.Mathf::Clamp(System.Int32,System.Int32,System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Mathf_Clamp_mE1EA15D719BF2F632741D42DF96F0BC797A20389 (int32_t ___value0, int32_t ___min1, int32_t ___max2, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::GetBounds(UnityEngine.GameObject,Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType,UnityEngine.Bounds&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D (GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___target0, int32_t ___angularClampType1, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___bounds2, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::get_identity()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64 (const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_OnEnable_m2C1DAD96179B3122345E5D8E147F4A0C9906E4E4 (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::GetReferenceInfo(UnityEngine.Vector3&,UnityEngine.Quaternion&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refPosition0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___refRotation1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refForward2, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::get_WorkingPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Solver_get_WorkingPosition_m2CF2F7B4E2C341A65E4246DF24E91B69FA826795 (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_DefaultDistance()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngularClamp(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refPosition0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___refRotation1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___currentPosition2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refForward3, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::DistanceClamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___currentPosition0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refPosition1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refForward2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___clampedPosition3, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::ComputeOrientation(UnityEngine.Vector3,System.Boolean,UnityEngine.Quaternion&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goalPosition0, bool ___wasClamped1, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___orientation2, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::get_WorkingScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Solver_get_WorkingScale_m7D7C2320471D6CEA07A631BF5CAE504668E0075E (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::UpdateWorkingPositionToGoal()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_UpdateWorkingPositionToGoal_m37637FDAE4188DE06EB2436E8647CDA3E853BDFA (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::UpdateWorkingRotationToGoal()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Solver_UpdateWorkingRotationToGoal_m703152C16912206024090C82BF1EFC998BE51D3F (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Vector3::Normalize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::Cross(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___lhs0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rhs1, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::Dot(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_Dot_m0C530E1C51278DE28B77906D56356506232272C1 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___lhs0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rhs1, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::SimplifyAngle(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___angle0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_right()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_right_m6DD9559CA0C75BBA42D9140021C4C2A9AAA9B3F5 (const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_IgnoreReferencePitchAndRoll()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngleBetweenOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___from0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___to1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___normal2, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::AngleAxis(System.Single,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0 (float ___angle0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis1, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::op_Multiply(UnityEngine.Quaternion,UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___lhs0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rhs1, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxViewVerticalDegrees()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Transform::get_eulerAngles()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Transform_get_eulerAngles_mF2D798FA8B18F7A1A0C4A2198329ADBAF07E37CA (Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * __this, const RuntimeMethod* method);
// System.Int32 UnityEngine.Mathf::RoundToInt(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Mathf_RoundToInt_m0EAD8BD38FCB72FA1D8A04E96337C820EC83F041 (float ___f0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Quaternion::get_eulerAngles()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Quaternion_get_eulerAngles_mF8ABA8EB77CD682017E92F0F457374E54BC943F9 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::Euler(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_Euler_m537DD6CEAE0AD4274D8A84414C24C30730427D05 (float ___x0, float ___y1, float ___z2, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngleBetweenVectorAndPlane(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___vec0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___normal1, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxViewHorizontalDegrees()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_PitchOffset()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MinDistance()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxDistance()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::op_Division(UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_op_Division_mDF34F1CC445981B4D1137765BC6277419E561624 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, float ___d1, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_VerticalMaxDistance()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_ReferencePosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::Vector3EqualEpsilon(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___x0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___y1, float ___eps2, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_OrientationType()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_OrientToControllerDeadzoneDegrees()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_FaceUserDefinedTargetTransform()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_TargetToFace()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.AxisFlags Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_PivotAxis()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.AxisFlagsExtensions::IsMaskSet(Microsoft.MixedReality.Toolkit.Utilities.AxisFlags,Microsoft.MixedReality.Toolkit.Utilities.AxisFlags)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool AxisFlagsExtensions_IsMaskSet_m8EBA7A31AEC86DA4FD25AD8F559E467A1C48A66D (int32_t ___a0, int32_t ___b1, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::LookRotation(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___forward0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_FaceTrackedObjectWhileClamped()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_ReferenceRotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method);
// System.String System.String::Concat(System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_mB78D0094592718DA6D5DB6C712A9C225631666BE (String_t* ___str00, String_t* ___str11, const RuntimeMethod* method);
// UnityEngine.LayerMask UnityEngine.LayerMask::op_Implicit(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0  LayerMask_op_Implicit_m3F256A7D96C66548F5B62C4621B9725301850300 (int32_t ___intVal0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.BoundsExtensions::GetRenderBounds(UnityEngine.GameObject,UnityEngine.Bounds&,UnityEngine.LayerMask)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool BoundsExtensions_GetRenderBounds_m1DB44BE8CF53329B304BEE24B058634EECB26F07 (GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___target0, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___bounds1, LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0  ___ignoreLayers2, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.BoundsExtensions::GetColliderBounds(UnityEngine.GameObject,UnityEngine.Bounds&,UnityEngine.LayerMask)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool BoundsExtensions_GetColliderBounds_m717659BB944D983D6B2770988F2A57EDC9E9A74B (GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___target0, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___bounds1, LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0  ___ignoreLayers2, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_TrackedTargetType()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_CurrentTrackedHandedness()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR uint8_t SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::GetController(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1 (uint8_t ___handedness0, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.HandednessExtensions::GetOppositeHandedness(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint8_t HandednessExtensions_GetOppositeHandedness_mF92A15A497E5A29847A1E4AC5E5BD28C986F0D4C (uint8_t ___current0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::set_PreferredTrackedHandedness(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SolverHandler_set_PreferredTrackedHandedness_m59D94082674DA2175A03D3A0E860A84748919B7A (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, uint8_t ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::RefreshTrackedObject()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SolverHandler_RefreshTrackedObject_mB31FEAB6C2B34BED750A1AA44AE2FAD8D6A25245 (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.HandednessExtensions::IsNone(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A (uint8_t ___current0, const RuntimeMethod* method);
// UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Coroutine_tAE7DB2FC70A0AE6477F896F852057CB0754F06EC * MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7 (MonoBehaviour_t4A60845CF505405AF8BE8C61CC07F75CADEF6429 * __this, RuntimeObject* ___routine0, const RuntimeMethod* method);
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnFirstHandDetected()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Events.UnityEvent::Invoke()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325 (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * __this, const RuntimeMethod* method);
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnHandActivate()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnLastHandLost()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnHandDeactivate()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds> Microsoft.MixedReality.Toolkit.Input.HandBounds::get_LocalBounds()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4_inline (HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * __this, const RuntimeMethod* method);
// System.Boolean System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds>::TryGetValue(!0,!1&)
inline bool Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141 (Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * __this, uint8_t ___key0, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___value1, const RuntimeMethod* method)
{
	return ((  bool (*) (Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 *, uint8_t, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *, const RuntimeMethod*))Dictionary_2_TryGetValue_m0A921D41F0B350F77239ABCCE69572F83309B3E4_gshared)(__this, ___key0, ___value1, method);
}
// System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose> Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::GetPalmPose(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898 (RuntimeObject* ___hand0, const RuntimeMethod* method);
// System.Boolean System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::get_HasValue()
inline bool Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_inline (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, const RuntimeMethod* method)
{
	return ((  bool (*) (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *, const RuntimeMethod*))Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_gshared_inline)(__this, method);
}
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OffsetBehavior()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// UnityEngine.Ray Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalPositionRay(UnityEngine.Vector3,UnityEngine.Transform,Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___origin0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___targetTransform1, RuntimeObject* ___hand2, int32_t ___handSafeZone3, int32_t ___offsetBehavior4, float ___angleOffset5, const RuntimeMethod* method);
// System.Void UnityEngine.Bounds::Expand(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Bounds_Expand_m3FB9436F88DFE0FB57ECF6B1C4B2EDF9589346DA (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, float ___amount0, const RuntimeMethod* method);
// !0 System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::get_Value()
inline MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04 (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, const RuntimeMethod* method)
{
	return ((  MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  (*) (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *, const RuntimeMethod*))Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_gshared)(__this, method);
}
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::get_Rotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  MixedRealityPose_get_Rotation_m6A888CC2D81BE74348C5C556880E83DA4418C846 (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::Inverse(UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_Inverse_mC3A78571A826F05CE179637E675BD25F8B203E0C (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rotation0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Ray::get_origin()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Ray_get_origin_m3773CA7B1E2F26F6F1447652B485D86C0BEC5187 (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::get_Position()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Ray::set_origin(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Ray_set_origin_m6E0F02140356CBC1BA9B448CBBA065AAB492A132 (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Ray::get_direction()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Ray::set_direction(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Ray_set_direction_mD4D0EA72276CF43ABFE2C190DFD24930ED977D8B (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Boolean UnityEngine.Bounds::IntersectRay(UnityEngine.Ray,System.Single&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Bounds_IntersectRay_m11E700B1AE0EAE3568379B999D1FBFEDEEB56EC7 (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  ___ray0, float* ___distance1, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_ForwardOffset()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::get_GoalPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Solver_get_GoalPosition_mF9338C0233F665879FA53CEE46E48B571988756B (Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_AdditionalRotation()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.HandednessExtensions::IsRight(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandednessExtensions_IsRight_mB93D3FACC0DE8F40C91BC945403DD1014C785363 (uint8_t ___current0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::.ctor(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, int32_t ___U3CU3E1__state0, const RuntimeMethod* method);
// System.Collections.Generic.Dictionary`2<Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Bounds> Microsoft.MixedReality.Toolkit.Input.HandBounds::get_Bounds()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_inline (HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Bounds::Expand(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Bounds_Expand_mB181AD8DCDE6A018DFC196528CC5002CA7EBCF0A (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___amount0, const RuntimeMethod* method);
// System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Bounds_Intersects_m7B1398FDAC8ECA19677D0956E67FF92EB0BADA9E (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * __this, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  ___bounds0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsPalmFacingCamera(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128 (RuntimeObject* ___hand0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.HandednessExtensions::IsLeft(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandednessExtensions_IsLeft_m2A5BCC78504AA7985A0220F5A511CBB63523B719 (uint8_t ___current0, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::get_Forward()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  MixedRealityPose_get_Forward_m8AC3F48E50D7917797E641BD9FBF7FB35074DC0E (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose::get_Up()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  MixedRealityPose_get_Up_mB950FA9059CBB6EEE53990F744D5B30C756A63C0 (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Ray::.ctor(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Ray__ctor_m695D219349B8AA4C82F96C55A27D384C07736F6B (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___origin0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___direction1, const RuntimeMethod* method);
// UnityEngine.Ray Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateRayForSafeZone(UnityEngine.Vector3,UnityEngine.Transform,Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___origin0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___targetTransform1, RuntimeObject* ___hand2, int32_t ___handSafeZone3, int32_t ___offsetBehavior4, float ___angleOffset5, const RuntimeMethod* method);
// System.Int32 UnityEngine.Mathf::FloorToInt(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Mathf_FloorToInt_m0C42B64571CE92A738AD7BB82388CE12FBE7457C (float ___f0, const RuntimeMethod* method);
// System.Int32 System.Array::IndexOf<Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone>(!!0[],!!0)
inline int32_t Array_IndexOf_TisSolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5_m0212C0F4B0CA593D89081B9D01E9CC0363E9B60A (SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* ___array0, int32_t ___value1, const RuntimeMethod* method)
{
	return ((  int32_t (*) (SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90*, int32_t, const RuntimeMethod*))Array_IndexOf_TisInt32Enum_t6312CE4586C17FE2E2E513D2E7655B574F10FDCD_mD060960651C0FA233C07C1A2661087BC323B5610_gshared)(___array0, ___value1, method);
}
// System.Void System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose>::.ctor(!0)
inline void Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8 (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___value0, const RuntimeMethod* method)
{
	((  void (*) (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 , const RuntimeMethod*))Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8_gshared)(__this, ___value0, method);
}
// System.Boolean Microsoft.MixedReality.Toolkit.HandednessExtensions::IsMatch(Microsoft.MixedReality.Toolkit.Utilities.Handedness,Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandednessExtensions_IsMatch_mB143A26B3E75502CFDC2F6B846A2832033299813 (uint8_t ___current0, uint8_t ___compare1, const RuntimeMethod* method);
// !!0 UnityEngine.Component::GetComponent<Microsoft.MixedReality.Toolkit.Input.HandBounds>()
inline HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * Component_GetComponent_TisHandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E_m4C730F9D6CDB58BF40E7306BEDB928C9CA4DB376 (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 * __this, const RuntimeMethod* method)
{
	return ((  HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * (*) (Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621 *, const RuntimeMethod*))Component_GetComponent_TisRuntimeObject_m15E3130603CE5400743CCCDEE7600FB9EEFAE5C0_gshared)(__this, method);
}
// System.Void UnityEngine.Events.UnityEvent::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UnityEvent__ctor_m2F8C02F28E289CA65598FF4FA8EAB84D955FF028 (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * __this, const RuntimeMethod* method);
// System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array,System.RuntimeFieldHandle)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void RuntimeHelpers_InitializeArray_m29F50CDFEEE0AB868200291366253DD4737BC76A (RuntimeArray * ___array0, RuntimeFieldHandle_t844BDF00E8E6FE69D9AEAA7657F09018B864F4EF  ___fldHandle1, const RuntimeMethod* method);
// System.Void System.NotSupportedException::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void NotSupportedException__ctor_mA121DE1CAC8F25277DEB489DC7771209D91CAE33 (NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010 * __this, const RuntimeMethod* method);
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FacingCameraTrackingThreshold()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_inline (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FacingCameraTrackingThreshold(System.Single)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_inline (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsValidController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, RuntimeObject* ___controller0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::IsPalmMeetingThresholdRequirements(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___palmPose1, float ___palmCameraAngle2, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_RotationBehavior(Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OffsetBehavior(Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler::get_UpdateSolvers()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::IsUserGazeMeetingThresholdRequirements(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Input.InputRayUtils::TryGetRay(Microsoft.MixedReality.Toolkit.Input.InputSourceType,Microsoft.MixedReality.Toolkit.Utilities.Handedness,UnityEngine.Ray&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool InputRayUtils_TryGetRay_m90ECCB18366EF1AF38E75715F51C33DDD071ED01 (int32_t ___sourceType0, uint8_t ___hand1, Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 * ___ray2, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::TryGenerateHandPlaneAndActivationPoint(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,UnityEngine.Plane&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * ___handPlane1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___activationPoint2, const RuntimeMethod* method);
// System.Boolean UnityEngine.Plane::Raycast(UnityEngine.Ray,System.Single&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Plane_Raycast_m04E61D7C78A5DA70F4F73F9805ABB54177B799A9 (Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * __this, Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  ___ray0, float* ___enter1, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Plane::ClosestPointOnPlane(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Plane_ClosestPointOnPlane_m5BD59F43459CAC4A3CEA9F763455C23E3162A4AE (Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___point0, const RuntimeMethod* method);
// System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::WorldLockedReattachCheck()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method);
// System.Void UnityEngine.Plane::.ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Plane__ctor_m231D58E7BD9DADE44EFD56F5B13677CF81ACD64C (Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___c2, const RuntimeMethod* method);
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::TryGenerateActivationPoint(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___activationPoint1, const RuntimeMethod* method);
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_SafeZone()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp/<WorldLockedReattachCheck>d__42::.ctor(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void U3CWorldLockedReattachCheckU3Ed__42__ctor_mB072D2A912BD0F48ECFC2C53B3CB50FBF67EA974 (U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0 * __this, int32_t ___U3CU3E1__state0, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method);
// System.Void System.ThrowHelper::ThrowArgumentOutOfRangeException()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ThrowHelper_ThrowArgumentOutOfRangeException_mBA2AF20A35144E0C43CD721A22EAC9FCA15D6550 (const RuntimeMethod* method);
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic::SmoothPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  DefaultTransformSmoothingLogic_SmoothPosition_mAD11D462EB3A29B478A9D976B82A8B6934070D5B (DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goal1, float ___lerpTime2, float ___deltaTime3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DefaultTransformSmoothingLogic_SmoothPosition_mAD11D462EB3A29B478A9D976B82A8B6934070D5B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___source0), (&___goal1), (&___lerpTime2), (&___deltaTime3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DefaultTransformSmoothingLogic_SmoothPosition_mAD11D462EB3A29B478A9D976B82A8B6934070D5B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1588));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1589));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1590));
		// return Smoothing.SmoothTo(source, goal, lerpTime, deltaTime);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1591));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___source0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___goal1;
		float L_2 = ___lerpTime2;
		float L_3 = ___deltaTime3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1593));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0(L_0, L_1, L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1593));
		V_0 = L_4;
		goto IL_000e;
	}

IL_000e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1592));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = V_0;
		return L_5;
	}
}
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic::SmoothRotation(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  DefaultTransformSmoothingLogic_SmoothRotation_mB84EA832634EA505C87D98105D40B0B821EE94F0 (DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0 * __this, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___source0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___goal1, float ___slerpTime2, float ___deltaTime3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DefaultTransformSmoothingLogic_SmoothRotation_mB84EA832634EA505C87D98105D40B0B821EE94F0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___source0), (&___goal1), (&___slerpTime2), (&___deltaTime3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DefaultTransformSmoothingLogic_SmoothRotation_mB84EA832634EA505C87D98105D40B0B821EE94F0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1594));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1595));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1596));
		// return Smoothing.SmoothTo(source, goal, slerpTime, deltaTime);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1597));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_0 = ___source0;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_1 = ___goal1;
		float L_2 = ___slerpTime2;
		float L_3 = ___deltaTime3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1599));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_4 = Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E(L_0, L_1, L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1599));
		V_0 = L_4;
		goto IL_000e;
	}

IL_000e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1598));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_5 = V_0;
		return L_5;
	}
}
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic::SmoothScale(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  DefaultTransformSmoothingLogic_SmoothScale_mF04160253EDB42A47F8AF3C6D7F3A932238A9CD4 (DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goal1, float ___lerpTime2, float ___deltaTime3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DefaultTransformSmoothingLogic_SmoothScale_mF04160253EDB42A47F8AF3C6D7F3A932238A9CD4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___source0), (&___goal1), (&___lerpTime2), (&___deltaTime3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DefaultTransformSmoothingLogic_SmoothScale_mF04160253EDB42A47F8AF3C6D7F3A932238A9CD4_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1600));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1601));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1602));
		// return Smoothing.SmoothTo(source, goal, lerpTime, deltaTime);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1603));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___source0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___goal1;
		float L_2 = ___lerpTime2;
		float L_3 = ___deltaTime3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1605));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0(L_0, L_1, L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1605));
		V_0 = L_4;
		goto IL_000e;
	}

IL_000e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1604));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = V_0;
		return L_5;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.DefaultTransformSmoothingLogic::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DefaultTransformSmoothingLogic__ctor_mFEEB60E336ADBEE5F298951AC5989F439DF37B74 (DefaultTransformSmoothingLogic_t9242FF33F5EDB13226C032ADED70BC6E64EED2E0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DefaultTransformSmoothingLogic__ctor_mFEEB60E336ADBEE5F298951AC5989F439DF37B74_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DefaultTransformSmoothingLogic__ctor_mFEEB60E336ADBEE5F298951AC5989F439DF37B74_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1400));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1401));
	{
		// public bool Enabled = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1402));
		__this->set_Enabled_0((bool)0);
		// public AnimationCurve Curve = AnimationCurve.Linear(0, 1, 1, 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1403));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1410));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_0 = AnimationCurve_Linear_m1391DBE6C481643128387302FAB1142D1F13438A((0.0f), (1.0f), (1.0f), (1.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1410));
		__this->set_Curve_1(L_0);
		// public float LerpTime = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1404));
		__this->set_LerpTime_2((0.5f));
		// private float timer = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1405));
		__this->set_timer_3((0.5f));
		// public Easing()
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1406));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1411));
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1411));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1407));
		// Stop();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1408));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1412));
		Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1412));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1409));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.Easing Microsoft.MixedReality.Toolkit.Utilities.Easing::Copy()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Easing_t13E61FF806357D21552C3028585751420EDCD360 * Easing_Copy_m2CE22F56D661CDEEF33B0086364B4FB423B7B8B2 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_Copy_m2CE22F56D661CDEEF33B0086364B4FB423B7B8B2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Easing_t13E61FF806357D21552C3028585751420EDCD360 * V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_Copy_m2CE22F56D661CDEEF33B0086364B4FB423B7B8B2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1413));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1414));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1415));
		// return new Easing()
		// {
		//     Curve = this.Curve,
		//     Enabled = this.Enabled,
		//     LerpTime = this.LerpTime,
		// };
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1416));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1418));
		Easing_t13E61FF806357D21552C3028585751420EDCD360 * L_0 = (Easing_t13E61FF806357D21552C3028585751420EDCD360 *)il2cpp_codegen_object_new(Easing_t13E61FF806357D21552C3028585751420EDCD360_il2cpp_TypeInfo_var);
		Easing__ctor_m803E93E5261AC67CBDE762AAD399BF7E8BB86A75(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1418));
		Easing_t13E61FF806357D21552C3028585751420EDCD360 * L_1 = L_0;
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_2 = __this->get_Curve_1();
		NullCheck(L_1);
		L_1->set_Curve_1(L_2);
		Easing_t13E61FF806357D21552C3028585751420EDCD360 * L_3 = L_1;
		bool L_4 = __this->get_Enabled_0();
		NullCheck(L_3);
		L_3->set_Enabled_0(L_4);
		Easing_t13E61FF806357D21552C3028585751420EDCD360 * L_5 = L_3;
		float L_6 = __this->get_LerpTime_2();
		NullCheck(L_5);
		L_5->set_LerpTime_2(L_6);
		V_0 = L_5;
		goto IL_002d;
	}

IL_002d:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1417));
		Easing_t13E61FF806357D21552C3028585751420EDCD360 * L_7 = V_0;
		return L_7;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::OnUpdate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing_OnUpdate_mA6B09E77C4D71046C7E2C7E0E95115C39E1054F0 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_OnUpdate_mA6B09E77C4D71046C7E2C7E0E95115C39E1054F0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_OnUpdate_mA6B09E77C4D71046C7E2C7E0E95115C39E1054F0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1419));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1420));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1421));
		// if (timer < LerpTime)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1422));
		float L_0 = __this->get_timer_3();
		float L_1 = __this->get_LerpTime_2();
		V_0 = (bool)((((float)L_0) < ((float)L_1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1423));
		bool L_2 = V_0;
		if (!L_2)
		{
			goto IL_0032;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1424));
		// timer = Mathf.Min(timer + Time.deltaTime, LerpTime);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1425));
		float L_3 = __this->get_timer_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1428));
		float L_4 = Time_get_deltaTime_m16F98FC9BA931581236008C288E3B25CBCB7C81E(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1428));
		float L_5 = __this->get_LerpTime_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1429));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_6 = Mathf_Min_mCF9BE0E9CAC9F18D207692BB2DAC7F3E1D4E1CB7(((float)il2cpp_codegen_add((float)L_3, (float)L_4)), L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1429));
		__this->set_timer_3(L_6);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1426));
	}

IL_0032:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1427));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing_Start_mCD043C274909CE53824E2AD14A4763770F327A50 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_Start_mCD043C274909CE53824E2AD14A4763770F327A50_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_Start_mCD043C274909CE53824E2AD14A4763770F327A50_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1430));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1431));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1432));
		// timer = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1433));
		__this->set_timer_3((0.0f));
		// if (!Enabled)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1434));
		bool L_0 = __this->get_Enabled_0();
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1435));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0027;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1436));
		// timer = LerpTime;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1437));
		float L_2 = __this->get_LerpTime_2();
		__this->set_timer_3(L_2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1438));
	}

IL_0027:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1439));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Easing::IsPlaying()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Easing_IsPlaying_mD9796731BAE0880DE22C6DC90633AA955A771901 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_IsPlaying_mD9796731BAE0880DE22C6DC90633AA955A771901_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_IsPlaying_mD9796731BAE0880DE22C6DC90633AA955A771901_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1440));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1441));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1442));
		// return timer < LerpTime;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1443));
		float L_0 = __this->get_timer_3();
		float L_1 = __this->get_LerpTime_2();
		V_0 = (bool)((((float)L_0) < ((float)L_1))? 1 : 0);
		goto IL_0012;
	}

IL_0012:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1444));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::Stop()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_Stop_m733306E0BDD8F1D9F6B06F94882280CE76FD8403_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1445));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1446));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1447));
		// timer = LerpTime;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1448));
		float L_0 = __this->get_LerpTime_2();
		__this->set_timer_3(L_0);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1449));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Easing::GetLinear()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1450));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1451));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1452));
		// return timer / LerpTime;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1453));
		float L_0 = __this->get_timer_3();
		float L_1 = __this->get_LerpTime_2();
		V_0 = ((float)((float)L_0/(float)L_1));
		goto IL_0011;
	}

IL_0011:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1454));
		float L_2 = V_0;
		return L_2;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Easing::GetCurved()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Easing_GetCurved_m9D5584ABEA8C9BAFA1413C9AF5489F218118C927 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_GetCurved_m9D5584ABEA8C9BAFA1413C9AF5489F218118C927_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_GetCurved_m9D5584ABEA8C9BAFA1413C9AF5489F218118C927_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1455));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1456));
	float G_B3_0 = 0.0f;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1457));
		// return IsLinear() ? GetLinear() : Curve.Evaluate(GetLinear());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1458));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1460));
		bool L_0 = Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1460));
		if (L_0)
		{
			goto IL_001c;
		}
	}
	{
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_1 = __this->get_Curve_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1461));
		float L_2 = Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1461));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1462));
		NullCheck(L_1);
		float L_3 = AnimationCurve_Evaluate_m51CAA6B1C54B7EF44FE4D74B422C1DA1FA6F8776(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1462));
		G_B3_0 = L_3;
		goto IL_0022;
	}

IL_001c:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1463));
		float L_4 = Easing_GetLinear_m960B662F0F62EB2F8DE46E75E0BDDF5157286BFD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1463));
		G_B3_0 = L_4;
	}

IL_0022:
	{
		V_0 = G_B3_0;
		goto IL_0025;
	}

IL_0025:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1459));
		float L_5 = V_0;
		return L_5;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Easing::IsLinear()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26 (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	bool V_2 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_IsLinear_m1E30DA79DFA1C76D4B6891747BCAFC5A79431A26_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1464));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1465));
	int32_t G_B6_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1466));
		// if (cachedKeys == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1467));
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_0 = __this->get_cachedKeys_4();
		V_0 = (bool)((((RuntimeObject*)(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D*)L_0) == ((RuntimeObject*)(RuntimeObject *)NULL))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1468));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0021;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1469));
		// cachedKeys = Curve.keys;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1470));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_2 = __this->get_Curve_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1478));
		NullCheck(L_2);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_3 = AnimationCurve_get_keys_m88E1848D255C2893F379E855A522DA9B0E0F78FB(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1478));
		__this->set_cachedKeys_4(L_3);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1471));
	}

IL_0021:
	{
		// if (cachedKeys.Length > 1)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1472));
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_4 = __this->get_cachedKeys_4();
		NullCheck(L_4);
		V_1 = (bool)((((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_4)->max_length))))) > ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1473));
		bool L_5 = V_1;
		if (!L_5)
		{
			goto IL_0067;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1474));
		// return (cachedKeys[0].value == 1 && cachedKeys[1].value == 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1475));
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_6 = __this->get_cachedKeys_4();
		NullCheck(L_6);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1479));
		float L_7 = Keyframe_get_value_m0DD3FAD00F43E7018FECBD011B04310E25C590FD((Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 *)((L_6)->GetAddressAt(static_cast<il2cpp_array_size_t>(0))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1479));
		if ((!(((float)L_7) == ((float)(1.0f)))))
		{
			goto IL_0063;
		}
	}
	{
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_8 = __this->get_cachedKeys_4();
		NullCheck(L_8);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1480));
		float L_9 = Keyframe_get_value_m0DD3FAD00F43E7018FECBD011B04310E25C590FD((Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 *)((L_8)->GetAddressAt(static_cast<il2cpp_array_size_t>(1))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1480));
		G_B6_0 = ((((float)L_9) == ((float)(1.0f)))? 1 : 0);
		goto IL_0064;
	}

IL_0063:
	{
		G_B6_0 = 0;
	}

IL_0064:
	{
		V_2 = (bool)G_B6_0;
		goto IL_006b;
	}

IL_0067:
	{
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1476));
		V_2 = (bool)0;
		goto IL_006b;
	}

IL_006b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1477));
		bool L_10 = V_2;
		return L_10;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Easing::SetCurve(Microsoft.MixedReality.Toolkit.Utilities.Easing/BasicEaseCurves)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Easing_SetCurve_m2FF160EB0297CE2CE1BDC50BD7C247186A2035DE (Easing_t13E61FF806357D21552C3028585751420EDCD360 * __this, int32_t ___curve0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Easing_SetCurve_m2FF160EB0297CE2CE1BDC50BD7C247186A2035DE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * V_0 = NULL;
	int32_t V_1 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___curve0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Easing_SetCurve_m2FF160EB0297CE2CE1BDC50BD7C247186A2035DE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1481));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1482));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1483));
		// AnimationCurve animation = AnimationCurve.Linear(0, 1, 1, 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1484));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1497));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_0 = AnimationCurve_Linear_m1391DBE6C481643128387302FAB1142D1F13438A((0.0f), (1.0f), (1.0f), (1.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1497));
		V_0 = L_0;
		// switch (curve)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1485));
		int32_t L_1 = ___curve0;
		V_1 = L_1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1486));
		int32_t L_2 = V_1;
		switch (((int32_t)il2cpp_codegen_subtract((int32_t)L_2, (int32_t)1)))
		{
			case 0:
			{
				goto IL_0036;
			}
			case 1:
			{
				goto IL_007a;
			}
			case 2:
			{
				goto IL_00be;
			}
		}
	}
	{
		goto IL_00da;
	}

IL_0036:
	{
		// animation = new AnimationCurve(new Keyframe(0, 0), new Keyframe(1, 1, 2.5f, 0));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1487));
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_3 = (KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D*)(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D*)SZArrayNew(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D_il2cpp_TypeInfo_var, (uint32_t)2);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_4 = L_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1498));
		Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  L_5;
		memset((&L_5), 0, sizeof(L_5));
		Keyframe__ctor_m0EA9CF8E65F32EE7603302E2CC670C56DC177C13((&L_5), (0.0f), (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1498));
		NullCheck(L_4);
		(L_4)->SetAt(static_cast<il2cpp_array_size_t>(0), (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 )L_5);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_6 = L_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1499));
		Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  L_7;
		memset((&L_7), 0, sizeof(L_7));
		Keyframe__ctor_m10FFFE5FE1213C3AE88359375398F213B24F18D5((&L_7), (1.0f), (1.0f), (2.5f), (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1499));
		NullCheck(L_6);
		(L_6)->SetAt(static_cast<il2cpp_array_size_t>(1), (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 )L_7);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1500));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_8 = (AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C *)il2cpp_codegen_object_new(AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_il2cpp_TypeInfo_var);
		AnimationCurve__ctor_mE9462D171C06A2A746B9DA1B0A6B0F4FC7DB94CF(L_8, L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1500));
		V_0 = L_8;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1488));
		goto IL_00dc;
	}

IL_007a:
	{
		// animation = new AnimationCurve(new Keyframe(0, 0, 0, 2.5f), new Keyframe(1, 1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1489));
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_9 = (KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D*)(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D*)SZArrayNew(KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D_il2cpp_TypeInfo_var, (uint32_t)2);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_10 = L_9;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1501));
		Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  L_11;
		memset((&L_11), 0, sizeof(L_11));
		Keyframe__ctor_m10FFFE5FE1213C3AE88359375398F213B24F18D5((&L_11), (0.0f), (0.0f), (0.0f), (2.5f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1501));
		NullCheck(L_10);
		(L_10)->SetAt(static_cast<il2cpp_array_size_t>(0), (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 )L_11);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_12 = L_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1502));
		Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74  L_13;
		memset((&L_13), 0, sizeof(L_13));
		Keyframe__ctor_m0EA9CF8E65F32EE7603302E2CC670C56DC177C13((&L_13), (1.0f), (1.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1502));
		NullCheck(L_12);
		(L_12)->SetAt(static_cast<il2cpp_array_size_t>(1), (Keyframe_t9E945CACC5AC36E067B15A634096A223A06D2D74 )L_13);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1503));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_14 = (AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C *)il2cpp_codegen_object_new(AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C_il2cpp_TypeInfo_var);
		AnimationCurve__ctor_mE9462D171C06A2A746B9DA1B0A6B0F4FC7DB94CF(L_14, L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1503));
		V_0 = L_14;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1490));
		goto IL_00dc;
	}

IL_00be:
	{
		// animation = AnimationCurve.EaseInOut(0, 0, 1, 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1491));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1504));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_15 = AnimationCurve_EaseInOut_m05634A1E02A101E8FFEF7479ED4CF821270F483C((0.0f), (0.0f), (1.0f), (1.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1504));
		V_0 = L_15;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1492));
		goto IL_00dc;
	}

IL_00da:
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1493));
		goto IL_00dc;
	}

IL_00dc:
	{
		// Curve = animation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1494));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_16 = V_0;
		__this->set_Curve_1(L_16);
		// cachedKeys = Curve.keys;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1495));
		AnimationCurve_tD2F265379583AAF1BF8D84F1BB8DB12980FA504C * L_17 = __this->get_Curve_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1505));
		NullCheck(L_17);
		KeyframeU5BU5D_tF4DC3E9BD9E6DB77FFF7BDC0B1545B5D6071513D* L_18 = AnimationCurve_get_keys_m88E1848D255C2893F379E855A522DA9B0E0F78FB(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1505));
		__this->set_cachedKeys_4(L_18);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1496));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_SurfaceType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 475));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 476));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 477));
		// get { return surfaceType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 478));
		int32_t L_0 = __this->get_surfaceType_8();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return surfaceType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 479));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_SurfaceType(Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_SurfaceType_m409F34CAEEAD4D4655F8A62D340FF5395746594F (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_SurfaceType_m409F34CAEEAD4D4655F8A62D340FF5395746594F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_SurfaceType_m409F34CAEEAD4D4655F8A62D340FF5395746594F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 480));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 481));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 482));
		// set { surfaceType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 483));
		int32_t L_0 = ___value0;
		__this->set_surfaceType_8(L_0);
		// set { surfaceType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 484));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.OrientationType Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_OrientType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 485));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 486));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 487));
		// get { return orientType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 488));
		int32_t L_0 = __this->get_orientType_9();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return orientType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 489));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_OrientType(Microsoft.MixedReality.Toolkit.Utilities.OrientationType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_OrientType_m2D5C72EFDDC347076A3A8A121A4B875F175D663E (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_OrientType_m2D5C72EFDDC347076A3A8A121A4B875F175D663E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_OrientType_m2D5C72EFDDC347076A3A8A121A4B875F175D663E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 490));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 491));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 492));
		// set { orientType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 493));
		int32_t L_0 = ___value0;
		__this->set_orientType_9(L_0);
		// set { orientType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 494));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Layout()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 495));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 496));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 497));
		// get { return layout; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 498));
		int32_t L_0 = __this->get_layout_10();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return layout; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 499));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Layout(Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 500));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 501));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 502));
		// set { layout = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 503));
		int32_t L_0 = ___value0;
		__this->set_layout_10(L_0);
		// set { layout = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 504));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Anchor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Anchor_m235D7EB256320DD48B432BE1FB5716074E344993 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Anchor_m235D7EB256320DD48B432BE1FB5716074E344993_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Anchor_m235D7EB256320DD48B432BE1FB5716074E344993_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 505));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 506));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 507));
		// get { return anchor; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 508));
		int32_t L_0 = __this->get_anchor_11();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return anchor; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 509));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Anchor(Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Anchor_m8811CDA295DEFBF60F5659844387BB4F0338257A (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Anchor_m8811CDA295DEFBF60F5659844387BB4F0338257A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Anchor_m8811CDA295DEFBF60F5659844387BB4F0338257A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 510));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 511));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 512));
		// set { anchor = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 513));
		int32_t L_0 = ___value0;
		__this->set_anchor_11(L_0);
		// set { anchor = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 514));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_AnchorAlongAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool GridObjectCollection_get_AnchorAlongAxis_m26BB73F08882EA22FAA1DD70B3F0E6BBEDDA4D92 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_AnchorAlongAxis_m26BB73F08882EA22FAA1DD70B3F0E6BBEDDA4D92_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_AnchorAlongAxis_m26BB73F08882EA22FAA1DD70B3F0E6BBEDDA4D92_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 515));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 516));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 517));
		// get { return anchorAlongAxis; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 518));
		bool L_0 = __this->get_anchorAlongAxis_12();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return anchorAlongAxis; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 519));
		bool L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_AnchorAlongAxis(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_AnchorAlongAxis_mBCD1AD30B6B4DC431999F800D9E459CBCA0A4FDD (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_AnchorAlongAxis_mBCD1AD30B6B4DC431999F800D9E459CBCA0A4FDD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_AnchorAlongAxis_mBCD1AD30B6B4DC431999F800D9E459CBCA0A4FDD_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 520));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 521));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 522));
		// set { anchorAlongAxis = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 523));
		bool L_0 = ___value0;
		__this->set_anchorAlongAxis_12(L_0);
		// set { anchorAlongAxis = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 524));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_ColumnAlignment()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 525));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 526));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 527));
		// get { return columnAlignment; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 528));
		int32_t L_0 = __this->get_columnAlignment_13();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return columnAlignment; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 529));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_ColumnAlignment(Microsoft.MixedReality.Toolkit.Utilities.LayoutHorizontalAlignment)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_ColumnAlignment_m4F26750655314F62C35147209560DB2BBA4E5BFE (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_ColumnAlignment_m4F26750655314F62C35147209560DB2BBA4E5BFE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_ColumnAlignment_m4F26750655314F62C35147209560DB2BBA4E5BFE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 530));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 531));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 532));
		// set { columnAlignment = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 533));
		int32_t L_0 = ___value0;
		__this->set_columnAlignment_13(L_0);
		// set { columnAlignment = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 534));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_RowAlignment()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 535));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 536));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 537));
		// get { return rowAlignment; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 538));
		int32_t L_0 = __this->get_rowAlignment_14();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return rowAlignment; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 539));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_RowAlignment(Microsoft.MixedReality.Toolkit.Utilities.LayoutVerticalAlignment)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_RowAlignment_m8170672C4D8E726AC31A7ADCAA29F9FDCC1CACF3 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_RowAlignment_m8170672C4D8E726AC31A7ADCAA29F9FDCC1CACF3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_RowAlignment_m8170672C4D8E726AC31A7ADCAA29F9FDCC1CACF3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 540));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 541));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 542));
		// set { rowAlignment = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 543));
		int32_t L_0 = ___value0;
		__this->set_rowAlignment_14(L_0);
		// set { rowAlignment = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 544));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Radius()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 545));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 546));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 547));
		// get { return radius; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 548));
		float L_0 = __this->get_radius_15();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return radius; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 549));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Radius(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Radius_mC81E0E514E40C8ADB5AD8C2A694179E8D22329D0 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Radius_mC81E0E514E40C8ADB5AD8C2A694179E8D22329D0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Radius_mC81E0E514E40C8ADB5AD8C2A694179E8D22329D0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 550));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 551));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 552));
		// set { radius = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 553));
		float L_0 = ___value0;
		__this->set_radius_15(L_0);
		// set { radius = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 554));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_RadialRange()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_RadialRange_m931D65BD00BCF6715D45D7217D566F1D299AA587 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_RadialRange_m931D65BD00BCF6715D45D7217D566F1D299AA587_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_RadialRange_m931D65BD00BCF6715D45D7217D566F1D299AA587_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 555));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 556));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 557));
		// get { return radialRange; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 558));
		float L_0 = __this->get_radialRange_16();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return radialRange; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 559));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_RadialRange(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_RadialRange_m17D739A979C001395D51C5A570A3E53EB17E4C43 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_RadialRange_m17D739A979C001395D51C5A570A3E53EB17E4C43_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_RadialRange_m17D739A979C001395D51C5A570A3E53EB17E4C43_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 560));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 561));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 562));
		// set { radialRange = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 563));
		float L_0 = ___value0;
		__this->set_radialRange_16(L_0);
		// set { radialRange = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 564));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Distance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_Distance_m0B24FE0B3504B8EF06114B505D236E5C8DE2A056 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Distance_m0B24FE0B3504B8EF06114B505D236E5C8DE2A056_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Distance_m0B24FE0B3504B8EF06114B505D236E5C8DE2A056_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 565));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 566));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 567));
		// get { return distance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 568));
		float L_0 = __this->get_distance_17();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return distance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 569));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Distance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Distance_m329EC03818115B3395ECAE07CB8A720B3D127331 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Distance_m329EC03818115B3395ECAE07CB8A720B3D127331_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Distance_m329EC03818115B3395ECAE07CB8A720B3D127331_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 570));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 571));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 572));
		// set { distance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 573));
		float L_0 = ___value0;
		__this->set_distance_17(L_0);
		// set { distance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 574));
		return;
	}
}
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Rows()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 575));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 576));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 577));
		// get { return rows; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 578));
		int32_t L_0 = __this->get_rows_19();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return rows; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 579));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Rows(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Rows_m59D835BB2B42F605422D2FE97B8306D02F26ACFA (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Rows_m59D835BB2B42F605422D2FE97B8306D02F26ACFA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Rows_m59D835BB2B42F605422D2FE97B8306D02F26ACFA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 580));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 581));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 582));
		// if (Layout == LayoutOrder.ColumnThenRow)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 583));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 590));
		int32_t L_0 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 590));
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 584));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_001c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 585));
		// Debug.LogError("When using ColumnThenRow layout, assign Columns instead of Rows.");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 586));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 591));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(_stringLiteralAE24D13D028A85FC6B9A5C93B1AF04708DA0C955, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 591));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 587));
		goto IL_0023;
	}

IL_001c:
	{
		// rows = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 588));
		int32_t L_2 = ___value0;
		__this->set_rows_19(L_2);
	}

IL_0023:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 589));
		return;
	}
}
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Columns()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 592));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 593));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 594));
		// get { return columns; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 595));
		int32_t L_0 = __this->get_columns_20();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return columns; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 596));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_Columns(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 597));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 598));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 599));
		// if (Layout == LayoutOrder.RowThenColumn)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 600));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 607));
		int32_t L_0 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 607));
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 601));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_001c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 602));
		// Debug.LogError("When using RowThenColumn layout, assign Rows instead of Columns.");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 603));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 608));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(_stringLiteralC5C886D163EC383C8EC7FA0191C5FF341113A89B, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 608));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 604));
		goto IL_0023;
	}

IL_001c:
	{
		// columns = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 605));
		int32_t L_2 = ___value0;
		__this->set_columns_20(L_2);
	}

IL_0023:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 606));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CellWidth()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 609));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 610));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 611));
		// get { return cellWidth; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 612));
		float L_0 = __this->get_cellWidth_21();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return cellWidth; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 613));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_CellWidth(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_CellWidth_m3FB013D09E5B26F7B37098E18B55E6878129CC7D (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_CellWidth_m3FB013D09E5B26F7B37098E18B55E6878129CC7D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_CellWidth_m3FB013D09E5B26F7B37098E18B55E6878129CC7D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 614));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 615));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 616));
		// set { cellWidth = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 617));
		float L_0 = ___value0;
		__this->set_cellWidth_21(L_0);
		// set { cellWidth = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 618));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CellHeight()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 619));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 620));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 621));
		// get { return cellHeight; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 622));
		float L_0 = __this->get_cellHeight_22();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return cellHeight; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 623));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_CellHeight(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_CellHeight_m2010B0EB3DAFB3587E753C89D99F1F8E930086B3 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_CellHeight_m2010B0EB3DAFB3587E753C89D99F1F8E930086B3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_CellHeight_m2010B0EB3DAFB3587E753C89D99F1F8E930086B3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 624));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 625));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 626));
		// set { cellHeight = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 627));
		float L_0 = ___value0;
		__this->set_cellHeight_22(L_0);
		// set { cellHeight = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 628));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Width()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_Width_m4747F0A39278888CDBA6A08631A660FB4D18EC7B (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Width_m4747F0A39278888CDBA6A08631A660FB4D18EC7B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Width_m4747F0A39278888CDBA6A08631A660FB4D18EC7B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 629));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 630));
	{
		// public float Width => Columns * CellWidth;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 631));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 632));
		int32_t L_0 = GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 632));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 633));
		float L_1 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 633));
		return ((float)il2cpp_codegen_multiply((float)(((float)((float)L_0))), (float)L_1));
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_Height()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float GridObjectCollection_get_Height_m12566193197F15400DE0D2B9D25A174C0F50816A (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_Height_m12566193197F15400DE0D2B9D25A174C0F50816A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_Height_m12566193197F15400DE0D2B9D25A174C0F50816A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 634));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 635));
	{
		// public float Height => rows * CellHeight;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 636));
		int32_t L_0 = __this->get_rows_19();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 637));
		float L_1 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 637));
		return ((float)il2cpp_codegen_multiply((float)(((float)((float)L_0))), (float)L_1));
	}
}
// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_SphereMesh()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 638));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 639));
	{
		// public Mesh SphereMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 640));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = __this->get_U3CSphereMeshU3Ek__BackingField_23();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_SphereMesh(UnityEngine.Mesh)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_SphereMesh_m42E14CF7B729C156497A43AFB2A533AFF787D646 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_SphereMesh_m42E14CF7B729C156497A43AFB2A533AFF787D646_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_SphereMesh_m42E14CF7B729C156497A43AFB2A533AFF787D646_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 641));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 642));
	{
		// public Mesh SphereMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 643));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = ___value0;
		__this->set_U3CSphereMeshU3Ek__BackingField_23(L_0);
		return;
	}
}
// UnityEngine.Mesh Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::get_CylinderMesh()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 644));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 645));
	{
		// public Mesh CylinderMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 646));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = __this->get_U3CCylinderMeshU3Ek__BackingField_24();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::set_CylinderMesh(UnityEngine.Mesh)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_set_CylinderMesh_mA3F0966A74F435D0CEA94EFD1CAEDC52FA1A3409 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_set_CylinderMesh_mA3F0966A74F435D0CEA94EFD1CAEDC52FA1A3409_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_set_CylinderMesh_mA3F0966A74F435D0CEA94EFD1CAEDC52FA1A3409_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 647));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 648));
	{
		// public Mesh CylinderMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 649));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = ___value0;
		__this->set_U3CCylinderMeshU3Ek__BackingField_24(L_0);
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::LayoutChildren()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_LayoutChildren_m5A1603983042D651824A34FFC19D75800740D532 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_LayoutChildren_m5A1603983042D651824A34FFC19D75800740D532_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_0 = NULL;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	bool V_2 = false;
	bool V_3 = false;
	int32_t V_4 = 0;
	int32_t V_5 = 0;
	int32_t V_6 = 0;
	int32_t V_7 = 0;
	ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * V_8 = NULL;
	bool V_9 = false;
	int32_t V_10 = 0;
	ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * V_11 = NULL;
	bool V_12 = false;
	int32_t V_13 = 0;
	ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * V_14 = NULL;
	bool V_15 = false;
	int32_t V_16 = 0;
	ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * V_17 = NULL;
	bool V_18 = false;
	bool V_19 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_5), (&V_6), (&V_7), (&V_8), (&V_10), (&V_11), (&V_13), (&V_14), (&V_16), (&V_17));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_LayoutChildren_m5A1603983042D651824A34FFC19D75800740D532_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 650));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 651));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 652));
		// var nodeGrid = new Vector3[NodeList.Count];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 653));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 733));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_0 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 733));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 734));
		NullCheck(L_0);
		int32_t L_1 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_0, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 734));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_2 = (Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)SZArrayNew(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var, (uint32_t)L_1);
		V_0 = L_2;
		// if (Layout == LayoutOrder.RowThenColumn)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 654));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 735));
		int32_t L_3 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 735));
		V_2 = (bool)((((int32_t)L_3) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 655));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_0042;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 656));
		// columns = Mathf.CeilToInt((float)NodeList.Count / rows);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 657));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 736));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_5 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 736));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 737));
		NullCheck(L_5);
		int32_t L_6 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_5, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 737));
		int32_t L_7 = __this->get_rows_19();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 738));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_8 = Mathf_CeilToInt_m0230CCC7CC9266F18125D9425C38A25D1CA4275B(((float)((float)(((float)((float)L_6)))/(float)(((float)((float)L_7))))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 738));
		__this->set_columns_20(L_8);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 658));
		goto IL_0070;
	}

IL_0042:
	{
		// else if (Layout == LayoutOrder.ColumnThenRow)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 659));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 739));
		int32_t L_9 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 739));
		V_3 = (bool)((((int32_t)L_9) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 660));
		bool L_10 = V_3;
		if (!L_10)
		{
			goto IL_0070;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 661));
		// rows = Mathf.CeilToInt((float)NodeList.Count / columns);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 662));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 740));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_11 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 740));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 741));
		NullCheck(L_11);
		int32_t L_12 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_11, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 741));
		int32_t L_13 = __this->get_columns_20();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 742));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_14 = Mathf_CeilToInt_m0230CCC7CC9266F18125D9425C38A25D1CA4275B(((float)((float)(((float)((float)L_12)))/(float)(((float)((float)L_13))))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 742));
		__this->set_rows_19(L_14);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 663));
	}

IL_0070:
	{
		// HalfCell = new Vector2(CellWidth * 0.5f, CellHeight * 0.5f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 664));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 743));
		float L_15 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 743));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 744));
		float L_16 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 744));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 745));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_17;
		memset((&L_17), 0, sizeof(L_17));
		Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0((&L_17), ((float)il2cpp_codegen_multiply((float)L_15, (float)(0.5f))), ((float)il2cpp_codegen_multiply((float)L_16, (float)(0.5f))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 745));
		__this->set_HalfCell_25(L_17);
		// ResolveGridLayout(nodeGrid, layout);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 665));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_18 = V_0;
		int32_t L_19 = __this->get_layout_10();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 746));
		GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB(__this, L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 746));
		// switch (SurfaceType)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 666));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 747));
		int32_t L_20 = GridObjectCollection_get_SurfaceType_m75FF289A6938DE0AF9ED5A8C4211478526CBCDD0(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 747));
		V_4 = L_20;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 667));
		int32_t L_21 = V_4;
		switch (L_21)
		{
			case 0:
			{
				goto IL_0138;
			}
			case 1:
			{
				goto IL_00c5;
			}
			case 2:
			{
				goto IL_01a9;
			}
			case 3:
			{
				goto IL_021a;
			}
		}
	}
	{
		goto IL_02d1;
	}

IL_00c5:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 668));
		V_7 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 669));
		goto IL_011e;
	}

IL_00ca:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 670));
		// ObjectCollectionNode node = NodeList[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 671));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 748));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_22 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 748));
		int32_t L_23 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 749));
		NullCheck(L_22);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_24 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_22, L_23, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 749));
		V_8 = L_24;
		// newPos = nodeGrid[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 672));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_25 = V_0;
		int32_t L_26 = V_7;
		NullCheck(L_25);
		int32_t L_27 = L_26;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_28 = (L_25)->GetAt(static_cast<il2cpp_array_size_t>(L_27));
		V_1 = L_28;
		// newPos.z = distance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 673));
		float L_29 = __this->get_distance_17();
		(&V_1)->set_z_4(L_29);
		// node.Transform.localPosition = newPos;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 674));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_30 = V_8;
		NullCheck(L_30);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_31 = L_30->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_32 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 750));
		NullCheck(L_31);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_31, L_32, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 750));
		// UpdateNodeFacing(node);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 675));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_33 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 751));
		GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710(__this, L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 751));
		// NodeList[i] = node;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 676));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 752));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_34 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 752));
		int32_t L_35 = V_7;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_36 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 753));
		NullCheck(L_34);
		List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4(L_34, L_35, L_36, /*hidden argument*/List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 753));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 677));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 678));
		int32_t L_37 = V_7;
		V_7 = ((int32_t)il2cpp_codegen_add((int32_t)L_37, (int32_t)1));
	}

IL_011e:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 679));
		int32_t L_38 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 754));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_39 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 754));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 755));
		NullCheck(L_39);
		int32_t L_40 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_39, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 755));
		V_9 = (bool)((((int32_t)L_38) < ((int32_t)L_40))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 680));
		bool L_41 = V_9;
		if (L_41)
		{
			goto IL_00ca;
		}
	}
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 681));
		goto IL_02d1;
	}

IL_0138:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 682));
		V_10 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 683));
		goto IL_018f;
	}

IL_013d:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 684));
		// ObjectCollectionNode node = NodeList[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 685));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 756));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_42 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 756));
		int32_t L_43 = V_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 757));
		NullCheck(L_42);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_44 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_42, L_43, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 757));
		V_11 = L_44;
		// newPos = VectorExtensions.CylindricalMapping(nodeGrid[i], radius);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 686));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_45 = V_0;
		int32_t L_46 = V_10;
		NullCheck(L_45);
		int32_t L_47 = L_46;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_48 = (L_45)->GetAt(static_cast<il2cpp_array_size_t>(L_47));
		float L_49 = __this->get_radius_15();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 758));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_50 = VectorExtensions_CylindricalMapping_m8AB7E338CF50AA22C733D0A0AA4336B643B0CA98(L_48, L_49, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 758));
		V_1 = L_50;
		// node.Transform.localPosition = newPos;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 687));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_51 = V_11;
		NullCheck(L_51);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_52 = L_51->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 759));
		NullCheck(L_52);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_52, L_53, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 759));
		// UpdateNodeFacing(node);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 688));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_54 = V_11;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 760));
		GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710(__this, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 760));
		// NodeList[i] = node;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 689));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 761));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_55 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 761));
		int32_t L_56 = V_10;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_57 = V_11;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 762));
		NullCheck(L_55);
		List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4(L_55, L_56, L_57, /*hidden argument*/List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 762));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 690));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 691));
		int32_t L_58 = V_10;
		V_10 = ((int32_t)il2cpp_codegen_add((int32_t)L_58, (int32_t)1));
	}

IL_018f:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 692));
		int32_t L_59 = V_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 763));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_60 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 763));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 764));
		NullCheck(L_60);
		int32_t L_61 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_60, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 764));
		V_12 = (bool)((((int32_t)L_59) < ((int32_t)L_61))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 693));
		bool L_62 = V_12;
		if (L_62)
		{
			goto IL_013d;
		}
	}
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 694));
		goto IL_02d1;
	}

IL_01a9:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 695));
		V_13 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 696));
		goto IL_0200;
	}

IL_01ae:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 697));
		// ObjectCollectionNode node = NodeList[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 698));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 765));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_63 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 765));
		int32_t L_64 = V_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 766));
		NullCheck(L_63);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_65 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_63, L_64, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 766));
		V_14 = L_65;
		// newPos = VectorExtensions.SphericalMapping(nodeGrid[i], radius);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 699));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_66 = V_0;
		int32_t L_67 = V_13;
		NullCheck(L_66);
		int32_t L_68 = L_67;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_69 = (L_66)->GetAt(static_cast<il2cpp_array_size_t>(L_68));
		float L_70 = __this->get_radius_15();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 767));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_71 = VectorExtensions_SphericalMapping_m2AD72F118F19681668486035FFC0A3F8E499C82E(L_69, L_70, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 767));
		V_1 = L_71;
		// node.Transform.localPosition = newPos;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 700));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_72 = V_14;
		NullCheck(L_72);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_73 = L_72->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_74 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 768));
		NullCheck(L_73);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_73, L_74, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 768));
		// UpdateNodeFacing(node);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 701));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_75 = V_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 769));
		GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710(__this, L_75, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 769));
		// NodeList[i] = node;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 702));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 770));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_76 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 770));
		int32_t L_77 = V_13;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_78 = V_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 771));
		NullCheck(L_76);
		List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4(L_76, L_77, L_78, /*hidden argument*/List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 771));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 703));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 704));
		int32_t L_79 = V_13;
		V_13 = ((int32_t)il2cpp_codegen_add((int32_t)L_79, (int32_t)1));
	}

IL_0200:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 705));
		int32_t L_80 = V_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 772));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_81 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 772));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 773));
		NullCheck(L_81);
		int32_t L_82 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_81, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 773));
		V_15 = (bool)((((int32_t)L_80) < ((int32_t)L_82))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 706));
		bool L_83 = V_15;
		if (L_83)
		{
			goto IL_01ae;
		}
	}
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 707));
		goto IL_02d1;
	}

IL_021a:
	{
		// int curColumn = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 708));
		V_5 = 0;
		// int curRow = 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 709));
		V_6 = 1;
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 710));
		V_16 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 711));
		goto IL_02b7;
	}

IL_0228:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 712));
		// ObjectCollectionNode node = NodeList[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 713));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 774));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_84 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 774));
		int32_t L_85 = V_16;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 775));
		NullCheck(L_84);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_86 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_84, L_85, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 775));
		V_17 = L_86;
		// newPos = VectorExtensions.RadialMapping(nodeGrid[i], radialRange, radius, curRow, rows, curColumn, Columns);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 714));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_87 = V_0;
		int32_t L_88 = V_16;
		NullCheck(L_87);
		int32_t L_89 = L_88;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_90 = (L_87)->GetAt(static_cast<il2cpp_array_size_t>(L_89));
		float L_91 = __this->get_radialRange_16();
		float L_92 = __this->get_radius_15();
		int32_t L_93 = V_6;
		int32_t L_94 = __this->get_rows_19();
		int32_t L_95 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 776));
		int32_t L_96 = GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 776));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 777));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_97 = VectorExtensions_RadialMapping_mF50AB7F2B671DCAB77A128FC686C4CE8926EDC1B(L_90, L_91, L_92, L_93, L_94, L_95, L_96, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 777));
		V_1 = L_97;
		// if (curColumn == (Columns - 1))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 715));
		int32_t L_98 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 778));
		int32_t L_99 = GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 778));
		V_18 = (bool)((((int32_t)L_98) == ((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_99, (int32_t)1))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 716));
		bool L_100 = V_18;
		if (!L_100)
		{
			goto IL_0281;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 717));
		// curColumn = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 718));
		V_5 = 0;
		// ++curRow;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 719));
		int32_t L_101 = V_6;
		V_6 = ((int32_t)il2cpp_codegen_add((int32_t)L_101, (int32_t)1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 720));
		goto IL_0289;
	}

IL_0281:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 721));
		// ++curColumn;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 722));
		int32_t L_102 = V_5;
		V_5 = ((int32_t)il2cpp_codegen_add((int32_t)L_102, (int32_t)1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 723));
	}

IL_0289:
	{
		// node.Transform.localPosition = newPos;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 724));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_103 = V_17;
		NullCheck(L_103);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_104 = L_103->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_105 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 779));
		NullCheck(L_104);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_104, L_105, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 779));
		// UpdateNodeFacing(node);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 725));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_106 = V_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 780));
		GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710(__this, L_106, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 780));
		// NodeList[i] = node;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 726));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 781));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_107 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 781));
		int32_t L_108 = V_16;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_109 = V_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 782));
		NullCheck(L_107);
		List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4(L_107, L_108, L_109, /*hidden argument*/List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 782));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 727));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 728));
		int32_t L_110 = V_16;
		V_16 = ((int32_t)il2cpp_codegen_add((int32_t)L_110, (int32_t)1));
	}

IL_02b7:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 729));
		int32_t L_111 = V_16;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 783));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_112 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 783));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 784));
		NullCheck(L_112);
		int32_t L_113 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_112, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 784));
		V_19 = (bool)((((int32_t)L_111) < ((int32_t)L_113))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 730));
		bool L_114 = V_19;
		if (L_114)
		{
			goto IL_0228;
		}
	}
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 731));
		goto IL_02d1;
	}

IL_02d1:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 732));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::ResolveGridLayout(UnityEngine.Vector3[],Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___grid0, int32_t ___order1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	int32_t V_1 = 0;
	int32_t V_2 = 0;
	float V_3 = 0.0f;
	float V_4 = 0.0f;
	float V_5 = 0.0f;
	float V_6 = 0.0f;
	int32_t V_7 = 0;
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	bool V_12 = false;
	int32_t V_13 = 0;
	int32_t V_14 = 0;
	bool V_15 = false;
	int32_t V_16 = 0;
	bool V_17 = false;
	bool V_18 = false;
	bool V_19 = false;
	int32_t V_20 = 0;
	int32_t V_21 = 0;
	bool V_22 = false;
	int32_t V_23 = 0;
	bool V_24 = false;
	bool V_25 = false;
	bool V_26 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___grid0), (&___order1));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5), (&V_6), (&V_13), (&V_14), (&V_20), (&V_21));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 785));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 786));
	int32_t G_B11_0 = 0;
	float G_B15_0 = 0.0f;
	int32_t G_B20_0 = 0;
	float G_B24_0 = 0.0f;
	int32_t G_B29_0 = 0;
	float G_B33_0 = 0.0f;
	int32_t G_B38_0 = 0;
	float G_B42_0 = 0.0f;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 787));
		// int cellCounter = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 788));
		V_0 = 0;
		// switch (order)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 789));
		int32_t L_0 = ___order1;
		V_7 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 790));
		int32_t L_1 = V_7;
		switch (L_1)
		{
			case 0:
			{
				goto IL_002f;
			}
			case 1:
			{
				goto IL_001f;
			}
			case 2:
			{
				goto IL_004f;
			}
			case 3:
			{
				goto IL_003f;
			}
		}
	}
	{
		goto IL_005f;
	}

IL_001f:
	{
		// xMax = Columns;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 791));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 901));
		int32_t L_2 = GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 901));
		V_1 = L_2;
		// yMax = Rows;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 792));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 902));
		int32_t L_3 = GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 902));
		V_2 = L_3;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 793));
		goto IL_0082;
	}

IL_002f:
	{
		// xMax = Columns;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 794));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 903));
		int32_t L_4 = GridObjectCollection_get_Columns_mFBB81598E3D6790184E248158B249F6E377918FF(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 903));
		V_1 = L_4;
		// yMax = Rows;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 795));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 904));
		int32_t L_5 = GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 904));
		V_2 = L_5;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 796));
		goto IL_0082;
	}

IL_003f:
	{
		// xMax = 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 797));
		V_1 = 1;
		// yMax = NodeList.Count;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 798));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 905));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_6 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 905));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 906));
		NullCheck(L_6);
		int32_t L_7 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_6, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 906));
		V_2 = L_7;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 799));
		goto IL_0082;
	}

IL_004f:
	{
		// xMax = NodeList.Count;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 800));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 907));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_8 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 907));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 908));
		NullCheck(L_8);
		int32_t L_9 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_8, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 908));
		V_1 = L_9;
		// yMax = 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 801));
		V_2 = 1;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 802));
		goto IL_0082;
	}

IL_005f:
	{
		// xMax = Mathf.CeilToInt((float)NodeList.Count / rows);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 803));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 909));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_10 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 909));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 910));
		NullCheck(L_10);
		int32_t L_11 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_10, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 910));
		int32_t L_12 = __this->get_rows_19();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 911));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_13 = Mathf_CeilToInt_m0230CCC7CC9266F18125D9425C38A25D1CA4275B(((float)((float)(((float)((float)L_11)))/(float)(((float)((float)L_12))))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 911));
		V_1 = L_13;
		// yMax = rows;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 804));
		int32_t L_14 = __this->get_rows_19();
		V_2 = L_14;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 805));
		goto IL_0082;
	}

IL_0082:
	{
		// float startOffsetX = (xMax * 0.5f) * CellWidth;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 806));
		int32_t L_15 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 912));
		float L_16 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 912));
		V_3 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_15))), (float)(0.5f))), (float)L_16));
		// if (anchor == LayoutAnchor.BottomLeft || anchor == LayoutAnchor.UpperLeft || anchor == LayoutAnchor.MiddleLeft)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 807));
		int32_t L_17 = __this->get_anchor_11();
		if ((((int32_t)L_17) == ((int32_t)6)))
		{
			goto IL_00ae;
		}
	}
	{
		int32_t L_18 = __this->get_anchor_11();
		if (!L_18)
		{
			goto IL_00ae;
		}
	}
	{
		int32_t L_19 = __this->get_anchor_11();
		G_B11_0 = ((((int32_t)L_19) == ((int32_t)3))? 1 : 0);
		goto IL_00af;
	}

IL_00ae:
	{
		G_B11_0 = 1;
	}

IL_00af:
	{
		V_8 = (bool)G_B11_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 808));
		bool L_20 = V_8;
		if (!L_20)
		{
			goto IL_00d5;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 809));
		// startOffsetX = anchorAlongAxis ? 0.5f * CellWidth : 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 810));
		bool L_21 = __this->get_anchorAlongAxis_12();
		if (L_21)
		{
			goto IL_00c5;
		}
	}
	{
		G_B15_0 = (0.0f);
		goto IL_00d1;
	}

IL_00c5:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 913));
		float L_22 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 913));
		G_B15_0 = ((float)il2cpp_codegen_multiply((float)(0.5f), (float)L_22));
	}

IL_00d1:
	{
		V_3 = G_B15_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 811));
		goto IL_011e;
	}

IL_00d5:
	{
		// else if (anchor == LayoutAnchor.BottomRight || anchor == LayoutAnchor.UpperRight || anchor == LayoutAnchor.MiddleRight)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 812));
		int32_t L_23 = __this->get_anchor_11();
		if ((((int32_t)L_23) == ((int32_t)8)))
		{
			goto IL_00f2;
		}
	}
	{
		int32_t L_24 = __this->get_anchor_11();
		if ((((int32_t)L_24) == ((int32_t)2)))
		{
			goto IL_00f2;
		}
	}
	{
		int32_t L_25 = __this->get_anchor_11();
		G_B20_0 = ((((int32_t)L_25) == ((int32_t)5))? 1 : 0);
		goto IL_00f3;
	}

IL_00f2:
	{
		G_B20_0 = 1;
	}

IL_00f3:
	{
		V_9 = (bool)G_B20_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 813));
		bool L_26 = V_9;
		if (!L_26)
		{
			goto IL_011e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 814));
		// startOffsetX = anchorAlongAxis ? (xMax - 0.5f) * CellWidth : xMax * CellWidth;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 815));
		bool L_27 = __this->get_anchorAlongAxis_12();
		if (L_27)
		{
			goto IL_010d;
		}
	}
	{
		int32_t L_28 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 914));
		float L_29 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 914));
		G_B24_0 = ((float)il2cpp_codegen_multiply((float)(((float)((float)L_28))), (float)L_29));
		goto IL_011c;
	}

IL_010d:
	{
		int32_t L_30 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 915));
		float L_31 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 915));
		G_B24_0 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_subtract((float)(((float)((float)L_30))), (float)(0.5f))), (float)L_31));
	}

IL_011c:
	{
		V_3 = G_B24_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 816));
	}

IL_011e:
	{
		// float startOffsetY = (yMax * 0.5f) * CellHeight;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 817));
		int32_t L_32 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 916));
		float L_33 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 916));
		V_4 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_32))), (float)(0.5f))), (float)L_33));
		// if (anchor == LayoutAnchor.UpperLeft || anchor == LayoutAnchor.UpperCenter || anchor == LayoutAnchor.UpperRight)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 818));
		int32_t L_34 = __this->get_anchor_11();
		if (!L_34)
		{
			goto IL_014b;
		}
	}
	{
		int32_t L_35 = __this->get_anchor_11();
		if ((((int32_t)L_35) == ((int32_t)1)))
		{
			goto IL_014b;
		}
	}
	{
		int32_t L_36 = __this->get_anchor_11();
		G_B29_0 = ((((int32_t)L_36) == ((int32_t)2))? 1 : 0);
		goto IL_014c;
	}

IL_014b:
	{
		G_B29_0 = 1;
	}

IL_014c:
	{
		V_10 = (bool)G_B29_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 819));
		bool L_37 = V_10;
		if (!L_37)
		{
			goto IL_0173;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 820));
		// startOffsetY = anchorAlongAxis ? 0.5f * CellHeight : 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 821));
		bool L_38 = __this->get_anchorAlongAxis_12();
		if (L_38)
		{
			goto IL_0162;
		}
	}
	{
		G_B33_0 = (0.0f);
		goto IL_016e;
	}

IL_0162:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 917));
		float L_39 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 917));
		G_B33_0 = ((float)il2cpp_codegen_multiply((float)(0.5f), (float)L_39));
	}

IL_016e:
	{
		V_4 = G_B33_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 822));
		goto IL_01bd;
	}

IL_0173:
	{
		// else if (anchor == LayoutAnchor.BottomLeft || anchor == LayoutAnchor.BottomCenter || anchor == LayoutAnchor.BottomRight)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 823));
		int32_t L_40 = __this->get_anchor_11();
		if ((((int32_t)L_40) == ((int32_t)6)))
		{
			goto IL_0190;
		}
	}
	{
		int32_t L_41 = __this->get_anchor_11();
		if ((((int32_t)L_41) == ((int32_t)7)))
		{
			goto IL_0190;
		}
	}
	{
		int32_t L_42 = __this->get_anchor_11();
		G_B38_0 = ((((int32_t)L_42) == ((int32_t)8))? 1 : 0);
		goto IL_0191;
	}

IL_0190:
	{
		G_B38_0 = 1;
	}

IL_0191:
	{
		V_11 = (bool)G_B38_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 824));
		bool L_43 = V_11;
		if (!L_43)
		{
			goto IL_01bd;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 825));
		// startOffsetY = anchorAlongAxis ? (yMax - 0.5f) * CellHeight : yMax * CellHeight;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 826));
		bool L_44 = __this->get_anchorAlongAxis_12();
		if (L_44)
		{
			goto IL_01ab;
		}
	}
	{
		int32_t L_45 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 918));
		float L_46 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 918));
		G_B42_0 = ((float)il2cpp_codegen_multiply((float)(((float)((float)L_45))), (float)L_46));
		goto IL_01ba;
	}

IL_01ab:
	{
		int32_t L_47 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 919));
		float L_48 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 919));
		G_B42_0 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_subtract((float)(((float)((float)L_47))), (float)(0.5f))), (float)L_48));
	}

IL_01ba:
	{
		V_4 = G_B42_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 827));
	}

IL_01bd:
	{
		// float alignmentOffsetX = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 828));
		V_5 = (0.0f);
		// float alignmentOffsetY = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 829));
		V_6 = (0.0f);
		// if (layout == LayoutOrder.ColumnThenRow)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 830));
		int32_t L_49 = __this->get_layout_10();
		V_12 = (bool)((((int32_t)L_49) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 831));
		bool L_50 = V_12;
		if (!L_50)
		{
			goto IL_0327;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 832));
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 833));
		V_13 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 834));
		goto IL_0313;
	}

IL_01e6:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 835));
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 836));
		V_14 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 837));
		goto IL_02fe;
	}

IL_01ef:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 838));
		// if (y == yMax - 1)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 839));
		int32_t L_51 = V_13;
		int32_t L_52 = V_2;
		V_15 = (bool)((((int32_t)L_51) == ((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_52, (int32_t)1))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 840));
		bool L_53 = V_15;
		if (!L_53)
		{
			goto IL_0265;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 841));
		// switch (ColumnAlignment)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 842));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 920));
		int32_t L_54 = GridObjectCollection_get_ColumnAlignment_mE073EF4E31127CB909C5E35CD4E753CF1D3E3794(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 920));
		V_16 = L_54;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 843));
		int32_t L_55 = V_16;
		switch (L_55)
		{
			case 0:
			{
				goto IL_021b;
			}
			case 1:
			{
				goto IL_0224;
			}
			case 2:
			{
				goto IL_0247;
			}
		}
	}
	{
		goto IL_0264;
	}

IL_021b:
	{
		// alignmentOffsetX = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 844));
		V_5 = (0.0f);
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 845));
		goto IL_0264;
	}

IL_0224:
	{
		// alignmentOffsetX = CellWidth * ((xMax - (NodeList.Count % xMax)) % xMax) * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 846));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 921));
		float L_56 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 921));
		int32_t L_57 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 922));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_58 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 922));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 923));
		NullCheck(L_58);
		int32_t L_59 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_58, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 923));
		int32_t L_60 = V_1;
		int32_t L_61 = V_1;
		V_5 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)L_56, (float)(((float)((float)((int32_t)((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_57, (int32_t)((int32_t)((int32_t)L_59%(int32_t)L_60))))%(int32_t)L_61))))))), (float)(0.5f)));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 847));
		goto IL_0264;
	}

IL_0247:
	{
		// alignmentOffsetX = CellWidth * ((xMax - (NodeList.Count % xMax)) % xMax);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 848));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 924));
		float L_62 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 924));
		int32_t L_63 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 925));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_64 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 925));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 926));
		NullCheck(L_64);
		int32_t L_65 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_64, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 926));
		int32_t L_66 = V_1;
		int32_t L_67 = V_1;
		V_5 = ((float)il2cpp_codegen_multiply((float)L_62, (float)(((float)((float)((int32_t)((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_63, (int32_t)((int32_t)((int32_t)L_65%(int32_t)L_66))))%(int32_t)L_67)))))));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 849));
		goto IL_0264;
	}

IL_0264:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 850));
	}

IL_0265:
	{
		// if (cellCounter < NodeList.Count)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 851));
		int32_t L_68 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 927));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_69 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 927));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 928));
		NullCheck(L_69);
		int32_t L_70 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_69, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 928));
		V_17 = (bool)((((int32_t)L_68) < ((int32_t)L_70))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 852));
		bool L_71 = V_17;
		if (!L_71)
		{
			goto IL_02f3;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 853));
		// grid[cellCounter].Set((-startOffsetX + (x * CellWidth) + HalfCell.x) + NodeList[cellCounter].Offset.x + alignmentOffsetX,
		//                      (startOffsetY - (y * CellHeight) - HalfCell.y) + NodeList[cellCounter].Offset.y + alignmentOffsetY,
		//                      0.0f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 854));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_72 = ___grid0;
		int32_t L_73 = V_0;
		NullCheck(L_72);
		float L_74 = V_3;
		int32_t L_75 = V_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 929));
		float L_76 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 929));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_77 = __this->get_address_of_HalfCell_25();
		float L_78 = L_77->get_x_0();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 930));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_79 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 930));
		int32_t L_80 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 931));
		NullCheck(L_79);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_81 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_79, L_80, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 931));
		NullCheck(L_81);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_82 = L_81->get_address_of_Offset_1();
		float L_83 = L_82->get_x_0();
		float L_84 = V_5;
		float L_85 = V_4;
		int32_t L_86 = V_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 932));
		float L_87 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 932));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_88 = __this->get_address_of_HalfCell_25();
		float L_89 = L_88->get_y_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 933));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_90 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 933));
		int32_t L_91 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 934));
		NullCheck(L_90);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_92 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_90, L_91, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 934));
		NullCheck(L_92);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_93 = L_92->get_address_of_Offset_1();
		float L_94 = L_93->get_y_1();
		float L_95 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 935));
		Vector3_Set_m8F08F9B5324A755A28A0832DCA2A0CB19423E5EC((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)((L_72)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_73))), ((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((-L_74)), (float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_75))), (float)L_76)))), (float)L_78)), (float)L_83)), (float)L_84)), ((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_subtract((float)((float)il2cpp_codegen_subtract((float)L_85, (float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_86))), (float)L_87)))), (float)L_89)), (float)L_94)), (float)L_95)), (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 935));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 855));
	}

IL_02f3:
	{
		// cellCounter++;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 856));
		int32_t L_96 = V_0;
		V_0 = ((int32_t)il2cpp_codegen_add((int32_t)L_96, (int32_t)1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 857));
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 858));
		int32_t L_97 = V_14;
		V_14 = ((int32_t)il2cpp_codegen_add((int32_t)L_97, (int32_t)1));
	}

IL_02fe:
	{
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 859));
		int32_t L_98 = V_14;
		int32_t L_99 = V_1;
		V_18 = (bool)((((int32_t)L_98) < ((int32_t)L_99))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 860));
		bool L_100 = V_18;
		if (L_100)
		{
			goto IL_01ef;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 861));
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 862));
		int32_t L_101 = V_13;
		V_13 = ((int32_t)il2cpp_codegen_add((int32_t)L_101, (int32_t)1));
	}

IL_0313:
	{
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 863));
		int32_t L_102 = V_13;
		int32_t L_103 = V_2;
		V_19 = (bool)((((int32_t)L_102) < ((int32_t)L_103))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 864));
		bool L_104 = V_19;
		if (L_104)
		{
			goto IL_01e6;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 865));
		goto IL_046e;
	}

IL_0327:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 866));
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 867));
		V_20 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 868));
		goto IL_045f;
	}

IL_0330:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 869));
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 870));
		V_21 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 871));
		goto IL_044a;
	}

IL_0339:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 872));
		// if (x == xMax - 1)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 873));
		int32_t L_105 = V_20;
		int32_t L_106 = V_1;
		V_22 = (bool)((((int32_t)L_105) == ((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_106, (int32_t)1))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 874));
		bool L_107 = V_22;
		if (!L_107)
		{
			goto IL_03b1;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 875));
		// switch (RowAlignment)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 876));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 936));
		int32_t L_108 = GridObjectCollection_get_RowAlignment_m5C0B7E524894A8CC1D9F0D6FE1397CE2A8CD556A(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 936));
		V_23 = L_108;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 877));
		int32_t L_109 = V_23;
		switch (L_109)
		{
			case 0:
			{
				goto IL_0365;
			}
			case 1:
			{
				goto IL_036e;
			}
			case 2:
			{
				goto IL_0392;
			}
		}
	}
	{
		goto IL_03b0;
	}

IL_0365:
	{
		// alignmentOffsetY = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 878));
		V_6 = (0.0f);
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 879));
		goto IL_03b0;
	}

IL_036e:
	{
		// alignmentOffsetY = -CellHeight * ((yMax - (NodeList.Count % yMax)) % yMax) * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 880));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 937));
		float L_110 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 937));
		int32_t L_111 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 938));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_112 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 938));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 939));
		NullCheck(L_112);
		int32_t L_113 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_112, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 939));
		int32_t L_114 = V_2;
		int32_t L_115 = V_2;
		V_6 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)((-L_110)), (float)(((float)((float)((int32_t)((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_111, (int32_t)((int32_t)((int32_t)L_113%(int32_t)L_114))))%(int32_t)L_115))))))), (float)(0.5f)));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 881));
		goto IL_03b0;
	}

IL_0392:
	{
		// alignmentOffsetY = -CellHeight * ((yMax - (NodeList.Count % yMax)) % yMax);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 882));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 940));
		float L_116 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 940));
		int32_t L_117 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 941));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_118 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 941));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 942));
		NullCheck(L_118);
		int32_t L_119 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_118, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 942));
		int32_t L_120 = V_2;
		int32_t L_121 = V_2;
		V_6 = ((float)il2cpp_codegen_multiply((float)((-L_116)), (float)(((float)((float)((int32_t)((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_117, (int32_t)((int32_t)((int32_t)L_119%(int32_t)L_120))))%(int32_t)L_121)))))));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 883));
		goto IL_03b0;
	}

IL_03b0:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 884));
	}

IL_03b1:
	{
		// if (cellCounter < NodeList.Count)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 885));
		int32_t L_122 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 943));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_123 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 943));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 944));
		NullCheck(L_123);
		int32_t L_124 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_123, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 944));
		V_24 = (bool)((((int32_t)L_122) < ((int32_t)L_124))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 886));
		bool L_125 = V_24;
		if (!L_125)
		{
			goto IL_043f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 887));
		// grid[cellCounter].Set((-startOffsetX + (x * CellWidth) + HalfCell.x) + NodeList[cellCounter].Offset.x + alignmentOffsetX,
		//                      (startOffsetY - (y * CellHeight) - HalfCell.y) + NodeList[cellCounter].Offset.y + alignmentOffsetY,
		//                      0.0f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 888));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_126 = ___grid0;
		int32_t L_127 = V_0;
		NullCheck(L_126);
		float L_128 = V_3;
		int32_t L_129 = V_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 945));
		float L_130 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 945));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_131 = __this->get_address_of_HalfCell_25();
		float L_132 = L_131->get_x_0();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 946));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_133 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 946));
		int32_t L_134 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 947));
		NullCheck(L_133);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_135 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_133, L_134, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 947));
		NullCheck(L_135);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_136 = L_135->get_address_of_Offset_1();
		float L_137 = L_136->get_x_0();
		float L_138 = V_5;
		float L_139 = V_4;
		int32_t L_140 = V_21;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 948));
		float L_141 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 948));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_142 = __this->get_address_of_HalfCell_25();
		float L_143 = L_142->get_y_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 949));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_144 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 949));
		int32_t L_145 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 950));
		NullCheck(L_144);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_146 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_144, L_145, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 950));
		NullCheck(L_146);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * L_147 = L_146->get_address_of_Offset_1();
		float L_148 = L_147->get_y_1();
		float L_149 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 951));
		Vector3_Set_m8F08F9B5324A755A28A0832DCA2A0CB19423E5EC((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)((L_126)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_127))), ((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((-L_128)), (float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_129))), (float)L_130)))), (float)L_132)), (float)L_137)), (float)L_138)), ((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_add((float)((float)il2cpp_codegen_subtract((float)((float)il2cpp_codegen_subtract((float)L_139, (float)((float)il2cpp_codegen_multiply((float)(((float)((float)L_140))), (float)L_141)))), (float)L_143)), (float)L_148)), (float)L_149)), (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 951));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 889));
	}

IL_043f:
	{
		// cellCounter++;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 890));
		int32_t L_150 = V_0;
		V_0 = ((int32_t)il2cpp_codegen_add((int32_t)L_150, (int32_t)1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 891));
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 892));
		int32_t L_151 = V_21;
		V_21 = ((int32_t)il2cpp_codegen_add((int32_t)L_151, (int32_t)1));
	}

IL_044a:
	{
		// for (int y = 0; y < yMax; y++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 893));
		int32_t L_152 = V_21;
		int32_t L_153 = V_2;
		V_25 = (bool)((((int32_t)L_152) < ((int32_t)L_153))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 894));
		bool L_154 = V_25;
		if (L_154)
		{
			goto IL_0339;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 895));
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 896));
		int32_t L_155 = V_20;
		V_20 = ((int32_t)il2cpp_codegen_add((int32_t)L_155, (int32_t)1));
	}

IL_045f:
	{
		// for (int x = 0; x < xMax; x++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 897));
		int32_t L_156 = V_20;
		int32_t L_157 = V_1;
		V_26 = (bool)((((int32_t)L_156) < ((int32_t)L_157))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 898));
		bool L_158 = V_26;
		if (L_158)
		{
			goto IL_0330;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 899));
	}

IL_046e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 900));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::UpdateNodeFacing(Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * ___node0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	int32_t V_2 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___node0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 952));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 953));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 954));
		// switch (OrientType)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 955));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 981));
		int32_t L_0 = GridObjectCollection_get_OrientType_m813415524BC89A4C6529EC7E152A201927E6FBA7(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 981));
		V_2 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 956));
		int32_t L_1 = V_2;
		switch (L_1)
		{
			case 0:
			{
				goto IL_021b;
			}
			case 1:
			{
				goto IL_0037;
			}
			case 2:
			{
				goto IL_0073;
			}
			case 3:
			{
				goto IL_018f;
			}
			case 4:
			{
				goto IL_01b2;
			}
			case 5:
			{
				goto IL_01d5;
			}
			case 6:
			{
				goto IL_01f8;
			}
			case 7:
			{
				goto IL_00af;
			}
			case 8:
			{
				goto IL_011f;
			}
		}
	}
	{
		goto IL_021d;
	}

IL_0037:
	{
		// node.Transform.rotation = Quaternion.LookRotation(node.Transform.position - transform.position, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 957));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_2 = ___node0;
		NullCheck(L_2);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_3 = L_2->get_Transform_3();
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_4 = ___node0;
		NullCheck(L_4);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_5 = L_4->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 982));
		NullCheck(L_5);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 982));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 983));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 983));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 984));
		NullCheck(L_7);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 984));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 985));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_6, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 985));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 986));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_10 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 986));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 987));
		NullCheck(L_10);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 987));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 988));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_12 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_9, L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 988));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 989));
		NullCheck(L_3);
		Transform_set_rotation_m429694E264117C6DC682EC6AF45C7864E5155935(L_3, L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 989));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 958));
		goto IL_022a;
	}

IL_0073:
	{
		// node.Transform.rotation = Quaternion.LookRotation(transform.position - node.Transform.position, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 959));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_13 = ___node0;
		NullCheck(L_13);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_14 = L_13->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 990));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_15 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 990));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 991));
		NullCheck(L_15);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_15, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 991));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_17 = ___node0;
		NullCheck(L_17);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_18 = L_17->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 992));
		NullCheck(L_18);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 992));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 993));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_16, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 993));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 994));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_21 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 994));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 995));
		NullCheck(L_21);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 995));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 996));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_23 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_20, L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 996));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 997));
		NullCheck(L_14);
		Transform_set_rotation_m429694E264117C6DC682EC6AF45C7864E5155935(L_14, L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 997));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 960));
		goto IL_022a;
	}

IL_00af:
	{
		// centerAxis = Vector3.Project(node.Transform.position - transform.position, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 961));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_24 = ___node0;
		NullCheck(L_24);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_25 = L_24->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 998));
		NullCheck(L_25);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 998));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 999));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_27 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 999));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1000));
		NullCheck(L_27);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_28 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_27, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1000));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1001));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_26, L_28, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1001));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1002));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_30 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1002));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1003));
		NullCheck(L_30);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1003));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1004));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_32 = Vector3_Project_m3A2D462C2548AA76EB0BCD3305B1E8588347DB9D(L_29, L_31, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1004));
		V_0 = L_32;
		// pointOnAxisNearestNode = transform.position + centerAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 962));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1005));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_33 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1005));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1006));
		NullCheck(L_33);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_34 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1006));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_35 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1007));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_36 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_34, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1007));
		V_1 = L_36;
		// node.Transform.rotation = Quaternion.LookRotation(node.Transform.position - pointOnAxisNearestNode, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 963));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_37 = ___node0;
		NullCheck(L_37);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_38 = L_37->get_Transform_3();
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_39 = ___node0;
		NullCheck(L_39);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_40 = L_39->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1008));
		NullCheck(L_40);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_40, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1008));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_42 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1009));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_43 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_41, L_42, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1009));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1010));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_44 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1010));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1011));
		NullCheck(L_44);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_45 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1011));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1012));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_46 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_43, L_45, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1012));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1013));
		NullCheck(L_38);
		Transform_set_rotation_m429694E264117C6DC682EC6AF45C7864E5155935(L_38, L_46, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1013));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 964));
		goto IL_022a;
	}

IL_011f:
	{
		// centerAxis = Vector3.Project(node.Transform.position - transform.position, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 965));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_47 = ___node0;
		NullCheck(L_47);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_48 = L_47->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1014));
		NullCheck(L_48);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_49 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_48, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1014));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1015));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_50 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1015));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1016));
		NullCheck(L_50);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_51 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_50, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1016));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1017));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_52 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_49, L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1017));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1018));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_53 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1018));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1019));
		NullCheck(L_53);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_54 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_53, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1019));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1020));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_55 = Vector3_Project_m3A2D462C2548AA76EB0BCD3305B1E8588347DB9D(L_52, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1020));
		V_0 = L_55;
		// pointOnAxisNearestNode = transform.position + centerAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 966));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1021));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_56 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1021));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1022));
		NullCheck(L_56);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_57 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_56, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1022));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_58 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1023));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_59 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_57, L_58, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1023));
		V_1 = L_59;
		// node.Transform.rotation = Quaternion.LookRotation(pointOnAxisNearestNode - node.Transform.position, transform.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 967));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_60 = ___node0;
		NullCheck(L_60);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_61 = L_60->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_62 = V_1;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_63 = ___node0;
		NullCheck(L_63);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_64 = L_63->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1024));
		NullCheck(L_64);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_65 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_64, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1024));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1025));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_66 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_62, L_65, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1025));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1026));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_67 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1026));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1027));
		NullCheck(L_67);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_68 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_67, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1027));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1028));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_69 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_66, L_68, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1028));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1029));
		NullCheck(L_61);
		Transform_set_rotation_m429694E264117C6DC682EC6AF45C7864E5155935(L_61, L_69, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1029));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 968));
		goto IL_022a;
	}

IL_018f:
	{
		// node.Transform.forward = transform.rotation * Vector3.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 969));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_70 = ___node0;
		NullCheck(L_70);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_71 = L_70->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1030));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_72 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1030));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1031));
		NullCheck(L_72);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_73 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_72, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1031));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1032));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_74 = Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1032));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1033));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_75 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_73, L_74, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1033));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1034));
		NullCheck(L_71);
		Transform_set_forward_m02858E8B3313B27174B19E9113F24EF25FBCEC7F(L_71, L_75, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1034));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 970));
		goto IL_022a;
	}

IL_01b2:
	{
		// node.Transform.forward = transform.rotation * Vector3.back;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 971));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_76 = ___node0;
		NullCheck(L_76);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_77 = L_76->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1035));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_78 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1035));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1036));
		NullCheck(L_78);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_79 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_78, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1036));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1037));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_80 = Vector3_get_back_mE7EF8625637E6F8B9E6B42A6AE140777C51E02F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1037));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1038));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_81 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_79, L_80, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1038));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1039));
		NullCheck(L_77);
		Transform_set_forward_m02858E8B3313B27174B19E9113F24EF25FBCEC7F(L_77, L_81, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1039));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 972));
		goto IL_022a;
	}

IL_01d5:
	{
		// node.Transform.forward = transform.rotation * Vector3.up;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 973));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_82 = ___node0;
		NullCheck(L_82);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_83 = L_82->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1040));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_84 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1040));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1041));
		NullCheck(L_84);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_85 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_84, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1041));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1042));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_86 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1042));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1043));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_87 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_85, L_86, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1043));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1044));
		NullCheck(L_83);
		Transform_set_forward_m02858E8B3313B27174B19E9113F24EF25FBCEC7F(L_83, L_87, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1044));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 974));
		goto IL_022a;
	}

IL_01f8:
	{
		// node.Transform.forward = transform.rotation * Vector3.down;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 975));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_88 = ___node0;
		NullCheck(L_88);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_89 = L_88->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1045));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_90 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1045));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1046));
		NullCheck(L_90);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_91 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_90, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1046));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1047));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_92 = Vector3_get_down_m3F76A48E5B7C82B35EE047375538AFD91A305F55(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1047));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1048));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_93 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_91, L_92, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1048));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1049));
		NullCheck(L_89);
		Transform_set_forward_m02858E8B3313B27174B19E9113F24EF25FBCEC7F(L_89, L_93, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1049));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 976));
		goto IL_022a;
	}

IL_021b:
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 977));
		goto IL_022a;
	}

IL_021d:
	{
		// Debug.LogWarning("OrientationType out of range");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 978));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1050));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogWarning_m37338644DC81F640CCDFEAE35A223F0E965F0568(_stringLiteralBE46EBBCE2D34C657657AC4DB28D959908FA7215, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1050));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 979));
		goto IL_022a;
	}

IL_022a:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 980));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::OnDrawGizmosSelected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_OnDrawGizmosSelected_mEC179401E69AB9C1011B94077120DF5768A7590F (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_OnDrawGizmosSelected_mEC179401E69AB9C1011B94077120DF5768A7590F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	int32_t V_1 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_OnDrawGizmosSelected_mEC179401E69AB9C1011B94077120DF5768A7590F_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1051));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1052));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1053));
		// Vector3 scale = (2f * radius) * Vector3.one;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1054));
		float L_0 = __this->get_radius_15();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1065));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1065));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1066));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Vector3_op_Multiply_mC7A8D6FD19E58DBF98E30D454F59F142F7BF8839(((float)il2cpp_codegen_multiply((float)(2.0f), (float)L_0)), L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1066));
		V_0 = L_2;
		// switch (surfaceType)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1055));
		int32_t L_3 = __this->get_surfaceType_8();
		V_1 = L_3;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1056));
		int32_t L_4 = V_1;
		switch (L_4)
		{
			case 0:
			{
				goto IL_0035;
			}
			case 1:
			{
				goto IL_0033;
			}
			case 2:
			{
				goto IL_0065;
			}
		}
	}
	{
		goto IL_0095;
	}

IL_0033:
	{
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1057));
		goto IL_0095;
	}

IL_0035:
	{
		// Gizmos.color = Color.green;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1058));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1067));
		Color_t119BCA590009762C7223FDD3AF9706653AC84ED2  L_5 = Color_get_green_mD53D8F980E92A0755759FBB2981E3DDEFCD084C0(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1067));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1068));
		Gizmos_set_color_mFA6C199DF05FF557AEF662222CA60EC25DF54F28(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1068));
		// Gizmos.DrawWireMesh(CylinderMesh, transform.position, transform.rotation, scale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1059));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1069));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_6 = GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1069));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1070));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1070));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1071));
		NullCheck(L_7);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1071));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1072));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_9 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1072));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1073));
		NullCheck(L_9);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_10 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1073));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1074));
		Gizmos_DrawWireMesh_mCAAFD2D9A13919911A410B61C953FB73E92D16AB(L_6, L_8, L_10, L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1074));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1060));
		goto IL_0095;
	}

IL_0065:
	{
		// Gizmos.color = Color.green;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1061));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1075));
		Color_t119BCA590009762C7223FDD3AF9706653AC84ED2  L_12 = Color_get_green_mD53D8F980E92A0755759FBB2981E3DDEFCD084C0(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1075));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1076));
		Gizmos_set_color_mFA6C199DF05FF557AEF662222CA60EC25DF54F28(L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1076));
		// Gizmos.DrawWireMesh(SphereMesh, transform.position, transform.rotation, scale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1062));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1077));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_13 = GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1077));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1078));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_14 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1078));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1079));
		NullCheck(L_14);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1079));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1080));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_16 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1080));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1081));
		NullCheck(L_16);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_17 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1081));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1082));
		Gizmos_DrawWireMesh_mCAAFD2D9A13919911A410B61C953FB73E92D16AB(L_13, L_15, L_17, L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1082));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1063));
		goto IL_0095;
	}

IL_0095:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1064));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::PerformVersionPatching()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_PerformVersionPatching_m487825AEFAC10E9A229179A1F48B7BB5E6C2667E (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_PerformVersionPatching_m487825AEFAC10E9A229179A1F48B7BB5E6C2667E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	String_t* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_PerformVersionPatching_m487825AEFAC10E9A229179A1F48B7BB5E6C2667E_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1083));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1084));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1085));
		// if (assetVersion == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1086));
		int32_t L_0 = __this->get_assetVersion_27();
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1087));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0025;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1088));
		// string friendlyName = GetUserFriendlyName();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1089));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1095));
		String_t* L_2 = GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1095));
		V_1 = L_2;
		// UpgradeAssetToVersion1();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1090));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1096));
		GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1096));
		// assetVersion = 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1091));
		__this->set_assetVersion_27(1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1092));
	}

IL_0025:
	{
		// assetVersion = CurrentAssetVersion;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1093));
		__this->set_assetVersion_27(1);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1094));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::UpgradeAssetToVersion1()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	String_t* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_UpgradeAssetToVersion1_mA24ABBC55098AC492AA961088A9A96A3301B8CAD_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1097));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1098));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1099));
		// if (Layout == LayoutOrder.ColumnThenRow)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1100));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1108));
		int32_t L_0 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1108));
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1101));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0035;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1102));
		// Layout = LayoutOrder.RowThenColumn;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1103));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1109));
		GridObjectCollection_set_Layout_mC1F6A12B934C62FB23A2FD0FE2A27C301A9FEC17(__this, 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1109));
		// var friendlyName = GetUserFriendlyName();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1104));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1110));
		String_t* L_2 = GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1110));
		V_1 = L_2;
		// Debug.Log($"[MRTK 2.2 asset upgrade] Changing LayoutOrder for {friendlyName} from ColumnThenRow to RowThenColumn. See https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6773#issuecomment-561918891 for details.");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1105));
		String_t* L_3 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1111));
		String_t* L_4 = String_Concat_mF4626905368D6558695A823466A1AF65EADB9923(_stringLiteral50B5B968AF864CDF79AEA1287DD359A68755D54F, L_3, _stringLiteral7160A9C4DEE47E26FD9CC4B22D1E1DB1642B97BB, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1111));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1112));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_Log_m4B7C70BAFD477C6BDB59C88A0934F0B018D03708(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1112));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1106));
	}

IL_0035:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1107));
		return;
	}
}
// System.String Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::GetUserFriendlyName()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	String_t* V_0 = NULL;
	bool V_1 = false;
	String_t* V_2 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_GetUserFriendlyName_m964F62B02090491D69E8B850067591B3B8415907_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1113));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1114));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1115));
		// string objectName = gameObject.name;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1116));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1124));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_0 = Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1124));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1125));
		NullCheck(L_0);
		String_t* L_1 = Object_get_name_mA2D400141CB3C991C87A2556429781DE961A83CE(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1125));
		V_0 = L_1;
		// if (gameObject.transform.parent != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1117));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1126));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_2 = Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1126));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1127));
		NullCheck(L_2);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_3 = GameObject_get_transform_mA5C38857137F137CB96C69FAA624199EB1C2FB2C(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1127));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1128));
		NullCheck(L_3);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_4 = Transform_get_parent_m8FA24E38A1FA29D90CBF3CDC9F9F017C65BB3403(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1128));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1129));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_5 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_4, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1129));
		V_1 = L_5;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1118));
		bool L_6 = V_1;
		if (!L_6)
		{
			goto IL_004f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1119));
		// objectName += " (parent " + transform.parent.gameObject.name + ")";
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1120));
		String_t* L_7 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1130));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_8 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1130));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1131));
		NullCheck(L_8);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_9 = Transform_get_parent_m8FA24E38A1FA29D90CBF3CDC9F9F017C65BB3403(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1131));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1132));
		NullCheck(L_9);
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_10 = Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C(L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1132));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1133));
		NullCheck(L_10);
		String_t* L_11 = Object_get_name_mA2D400141CB3C991C87A2556429781DE961A83CE(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1133));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1134));
		String_t* L_12 = String_Concat_mDD2E38332DED3A8C088D38D78A0E0BEB5091DA64(L_7, _stringLiteral9144754C25D0CBDBB7BBF4497B2F143DE5CCFBE6, L_11, _stringLiteralE7064F0B80F61DBC65915311032D27BAA569AE2A, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1134));
		V_0 = L_12;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1121));
	}

IL_004f:
	{
		// return objectName;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1122));
		String_t* L_13 = V_0;
		V_2 = L_13;
		goto IL_0053;
	}

IL_0053:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1123));
		String_t* L_14 = V_2;
		return L_14;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4 (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1135));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1136));
	{
		// private ObjectOrientationSurfaceType surfaceType = ObjectOrientationSurfaceType.Plane;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1137));
		__this->set_surfaceType_8(1);
		// private OrientationType orientType = OrientationType.None;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1138));
		__this->set_orientType_9(0);
		// private LayoutOrder layout = LayoutOrder.RowThenColumn;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1139));
		__this->set_layout_10(1);
		// private LayoutAnchor anchor = LayoutAnchor.MiddleCenter;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1140));
		__this->set_anchor_11(4);
		// private bool anchorAlongAxis = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1141));
		__this->set_anchorAlongAxis_12((bool)0);
		// private LayoutHorizontalAlignment columnAlignment = LayoutHorizontalAlignment.Left;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1142));
		__this->set_columnAlignment_13(0);
		// private LayoutVerticalAlignment rowAlignment = LayoutVerticalAlignment.Top;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1143));
		__this->set_rowAlignment_14(0);
		// private float radius = 2f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1144));
		__this->set_radius_15((2.0f));
		// private float radialRange = 180f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1145));
		__this->set_radialRange_16((180.0f));
		// private float distance = 0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1146));
		__this->set_distance_17((0.0f));
		// private int rows = DefaultValueRowsCols;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1147));
		__this->set_rows_19(3);
		// private int columns = DefaultValueRowsCols;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1148));
		__this->set_columns_20(3);
		// private float cellWidth = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1149));
		__this->set_cellWidth_21((0.5f));
		// private float cellHeight = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1150));
		__this->set_cellHeight_22((0.5f));
		// private int assetVersion = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1151));
		__this->set_assetVersion_27(0);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1152));
		BaseObjectCollection__ctor_mB4DB96D598D759957AAF2B78F6BF4F3DED7A2BD4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1152));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HeadPositionOffset_Start_m693E19366C7205D96F7D17CF2C412DDCA4F97347 (HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HeadPositionOffset_Start_m693E19366C7205D96F7D17CF2C412DDCA4F97347_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HeadPositionOffset_Start_m693E19366C7205D96F7D17CF2C412DDCA4F97347_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1606));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1607));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1608));
		// transform.position = CameraCache.Main.transform.position + HeadOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1609));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1612));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1612));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1613));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_1 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1613));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1614));
		NullCheck(L_1);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_2 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1614));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1615));
		NullCheck(L_2);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1615));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = __this->get_HeadOffset_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1616));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_3, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1616));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1617));
		NullCheck(L_0);
		Transform_set_position_mDA89E4893F14ECA5CBEEE7FB80A5BF7C1B8EA6DC(L_0, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1617));
		// started = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1610));
		__this->set_started_5((bool)1);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1611));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HeadPositionOffset_OnEnable_mABAD8950E285FE6A703C4C088DCC99C67D59E851 (HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HeadPositionOffset_OnEnable_mABAD8950E285FE6A703C4C088DCC99C67D59E851_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HeadPositionOffset_OnEnable_mABAD8950E285FE6A703C4C088DCC99C67D59E851_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1618));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1619));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1620));
		// if (started)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1621));
		bool L_0 = __this->get_started_5();
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1622));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0033;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1623));
		// transform.position = CameraCache.Main.transform.position + HeadOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1624));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1627));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_2 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1627));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1628));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_3 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1628));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1629));
		NullCheck(L_3);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_4 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1629));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1630));
		NullCheck(L_4);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1630));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = __this->get_HeadOffset_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1631));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_5, L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1631));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1632));
		NullCheck(L_2);
		Transform_set_position_mDA89E4893F14ECA5CBEEE7FB80A5BF7C1B8EA6DC(L_2, L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1632));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1625));
	}

IL_0033:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1626));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HeadPositionOffset__ctor_mB9A4E41B46CE874EEEF94B4E5DAFC0DE2A56C4DE (HeadPositionOffset_t3EF4B92B8AF091BBEBB1E02C11B96FF7D1652BD3 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HeadPositionOffset__ctor_mB9A4E41B46CE874EEEF94B4E5DAFC0DE2A56C4DE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HeadPositionOffset__ctor_mB9A4E41B46CE874EEEF94B4E5DAFC0DE2A56C4DE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1633));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1634));
	{
		// public Vector3 HeadOffset = new Vector3(0, 0, 1f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1635));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1637));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0;
		memset((&L_0), 0, sizeof(L_0));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_0), (0.0f), (0.0f), (1.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1637));
		__this->set_HeadOffset_4(L_0);
		// private bool started = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1636));
		__this->set_started_5((bool)0);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1638));
		MonoBehaviour__ctor_mEAEC84B222C60319D593E456D769B3311DFCEF97(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1638));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ObjectCollectionNode__ctor_mFC564274121B77F0053319D6B78A4BAC97781BD4 (ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ObjectCollectionNode__ctor_mFC564274121B77F0053319D6B78A4BAC97781BD4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ObjectCollectionNode__ctor_mFC564274121B77F0053319D6B78A4BAC97781BD4_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void RectTransformCubeScaler_Start_m4203AF72574495302E43130EE6BA9AEAF06AD0D4 (RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (RectTransformCubeScaler_Start_m4203AF72574495302E43130EE6BA9AEAF06AD0D4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, RectTransformCubeScaler_Start_m4203AF72574495302E43130EE6BA9AEAF06AD0D4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1506));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1507));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1508));
		// rectTransform = GetComponent<RectTransform>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1509));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1511));
		RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * L_0 = Component_GetComponent_TisRectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_mEF939F54B6B56187EC11E16F51DCB12EB62C2103(__this, /*hidden argument*/Component_GetComponent_TisRectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20_mEF939F54B6B56187EC11E16F51DCB12EB62C2103_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1511));
		__this->set_rectTransform_4(L_0);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1510));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::Update()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void RectTransformCubeScaler_Update_m22F11390C664A279EF4B0334568CED8CACE06E31 (RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (RectTransformCubeScaler_Update_m22F11390C664A279EF4B0334568CED8CACE06E31_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Rect_t35B976DE901B5423C11705E156938EA27AB402CE  V_1;
	memset((&V_1), 0, sizeof(V_1));
	bool V_2 = false;
	bool V_3 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, RectTransformCubeScaler_Update_m22F11390C664A279EF4B0334568CED8CACE06E31_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1512));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1513));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1514));
		// var size = rectTransform.rect.size;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1515));
		RectTransform_t285CBD8775B25174B75164F10618F8B9728E1B20 * L_0 = __this->get_rectTransform_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1528));
		NullCheck(L_0);
		Rect_t35B976DE901B5423C11705E156938EA27AB402CE  L_1 = RectTransform_get_rect_mE5F283FCB99A66403AC1F0607CA49C156D73A15E(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1528));
		V_1 = L_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1529));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = Rect_get_size_m731642B8F03F6CE372A2C9E2E4A925450630606C((Rect_t35B976DE901B5423C11705E156938EA27AB402CE *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1529));
		V_0 = L_2;
		// if (prevRectSize != size
		//     || prevObjectToScale != objectToScale)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1516));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = __this->get_prevRectSize_5();
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1530));
		IL2CPP_RUNTIME_CLASS_INIT(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var);
		bool L_5 = Vector2_op_Inequality_mC16161C640C89D98A00800924F83FF09FD7C100E(L_3, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1530));
		if (L_5)
		{
			goto IL_0036;
		}
	}
	{
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_6 = __this->get_prevObjectToScale_7();
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = __this->get_objectToScale_6();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1531));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_8 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_6, L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1531));
		G_B3_0 = ((int32_t)(L_8));
		goto IL_0037;
	}

IL_0036:
	{
		G_B3_0 = 1;
	}

IL_0037:
	{
		V_2 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1517));
		bool L_9 = V_2;
		if (!L_9)
		{
			goto IL_0090;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1518));
		// prevRectSize = size;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1519));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_10 = V_0;
		__this->set_prevRectSize_5(L_10);
		// prevObjectToScale = objectToScale;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1520));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_11 = __this->get_objectToScale_6();
		__this->set_prevObjectToScale_7(L_11);
		// if (objectToScale != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1521));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_12 = __this->get_objectToScale_6();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1532));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_13 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_12, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1532));
		V_3 = L_13;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1522));
		bool L_14 = V_3;
		if (!L_14)
		{
			goto IL_008f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1523));
		// objectToScale.localScale = new Vector3(size.x, size.y, Mathf.Min(size.x, size.y));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1524));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_15 = __this->get_objectToScale_6();
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_16 = V_0;
		float L_17 = L_16.get_x_0();
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_18 = V_0;
		float L_19 = L_18.get_y_1();
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_20 = V_0;
		float L_21 = L_20.get_x_0();
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_22 = V_0;
		float L_23 = L_22.get_y_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1533));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_24 = Mathf_Min_mCF9BE0E9CAC9F18D207692BB2DAC7F3E1D4E1CB7(L_21, L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1533));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1534));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25;
		memset((&L_25), 0, sizeof(L_25));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_25), L_17, L_19, L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1534));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1535));
		NullCheck(L_15);
		Transform_set_localScale_m7ED1A6E5A87CD1D483515B99D6D3121FB92B0556(L_15, L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1535));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1525));
	}

IL_008f:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1526));
	}

IL_0090:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1527));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void RectTransformCubeScaler__ctor_mCE3A9510E1B34F8FA4F63AC8AD811D87BB544F47 (RectTransformCubeScaler_t3D3DB6527914D4B61B8E82F048433B98ED7F1DB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (RectTransformCubeScaler__ctor_mCE3A9510E1B34F8FA4F63AC8AD811D87BB544F47_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, RectTransformCubeScaler__ctor_mCE3A9510E1B34F8FA4F63AC8AD811D87BB544F47_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1536));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1537));
	{
		// private Vector2 prevRectSize = Vector2.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1538));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1541));
		IL2CPP_RUNTIME_CLASS_INIT(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = Vector2_get_zero_mFE0C3213BB698130D6C5247AB4B887A59074D0A8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1541));
		__this->set_prevRectSize_5(L_0);
		// private Transform objectToScale = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1539));
		__this->set_objectToScale_6((Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA *)NULL);
		// private Transform prevObjectToScale = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1540));
		__this->set_prevObjectToScale_7((Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA *)NULL);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1542));
		MonoBehaviour__ctor_mEAEC84B222C60319D593E456D769B3311DFCEF97(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1542));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection::LayoutChildren()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ScatterObjectCollection_LayoutChildren_m2D5110CFE453F408A95F252F89AC6F79AB475984 (ScatterObjectCollection_t2932B812F93E9835CF59CD0CCD179DF22A0136F0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ScatterObjectCollection_LayoutChildren_m2D5110CFE453F408A95F252F89AC6F79AB475984_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_0 = NULL;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	int32_t V_2 = 0;
	ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * V_3 = NULL;
	Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * V_4 = NULL;
	bool V_5 = false;
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_6;
	memset((&V_6), 0, sizeof(V_6));
	bool V_7 = false;
	int32_t V_8 = 0;
	bool V_9 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_6), (&V_8));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ScatterObjectCollection_LayoutChildren_m2D5110CFE453F408A95F252F89AC6F79AB475984_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1153));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1154));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1155));
		// Vector3[] nodeGrid = new Vector3[NodeList.Count];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1156));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1191));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_0 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1191));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1192));
		NullCheck(L_0);
		int32_t L_1 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_0, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1192));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_2 = (Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)SZArrayNew(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var, (uint32_t)L_1);
		V_0 = L_2;
		// Columns = Mathf.CeilToInt((float)NodeList.Count / Rows);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1157));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1193));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_3 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1193));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1194));
		NullCheck(L_3);
		int32_t L_4 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_3, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1194));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1195));
		int32_t L_5 = GridObjectCollection_get_Rows_m5FF2E1CBB851CC8585370AF47FA492B2DB02F4B4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1195));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1196));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_6 = Mathf_CeilToInt_m0230CCC7CC9266F18125D9425C38A25D1CA4275B(((float)((float)(((float)((float)L_4)))/(float)(((float)((float)L_5))))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1196));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1197));
		GridObjectCollection_set_Columns_m4D9A247FA199860953DBD1E6685FCD19EF53A57B(__this, L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1197));
		// HalfCell = new Vector2(CellWidth * 0.5f, CellHeight * 0.5f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1158));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1198));
		float L_7 = GridObjectCollection_get_CellWidth_mBADA4F8389BA606453C7945E16049DE32DC62245(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1198));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1199));
		float L_8 = GridObjectCollection_get_CellHeight_m1C4B4F4536B4B623B001A4420051135CAA61C269(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1199));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1200));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_9;
		memset((&L_9), 0, sizeof(L_9));
		Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0((&L_9), ((float)il2cpp_codegen_multiply((float)L_7, (float)(0.5f))), ((float)il2cpp_codegen_multiply((float)L_8, (float)(0.5f))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1200));
		((GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 *)__this)->set_HalfCell_25(L_9);
		// ResolveGridLayout(nodeGrid, Layout);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1159));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_10 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1201));
		int32_t L_11 = GridObjectCollection_get_Layout_m96EDF92332EDE459727901EC07E140B64C44E0E1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1201));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1202));
		GridObjectCollection_ResolveGridLayout_mB27F8C1F8C5BCCA4666588A358A9FC5561994FDB(__this, L_10, L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1202));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1160));
		V_2 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1161));
		goto IL_012d;
	}

IL_006a:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1162));
		// ObjectCollectionNode node = NodeList[i];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1163));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1203));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_12 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1203));
		int32_t L_13 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1204));
		NullCheck(L_12);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_14 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_12, L_13, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1204));
		V_3 = L_14;
		// newPos = VectorExtensions.ScatterMapping(nodeGrid[i], Radius);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1164));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_15 = V_0;
		int32_t L_16 = V_2;
		NullCheck(L_15);
		int32_t L_17 = L_16;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = (L_15)->GetAt(static_cast<il2cpp_array_size_t>(L_17));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1205));
		float L_19 = GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1205));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1206));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = VectorExtensions_ScatterMapping_mF028279E3B06B380631CABDC90C11AA11081F611(L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1206));
		V_1 = L_20;
		// Collider nodeCollider = NodeList[i].Transform.GetComponentInChildren<Collider>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1165));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1207));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_21 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1207));
		int32_t L_22 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1208));
		NullCheck(L_21);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_23 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_21, L_22, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1208));
		NullCheck(L_23);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_24 = L_23->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1209));
		NullCheck(L_24);
		Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * L_25 = Component_GetComponentInChildren_TisCollider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF_m92EFF432C642AEB971AAC3333F7A7170A7CC3318(L_24, /*hidden argument*/Component_GetComponentInChildren_TisCollider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF_m92EFF432C642AEB971AAC3333F7A7170A7CC3318_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1209));
		V_4 = L_25;
		// if (nodeCollider != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1166));
		Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * L_26 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1210));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_27 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_26, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1210));
		V_5 = L_27;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1167));
		bool L_28 = V_5;
		if (!L_28)
		{
			goto IL_00f8;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1168));
		// Bounds bounds = nodeCollider.bounds;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1169));
		Collider_t0FEEB36760860AD21B3B1F0509C365B393EC4BDF * L_29 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1211));
		NullCheck(L_29);
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  L_30 = Collider_get_bounds_mD3CB68E38FB998406193A88D18C01F510272058A(L_29, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1211));
		V_6 = L_30;
		// node.Radius = Mathf.Max(Mathf.Max(bounds.size.x, bounds.size.y), bounds.size.z) * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1170));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_31 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1212));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_32 = Bounds_get_size_m0739F2686AE2D3416A33AEF892653091347FD4A6((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1212));
		float L_33 = L_32.get_x_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1213));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_34 = Bounds_get_size_m0739F2686AE2D3416A33AEF892653091347FD4A6((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1213));
		float L_35 = L_34.get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1214));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_36 = Mathf_Max_m670AE0EC1B09ED1A56FF9606B0F954670319CB65(L_33, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1214));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1215));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_37 = Bounds_get_size_m0739F2686AE2D3416A33AEF892653091347FD4A6((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1215));
		float L_38 = L_37.get_z_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1216));
		float L_39 = Mathf_Max_m670AE0EC1B09ED1A56FF9606B0F954670319CB65(L_36, L_38, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1216));
		NullCheck(L_31);
		L_31->set_Radius_2(((float)il2cpp_codegen_multiply((float)L_39, (float)(0.5f))));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1171));
		goto IL_0105;
	}

IL_00f8:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1172));
		// node.Radius = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1173));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_40 = V_3;
		NullCheck(L_40);
		L_40->set_Radius_2((1.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1174));
	}

IL_0105:
	{
		// node.Transform.localPosition = newPos;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1175));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_41 = V_3;
		NullCheck(L_41);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_42 = L_41->get_Transform_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_43 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1217));
		NullCheck(L_42);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_42, L_43, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1217));
		// UpdateNodeFacing(node);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1176));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_44 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1218));
		GridObjectCollection_UpdateNodeFacing_m55DDF31187E367EEB69C643001C42604CD698710(__this, L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1218));
		// NodeList[i] = node;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1177));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1219));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_45 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1219));
		int32_t L_46 = V_2;
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_47 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1220));
		NullCheck(L_45);
		List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4(L_45, L_46, L_47, /*hidden argument*/List_1_set_Item_m9D6937FB23700BACC2C71214A8CED7947E6FA5A4_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1220));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1178));
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1179));
		int32_t L_48 = V_2;
		V_2 = ((int32_t)il2cpp_codegen_add((int32_t)L_48, (int32_t)1));
	}

IL_012d:
	{
		// for (int i = 0; i < NodeList.Count; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1180));
		int32_t L_49 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1221));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_50 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1221));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1222));
		NullCheck(L_50);
		int32_t L_51 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_50, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1222));
		V_7 = (bool)((((int32_t)L_49) < ((int32_t)L_51))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1181));
		bool L_52 = V_7;
		if (L_52)
		{
			goto IL_006a;
		}
	}
	{
		// for (int i = 0; i < 100; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1182));
		V_8 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1183));
		goto IL_0163;
	}

IL_0149:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1184));
		// IterateScatterPacking(NodeList, Radius);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1185));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1223));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_53 = BaseObjectCollection_get_NodeList_mB99A9F8A9DA7B8E3BA450E4A7A27A4A9F22584AA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1223));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1224));
		float L_54 = GridObjectCollection_get_Radius_mAC6403FE6DFCC8168FC7D984A1BFEF4A66607470(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1224));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1225));
		ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A(L_53, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1225));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1186));
		// for (int i = 0; i < 100; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1187));
		int32_t L_55 = V_8;
		V_8 = ((int32_t)il2cpp_codegen_add((int32_t)L_55, (int32_t)1));
	}

IL_0163:
	{
		// for (int i = 0; i < 100; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1188));
		int32_t L_56 = V_8;
		V_9 = (bool)((((int32_t)L_56) < ((int32_t)((int32_t)100)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1189));
		bool L_57 = V_9;
		if (L_57)
		{
			goto IL_0149;
		}
	}
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1190));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection::IterateScatterPacking(System.Collections.Generic.List`1<Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode>,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A (List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * ___nodes0, float ___radiusPadding1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_1;
	memset((&V_1), 0, sizeof(V_1));
	float V_2 = 0.0f;
	int32_t V_3 = 0;
	int32_t V_4 = 0;
	bool V_5 = false;
	float V_6 = 0.0f;
	float V_7 = 0.0f;
	float V_8 = 0.0f;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___nodes0), (&___radiusPadding1));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_6), (&V_7), (&V_8));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ScatterObjectCollection_IterateScatterPacking_mC0DD7B1323B048CA3953B850304039AFBC3D948A_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1226));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1227));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1228));
		// nodes.Sort(ScatterSort);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1229));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_0 = ___nodes0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1265));
		Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 * L_1 = (Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4 *)il2cpp_codegen_object_new(Comparison_1_tD5CF35A150128547802730D4B1D520CB27DDF4B4_il2cpp_TypeInfo_var);
		Comparison_1__ctor_m15AE944F3556CD05B000BF7B327058B44D4B1FB5(L_1, NULL, (intptr_t)((intptr_t)ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4_RuntimeMethod_var), /*hidden argument*/Comparison_1__ctor_m15AE944F3556CD05B000BF7B327058B44D4B1FB5_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1265));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1266));
		NullCheck(L_0);
		List_1_Sort_m323C2301497D0BAFC3256EA3601B5F697F0A008D(L_0, L_1, /*hidden argument*/List_1_Sort_m323C2301497D0BAFC3256EA3601B5F697F0A008D_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1266));
		// float radiusPaddingSquared = Mathf.Pow(radiusPadding, 2f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1230));
		float L_2 = ___radiusPadding1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1267));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_3 = powf(L_2, (2.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1267));
		V_2 = L_3;
		// for (int i = 0; i < nodes.Count - 1; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1231));
		V_3 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1232));
		goto IL_0154;
	}

IL_0027:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1233));
		// for (int j = i + 1; j < nodes.Count; j++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1234));
		int32_t L_4 = V_3;
		V_4 = ((int32_t)il2cpp_codegen_add((int32_t)L_4, (int32_t)1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1235));
		goto IL_013c;
	}

IL_0032:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1236));
		// if (i != j)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1237));
		int32_t L_5 = V_3;
		int32_t L_6 = V_4;
		V_5 = (bool)((((int32_t)((((int32_t)L_5) == ((int32_t)L_6))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1238));
		bool L_7 = V_5;
		if (!L_7)
		{
			goto IL_0135;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1239));
		// difference = nodes[j].Transform.localPosition - nodes[i].Transform.localPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1240));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_8 = ___nodes0;
		int32_t L_9 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1268));
		NullCheck(L_8);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_10 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_8, L_9, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1268));
		NullCheck(L_10);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_11 = L_10->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1269));
		NullCheck(L_11);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1269));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_13 = ___nodes0;
		int32_t L_14 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1270));
		NullCheck(L_13);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_15 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_13, L_14, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1270));
		NullCheck(L_15);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_16 = L_15->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1271));
		NullCheck(L_16);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1271));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1272));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_12, L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1272));
		V_0 = L_18;
		// difference2D.x = difference.x;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1241));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = V_0;
		float L_20 = L_19.get_x_2();
		(&V_1)->set_x_0(L_20);
		// difference2D.y = difference.y;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1242));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_21 = V_0;
		float L_22 = L_21.get_y_3();
		(&V_1)->set_y_1(L_22);
		// float combinedRadius = nodes[i].Radius + nodes[j].Radius;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1243));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_23 = ___nodes0;
		int32_t L_24 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1273));
		NullCheck(L_23);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_25 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_23, L_24, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1273));
		NullCheck(L_25);
		float L_26 = L_25->get_Radius_2();
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_27 = ___nodes0;
		int32_t L_28 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1274));
		NullCheck(L_27);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_29 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_27, L_28, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1274));
		NullCheck(L_29);
		float L_30 = L_29->get_Radius_2();
		V_6 = ((float)il2cpp_codegen_add((float)L_26, (float)L_30));
		// float distance = difference2D.SqrMagnitude() - radiusPaddingSquared;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1244));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1275));
		float L_31 = Vector2_SqrMagnitude_mBFCF6C90827FF29E3FA3C2082F8F7F840A09B2FD((Vector2_tA85D2DD88578276CA8A8796756458277E72D073D *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1275));
		float L_32 = V_2;
		V_7 = ((float)il2cpp_codegen_subtract((float)L_31, (float)L_32));
		// float minSeparation = Mathf.Min(distance, radiusPaddingSquared);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1245));
		float L_33 = V_7;
		float L_34 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1276));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_35 = Mathf_Min_mCF9BE0E9CAC9F18D207692BB2DAC7F3E1D4E1CB7(L_33, L_34, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1276));
		V_8 = L_35;
		// distance -= minSeparation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1246));
		float L_36 = V_7;
		float L_37 = V_8;
		V_7 = ((float)il2cpp_codegen_subtract((float)L_36, (float)L_37));
		// if (distance < (Mathf.Pow(combinedRadius, 2)))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1247));
		float L_38 = V_7;
		float L_39 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1277));
		float L_40 = powf(L_39, (2.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1277));
		V_9 = (bool)((((float)L_38) < ((float)L_40))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1248));
		bool L_41 = V_9;
		if (!L_41)
		{
			goto IL_0134;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1249));
		// difference2D.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1250));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1278));
		Vector2_Normalize_m99A2CC6E4CB65C1B9231F898D5B7A12B6D72E722((Vector2_tA85D2DD88578276CA8A8796756458277E72D073D *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1278));
		// difference *= ((combinedRadius - Mathf.Sqrt(distance)) * 0.5f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1251));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_42 = V_0;
		float L_43 = V_6;
		float L_44 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1279));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_45 = sqrtf(L_44);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1279));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1280));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_46 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_42, ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_subtract((float)L_43, (float)L_45)), (float)(0.5f))), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1280));
		V_0 = L_46;
		// nodes[j].Transform.localPosition += difference;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1252));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_47 = ___nodes0;
		int32_t L_48 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1281));
		NullCheck(L_47);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_49 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_47, L_48, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1281));
		NullCheck(L_49);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_50 = L_49->get_Transform_3();
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_51 = L_50;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1282));
		NullCheck(L_51);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_52 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1282));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1283));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_54 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_52, L_53, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1283));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1284));
		NullCheck(L_51);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_51, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1284));
		// nodes[i].Transform.localPosition -= difference;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1253));
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_55 = ___nodes0;
		int32_t L_56 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1285));
		NullCheck(L_55);
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_57 = List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_inline(L_55, L_56, /*hidden argument*/List_1_get_Item_m3498EB9B46F83CBEEC10163EAEA1212D39DD59B1_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1285));
		NullCheck(L_57);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_58 = L_57->get_Transform_3();
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_59 = L_58;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1286));
		NullCheck(L_59);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_60 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_59, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1286));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_61 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1287));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_62 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_60, L_61, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1287));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1288));
		NullCheck(L_59);
		Transform_set_localPosition_m275F5550DD939F83AFEB5E8D681131172E2E1728(L_59, L_62, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1288));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1254));
	}

IL_0134:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1255));
	}

IL_0135:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1256));
		// for (int j = i + 1; j < nodes.Count; j++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1257));
		int32_t L_63 = V_4;
		V_4 = ((int32_t)il2cpp_codegen_add((int32_t)L_63, (int32_t)1));
	}

IL_013c:
	{
		// for (int j = i + 1; j < nodes.Count; j++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1258));
		int32_t L_64 = V_4;
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_65 = ___nodes0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1289));
		NullCheck(L_65);
		int32_t L_66 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_65, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1289));
		V_10 = (bool)((((int32_t)L_64) < ((int32_t)L_66))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1259));
		bool L_67 = V_10;
		if (L_67)
		{
			goto IL_0032;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1260));
		// for (int i = 0; i < nodes.Count - 1; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1261));
		int32_t L_68 = V_3;
		V_3 = ((int32_t)il2cpp_codegen_add((int32_t)L_68, (int32_t)1));
	}

IL_0154:
	{
		// for (int i = 0; i < nodes.Count - 1; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1262));
		int32_t L_69 = V_3;
		List_1_t7D6E0A1B3973E8AC2D2A398241BE620D8F10E9FE * L_70 = ___nodes0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1290));
		NullCheck(L_70);
		int32_t L_71 = List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_inline(L_70, /*hidden argument*/List_1_get_Count_m44BDF21673377F670C2F02FA770BB76970E437CC_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1290));
		V_11 = (bool)((((int32_t)L_69) < ((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_71, (int32_t)1))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1263));
		bool L_72 = V_11;
		if (L_72)
		{
			goto IL_0027;
		}
	}
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1264));
		return;
	}
}
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection::ScatterSort(Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode,Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4 (ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * ___circle10, ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * ___circle21, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	float V_1 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	int32_t V_3 = 0;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___circle10), (&___circle21));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ScatterObjectCollection_ScatterSort_mE65ED6AF152AEF6EECAB4362B1347D824FDDB0E4_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1291));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1292));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1293));
		// float distance1 = (circle1.Transform.localPosition).sqrMagnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1294));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_0 = ___circle10;
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = L_0->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1298));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1298));
		V_2 = L_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1299));
		float L_3 = Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1299));
		V_0 = L_3;
		// float distance2 = (circle2.Transform.localPosition).sqrMagnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1295));
		ObjectCollectionNode_t826AC33CFBA42D5D51D2DE3106A7B68E250BC425 * L_4 = ___circle21;
		NullCheck(L_4);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_5 = L_4->get_Transform_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1300));
		NullCheck(L_5);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Transform_get_localPosition_m812D43318E05BDCB78310EB7308785A13D85EFD8(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1300));
		V_2 = L_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1301));
		float L_7 = Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1301));
		V_1 = L_7;
		// return distance1.CompareTo(distance2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1296));
		float L_8 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1302));
		int32_t L_9 = Single_CompareTo_mFBF2345D81E00F834E558A4ACFD4E5137582DBBC((float*)(&V_0), L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1302));
		V_3 = L_9;
		goto IL_0034;
	}

IL_0034:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1297));
		int32_t L_10 = V_3;
		return L_10;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ScatterObjectCollection__ctor_m7A8890F55C13313189B24514C8B9B8A5D7CF4040 (ScatterObjectCollection_t2932B812F93E9835CF59CD0CCD179DF22A0136F0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ScatterObjectCollection__ctor_m7A8890F55C13313189B24514C8B9B8A5D7CF4040_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ScatterObjectCollection__ctor_m7A8890F55C13313189B24514C8B9B8A5D7CF4040_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		GridObjectCollection__ctor_mF345FA48BE11FDF6074E2CD7F85AC988E120F0E4(__this, /*hidden argument*/NULL);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Smoothing::SmoothTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___source0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goal1, float ___lerpTime2, float ___deltaTime3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___source0), (&___goal1), (&___lerpTime2), (&___deltaTime3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Smoothing_SmoothTo_m1B0C9EEC16A7DE788A2993DBF9AE390F260FE2A0_RuntimeMethod_var, NULL, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1639));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1640));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B2_0;
	memset((&G_B2_0), 0, sizeof(G_B2_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B2_1;
	memset((&G_B2_1), 0, sizeof(G_B2_1));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B1_0;
	memset((&G_B1_0), 0, sizeof(G_B1_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B1_1;
	memset((&G_B1_1), 0, sizeof(G_B1_1));
	float G_B3_0 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B3_1;
	memset((&G_B3_1), 0, sizeof(G_B3_1));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B3_2;
	memset((&G_B3_2), 0, sizeof(G_B3_2));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1641));
		// return Vector3.Lerp(source, goal, (lerpTime == 0f) ? 1f : 1f - Mathf.Pow(lerpTime, deltaTime));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1642));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___source0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___goal1;
		float L_2 = ___lerpTime2;
		G_B1_0 = L_1;
		G_B1_1 = L_0;
		if ((((float)L_2) == ((float)(0.0f))))
		{
			G_B2_0 = L_1;
			G_B2_1 = L_0;
			goto IL_001a;
		}
	}
	{
		float L_3 = ___lerpTime2;
		float L_4 = ___deltaTime3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1644));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_5 = powf(L_3, L_4);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1644));
		G_B3_0 = ((float)il2cpp_codegen_subtract((float)(1.0f), (float)L_5));
		G_B3_1 = G_B1_0;
		G_B3_2 = G_B1_1;
		goto IL_001f;
	}

IL_001a:
	{
		G_B3_0 = (1.0f);
		G_B3_1 = G_B2_0;
		G_B3_2 = G_B2_1;
	}

IL_001f:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1645));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Vector3_Lerp_m5BA75496B803820CC64079383956D73C6FD4A8A1(G_B3_2, G_B3_1, G_B3_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1645));
		V_0 = L_6;
		goto IL_0027;
	}

IL_0027:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1643));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = V_0;
		return L_7;
	}
}
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Smoothing::SmoothTo(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___source0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___goal1, float ___slerpTime2, float ___deltaTime3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___source0), (&___goal1), (&___slerpTime2), (&___deltaTime3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Smoothing_SmoothTo_m932CB726232605A1956F4768E94994E03325F17E_RuntimeMethod_var, NULL, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1646));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1647));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B2_0;
	memset((&G_B2_0), 0, sizeof(G_B2_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B2_1;
	memset((&G_B2_1), 0, sizeof(G_B2_1));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B1_0;
	memset((&G_B1_0), 0, sizeof(G_B1_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B1_1;
	memset((&G_B1_1), 0, sizeof(G_B1_1));
	float G_B3_0 = 0.0f;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B3_1;
	memset((&G_B3_1), 0, sizeof(G_B3_1));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B3_2;
	memset((&G_B3_2), 0, sizeof(G_B3_2));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1648));
		// return Quaternion.Slerp(source, goal, (slerpTime == 0f) ? 1f : 1f - Mathf.Pow(slerpTime, deltaTime));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1649));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_0 = ___source0;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_1 = ___goal1;
		float L_2 = ___slerpTime2;
		G_B1_0 = L_1;
		G_B1_1 = L_0;
		if ((((float)L_2) == ((float)(0.0f))))
		{
			G_B2_0 = L_1;
			G_B2_1 = L_0;
			goto IL_001a;
		}
	}
	{
		float L_3 = ___slerpTime2;
		float L_4 = ___deltaTime3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1651));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_5 = powf(L_3, L_4);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1651));
		G_B3_0 = ((float)il2cpp_codegen_subtract((float)(1.0f), (float)L_5));
		G_B3_1 = G_B1_0;
		G_B3_2 = G_B1_1;
		goto IL_001f;
	}

IL_001a:
	{
		G_B3_0 = (1.0f);
		G_B3_1 = G_B2_0;
		G_B3_2 = G_B2_1;
	}

IL_001f:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1652));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_6 = Quaternion_Slerp_m56DE173C3520C83DF3F1C6EDFA82FF88A2C9E756(G_B3_2, G_B3_1, G_B3_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1652));
		V_0 = L_6;
		goto IL_0027;
	}

IL_0027:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1650));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_7 = V_0;
		return L_7;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Smoothing::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Smoothing__ctor_m9D4ABAC4BBCCA1B2C6341120DAC4FE99CD9533E3 (Smoothing_t9F337CE86D4733AE7ABA92F6135CC68AF8A20E4E * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Smoothing__ctor_m9D4ABAC4BBCCA1B2C6341120DAC4FE99CD9533E3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Smoothing__ctor_m9D4ABAC4BBCCA1B2C6341120DAC4FE99CD9533E3_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_TargetViewPercentV()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_TargetViewPercentV_m88FF9DCC3CE75F7DB723CF6844E3041C9A53CF3B (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_TargetViewPercentV_m88FF9DCC3CE75F7DB723CF6844E3041C9A53CF3B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_TargetViewPercentV_m88FF9DCC3CE75F7DB723CF6844E3041C9A53CF3B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1653));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1654));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1655));
		// get { return targetViewPercentV; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1656));
		float L_0 = __this->get_targetViewPercentV_13();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return targetViewPercentV; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1657));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_TargetViewPercentV(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_TargetViewPercentV_m028D7EFDF455190B3CE237761E29400823D9E0F7 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_TargetViewPercentV_m028D7EFDF455190B3CE237761E29400823D9E0F7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_TargetViewPercentV_m028D7EFDF455190B3CE237761E29400823D9E0F7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1658));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1659));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1660));
		// set { targetViewPercentV = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1661));
		float L_0 = ___value0;
		__this->set_targetViewPercentV_13(L_0);
		// set { targetViewPercentV = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1662));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_MinDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_MinDistance_m51DAF1429F8B13DD081BE8BBFE873AED8EDFB514 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_MinDistance_m51DAF1429F8B13DD081BE8BBFE873AED8EDFB514_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_MinDistance_m51DAF1429F8B13DD081BE8BBFE873AED8EDFB514_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1663));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1664));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1665));
		// get { return minDistance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1666));
		float L_0 = __this->get_minDistance_14();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return minDistance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1667));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_MinDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_MinDistance_m271FE2C1B049650FFD0AE2AAB3D3B1B91BFB7672 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_MinDistance_m271FE2C1B049650FFD0AE2AAB3D3B1B91BFB7672_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_MinDistance_m271FE2C1B049650FFD0AE2AAB3D3B1B91BFB7672_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1668));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1669));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1670));
		// set { minDistance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1671));
		float L_0 = ___value0;
		__this->set_minDistance_14(L_0);
		// set { minDistance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1672));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_MaxDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_MaxDistance_m1265D0CFB5E13137EE6387EFDDB0E16F35F37E60 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_MaxDistance_m1265D0CFB5E13137EE6387EFDDB0E16F35F37E60_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_MaxDistance_m1265D0CFB5E13137EE6387EFDDB0E16F35F37E60_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1673));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1674));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1675));
		// get { return maxDistance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1676));
		float L_0 = __this->get_maxDistance_15();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return maxDistance; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1677));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_MaxDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_MaxDistance_m5365BC141C83BA50292851E138B5CE35F2A72897 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_MaxDistance_m5365BC141C83BA50292851E138B5CE35F2A72897_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_MaxDistance_m5365BC141C83BA50292851E138B5CE35F2A72897_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1678));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1679));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1680));
		// set { maxDistance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1681));
		float L_0 = ___value0;
		__this->set_maxDistance_15(L_0);
		// set { maxDistance = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1682));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_MinScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_MinScale_mAB2ED4BACBA4450849EF242A58260BEC0D941821 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_MinScale_mAB2ED4BACBA4450849EF242A58260BEC0D941821_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_MinScale_mAB2ED4BACBA4450849EF242A58260BEC0D941821_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1683));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1684));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1685));
		// get { return minScale; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1686));
		float L_0 = __this->get_minScale_16();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return minScale; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1687));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_MinScale(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_MinScale_m4BF7689396B19DFC0A0C4924D9769F362B36ACEF (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_MinScale_m4BF7689396B19DFC0A0C4924D9769F362B36ACEF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_MinScale_m4BF7689396B19DFC0A0C4924D9769F362B36ACEF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1688));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1689));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1690));
		// set { minScale = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1691));
		float L_0 = ___value0;
		__this->set_minScale_16(L_0);
		// set { minScale = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1692));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_MaxScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_MaxScale_mA258B9E56784FA2CF3326ABCC1EE07881C6FC9A1 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_MaxScale_mA258B9E56784FA2CF3326ABCC1EE07881C6FC9A1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_MaxScale_mA258B9E56784FA2CF3326ABCC1EE07881C6FC9A1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1693));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1694));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1695));
		// get { return maxScale; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1696));
		float L_0 = __this->get_maxScale_17();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return maxScale; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1697));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_MaxScale(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_MaxScale_m12C91C8485610EE0918A100206FCBC487DE52E1F (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_MaxScale_m12C91C8485610EE0918A100206FCBC487DE52E1F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_MaxScale_m12C91C8485610EE0918A100206FCBC487DE52E1F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1698));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1699));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1700));
		// set { maxScale = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1701));
		float L_0 = ___value0;
		__this->set_maxScale_17(L_0);
		// set { maxScale = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1702));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_ScaleBuffer()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_ScaleBuffer_m6C3525CECD2FC1BA982CF0C13C0AC2DCDA885B3A (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_ScaleBuffer_m6C3525CECD2FC1BA982CF0C13C0AC2DCDA885B3A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_ScaleBuffer_m6C3525CECD2FC1BA982CF0C13C0AC2DCDA885B3A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1703));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1704));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1705));
		// get { return scaleBuffer; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1706));
		float L_0 = __this->get_scaleBuffer_18();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return scaleBuffer; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1707));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_ScaleBuffer(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_ScaleBuffer_m61675638693FFAB7B33A3BC88AF2268C9E4C4854 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_ScaleBuffer_m61675638693FFAB7B33A3BC88AF2268C9E4C4854_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_ScaleBuffer_m61675638693FFAB7B33A3BC88AF2268C9E4C4854_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1708));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1709));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1710));
		// set { scaleBuffer = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1711));
		float L_0 = ___value0;
		__this->set_scaleBuffer_18(L_0);
		// set { scaleBuffer = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1712));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_ManualObjectSize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_ManualObjectSize_m493D00EAEC7C782B3C06D28D5CC1258EAC3F1FAB (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_ManualObjectSize_m493D00EAEC7C782B3C06D28D5CC1258EAC3F1FAB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_ManualObjectSize_m493D00EAEC7C782B3C06D28D5CC1258EAC3F1FAB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1713));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1714));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1715));
		// get { return manualObjectSize; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1716));
		float L_0 = __this->get_manualObjectSize_19();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return manualObjectSize; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1717));
		float L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_ManualObjectSize(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_ManualObjectSize_m3C94423A6B49C183B0DC6E0E73F9E0B4B979C147 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_ManualObjectSize_m3C94423A6B49C183B0DC6E0E73F9E0B4B979C147_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_ManualObjectSize_m3C94423A6B49C183B0DC6E0E73F9E0B4B979C147_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1718));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1719));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1720));
		// manualObjectSize = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1721));
		float L_0 = ___value0;
		__this->set_manualObjectSize_19(L_0);
		// RecalculateBounds();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1722));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1724));
		ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1724));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1723));
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.ScaleState Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_ScaleState()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t ConstantViewSize_get_ScaleState_mD29CAC794F4323C8C85ECA330F401925E7027055 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_ScaleState_mD29CAC794F4323C8C85ECA330F401925E7027055_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_ScaleState_mD29CAC794F4323C8C85ECA330F401925E7027055_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1725));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1726));
	{
		// public ScaleState ScaleState { get; private set; } = ScaleState.Static;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1727));
		int32_t L_0 = __this->get_U3CScaleStateU3Ek__BackingField_20();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_ScaleState(Microsoft.MixedReality.Toolkit.Utilities.ScaleState)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1728));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1729));
	{
		// public ScaleState ScaleState { get; private set; } = ScaleState.Static;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1730));
		int32_t L_0 = ___value0;
		__this->set_U3CScaleStateU3Ek__BackingField_20(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_CurrentScalePercent()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1731));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1732));
	{
		// public float CurrentScalePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1733));
		float L_0 = __this->get_U3CCurrentScalePercentU3Ek__BackingField_21();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_CurrentScalePercent(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1734));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1735));
	{
		// public float CurrentScalePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1736));
		float L_0 = ___value0;
		__this->set_U3CCurrentScalePercentU3Ek__BackingField_21(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_CurrentDistancePercent()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_CurrentDistancePercent_mB4AB53DCD03FE83B5997FA682DCA43B890761092 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_CurrentDistancePercent_mB4AB53DCD03FE83B5997FA682DCA43B890761092_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_CurrentDistancePercent_mB4AB53DCD03FE83B5997FA682DCA43B890761092_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1737));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1738));
	{
		// public float CurrentDistancePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1739));
		float L_0 = __this->get_U3CCurrentDistancePercentU3Ek__BackingField_22();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::set_CurrentDistancePercent(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1740));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1741));
	{
		// public float CurrentDistancePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1742));
		float L_0 = ___value0;
		__this->set_U3CCurrentDistancePercentU3Ek__BackingField_22(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::get_FovScale()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	float V_1 = 0.0f;
	float V_2 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1743));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1744));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1745));
		// float cameraFovRadians = (CameraCache.Main.aspect * CameraCache.Main.fieldOfView) * Mathf.Deg2Rad;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1746));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1750));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_0 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1750));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1751));
		NullCheck(L_0);
		float L_1 = Camera_get_aspect_m2ADA7982754920C3B58B4DB664801D6F2416E0C6(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1751));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1752));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_2 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1752));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1753));
		NullCheck(L_2);
		float L_3 = Camera_get_fieldOfView_m065A50B70AC3661337ACA482DDEFA29CCBD249D6(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1753));
		V_0 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)L_1, (float)L_3)), (float)(0.0174532924f)));
		// float sinFov = Mathf.Sin(cameraFovRadians * 0.5f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1747));
		float L_4 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1754));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_5 = sinf(((float)il2cpp_codegen_multiply((float)L_4, (float)(0.5f))));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1754));
		V_1 = L_5;
		// return 2f * targetViewPercentV * sinFov / objectSize;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1748));
		float L_6 = __this->get_targetViewPercentV_13();
		float L_7 = V_1;
		float L_8 = __this->get_objectSize_24();
		V_2 = ((float)((float)((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)(2.0f), (float)L_6)), (float)L_7))/(float)L_8));
		goto IL_0042;
	}

IL_0042:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1749));
		float L_9 = V_2;
		return L_9;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_Start_m991C3583D06EEC3052488EF77708026BDEB0076D (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_Start_m991C3583D06EEC3052488EF77708026BDEB0076D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_Start_m991C3583D06EEC3052488EF77708026BDEB0076D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1755));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1756));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1757));
		// base.Start();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1758));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1761));
		Solver_Start_m0CEF9100BB0981E30F791222FF24D030D176505D(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1761));
		// RecalculateBounds();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1759));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1762));
		ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1762));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1760));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::SolverUpdate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_SolverUpdate_m2531A3107824B2C0152168AE4544C6505A93DDD9 (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_SolverUpdate_m2531A3107824B2C0152168AE4544C6505A93DDD9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	float V_1 = 0.0f;
	bool V_2 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	float V_4 = 0.0f;
	float V_5 = 0.0f;
	Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  V_6;
	memset((&V_6), 0, sizeof(V_6));
	bool V_7 = false;
	bool V_8 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_3), (&V_4), (&V_5));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_SolverUpdate_m2531A3107824B2C0152168AE4544C6505A93DDD9_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1763));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1764));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1765));
		// float lastScalePct = CurrentScalePercent;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1766));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1794));
		float L_0 = ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1794));
		V_0 = L_0;
		// if (SolverHandler.TransformTarget != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1767));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_1 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1795));
		NullCheck(L_1);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_2 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1795));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1796));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_3 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_2, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1796));
		V_2 = L_3;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1768));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_00e6;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1769));
		// fovScalar = FovScale;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1770));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1797));
		float L_5 = ConstantViewSize_get_FovScale_mE8AF4BDB5D54BBB4594A6FC62864788FEAF82A21(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1797));
		__this->set_fovScalar_23(L_5);
		// SolverHandler.AltScale.SetGoal(transform.localScale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1771));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_6 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1798));
		NullCheck(L_6);
		Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  L_7 = SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851A_inline(L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1798));
		V_6 = L_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1799));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_8 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1799));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1800));
		NullCheck(L_8);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Transform_get_localScale_mD8F631021C2D62B7C341B1A17FA75491F64E13DA(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1800));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1801));
		Vector3Smoothed_SetGoal_m9C7BF69C97208D6AB4BD4B19A4A8ECDE8705B7BF((Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6 *)(&V_6), L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1801));
		// Vector3 targetPosition = SolverHandler.TransformTarget.position;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1772));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_10 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1802));
		NullCheck(L_10);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_11 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1802));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1803));
		NullCheck(L_11);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1803));
		V_3 = L_12;
		// float distance = Mathf.Clamp(Vector3.Distance(transform.position, targetPosition), minDistance, maxDistance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1773));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1804));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_13 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1804));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1805));
		NullCheck(L_13);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1805));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1806));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_16 = Vector3_Distance_mE316E10B9B319A5C2A29F86E028740FD528149E7(L_14, L_15, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1806));
		float L_17 = __this->get_minDistance_14();
		float L_18 = __this->get_maxDistance_15();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1807));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_19 = Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507(L_16, L_17, L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1807));
		V_4 = L_19;
		// float scale = Mathf.Clamp(fovScalar * distance, minScale, maxScale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1774));
		float L_20 = __this->get_fovScalar_23();
		float L_21 = V_4;
		float L_22 = __this->get_minScale_16();
		float L_23 = __this->get_maxScale_17();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1808));
		float L_24 = Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507(((float)il2cpp_codegen_multiply((float)L_20, (float)L_21)), L_22, L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1808));
		V_5 = L_24;
		// GoalScale = Vector3.one * scale;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1775));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1809));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25 = Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1809));
		float L_26 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1810));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_25, L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1810));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1811));
		Solver_set_GoalScale_m923D113233485CD56065FE83C453CC21218B20BB(__this, L_27, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1811));
		// CurrentDistancePercent = Mathf.InverseLerp(minDistance, maxDistance, distance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1776));
		float L_28 = __this->get_minDistance_14();
		float L_29 = __this->get_maxDistance_15();
		float L_30 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1812));
		float L_31 = Mathf_InverseLerp_m7054CDF25056E9B27D2467F91C95D628508F1F31(L_28, L_29, L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1812));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1813));
		ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_inline(__this, L_31, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1813));
		// CurrentScalePercent = Mathf.InverseLerp(minScale, maxScale, scale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1777));
		float L_32 = __this->get_minScale_16();
		float L_33 = __this->get_maxScale_17();
		float L_34 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1814));
		float L_35 = Mathf_InverseLerp_m7054CDF25056E9B27D2467F91C95D628508F1F31(L_32, L_33, L_34, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1814));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1815));
		ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_inline(__this, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1815));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1778));
	}

IL_00e6:
	{
		// float scaleDifference = (CurrentScalePercent - lastScalePct) / SolverHandler.DeltaTime;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1779));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1816));
		float L_36 = ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1816));
		float L_37 = V_0;
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_38 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1817));
		NullCheck(L_38);
		float L_39 = SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82_inline(L_38, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1817));
		V_1 = ((float)((float)((float)il2cpp_codegen_subtract((float)L_36, (float)L_37))/(float)L_39));
		// if (scaleDifference > scaleBuffer)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1780));
		float L_40 = V_1;
		float L_41 = __this->get_scaleBuffer_18();
		V_7 = (bool)((((float)L_40) > ((float)L_41))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1781));
		bool L_42 = V_7;
		if (!L_42)
		{
			goto IL_0116;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1782));
		// ScaleState = ScaleState.Growing;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1783));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1818));
		ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_inline(__this, 2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1818));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1784));
		goto IL_013c;
	}

IL_0116:
	{
		// else if (scaleDifference < -scaleBuffer)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1785));
		float L_43 = V_1;
		float L_44 = __this->get_scaleBuffer_18();
		V_8 = (bool)((((float)L_43) < ((float)((-L_44))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1786));
		bool L_45 = V_8;
		if (!L_45)
		{
			goto IL_0132;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1787));
		// ScaleState = ScaleState.Shrinking;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1788));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1819));
		ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_inline(__this, 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1819));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1789));
		goto IL_013c;
	}

IL_0132:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1790));
		// ScaleState = ScaleState.Static;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1791));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1820));
		ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_inline(__this, 0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1820));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1792));
	}

IL_013c:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1793));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::RecalculateBounds()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	bool V_1 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_3;
	memset((&V_3), 0, sizeof(V_3));
	RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* V_4 = NULL;
	int32_t V_5 = 0;
	bool V_6 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_7;
	memset((&V_7), 0, sizeof(V_7));
	bool V_8 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_2), (&V_3), (&V_4), (&V_5));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_RecalculateBounds_mDA3D97FBC597938CC6DB262ECB92D5797A5334AD_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1821));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1822));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1823));
		// if (manualObjectSize > 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1824));
		float L_0 = __this->get_manualObjectSize_19();
		V_1 = (bool)((((float)L_0) > ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1825));
		bool L_1 = V_1;
		if (!L_1)
		{
			goto IL_0020;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1826));
		// baseSize = manualObjectSize;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1827));
		float L_2 = __this->get_manualObjectSize_19();
		V_0 = L_2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1828));
		goto IL_00b8;
	}

IL_0020:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1829));
		// Vector3 cachedScale = transform.root.localScale;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1830));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1855));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_3 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1855));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1856));
		NullCheck(L_3);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_4 = Transform_get_root_m101A8B5C2CC6D868B6B66EEDBD5336FC1EB5DDD6(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1856));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1857));
		NullCheck(L_4);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Transform_get_localScale_mD8F631021C2D62B7C341B1A17FA75491F64E13DA(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1857));
		V_2 = L_5;
		// transform.root.localScale = Vector3.one;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1831));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1858));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_6 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1858));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1859));
		NullCheck(L_6);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = Transform_get_root_m101A8B5C2CC6D868B6B66EEDBD5336FC1EB5DDD6(L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1859));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1860));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1860));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1861));
		NullCheck(L_7);
		Transform_set_localScale_m7ED1A6E5A87CD1D483515B99D6D3121FB92B0556(L_7, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1861));
		// var combinedBounds = new Bounds(transform.position, Vector3.zero);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1832));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1862));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_9 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1862));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1863));
		NullCheck(L_9);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1863));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1864));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1864));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1865));
		Bounds__ctor_m294E77A20EC1A3E96985FE1A925CB271D1B5266D((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_3), L_10, L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1865));
		// var renderers = GetComponentsInChildren<Renderer>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1833));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1866));
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_12 = Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9(__this, /*hidden argument*/Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1866));
		V_4 = L_12;
		// for (var i = 0; i < renderers.Length; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1834));
		V_5 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1835));
		goto IL_0086;
	}

IL_006c:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1836));
		// combinedBounds.Encapsulate(renderers[i].bounds);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1837));
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_13 = V_4;
		int32_t L_14 = V_5;
		NullCheck(L_13);
		int32_t L_15 = L_14;
		Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * L_16 = (L_13)->GetAt(static_cast<il2cpp_array_size_t>(L_15));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1867));
		NullCheck(L_16);
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  L_17 = Renderer_get_bounds_mB29E41E26DD95939C09F3EC67F5B2793A438BDB5(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1867));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1868));
		Bounds_Encapsulate_m394E7F823ADE56B97E6723B645C9458F1ADF0089((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_3), L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1868));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1838));
		// for (var i = 0; i < renderers.Length; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1839));
		int32_t L_18 = V_5;
		V_5 = ((int32_t)il2cpp_codegen_add((int32_t)L_18, (int32_t)1));
	}

IL_0086:
	{
		// for (var i = 0; i < renderers.Length; i++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1840));
		int32_t L_19 = V_5;
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_20 = V_4;
		NullCheck(L_20);
		V_6 = (bool)((((int32_t)L_19) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_20)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1841));
		bool L_21 = V_6;
		if (L_21)
		{
			goto IL_006c;
		}
	}
	{
		// baseSize = combinedBounds.extents.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1842));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1869));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = Bounds_get_extents_mBA4B2196036DD5A858BDAD53BC71A778B41841C9((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1869));
		V_7 = L_22;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1870));
		float L_23 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_7), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1870));
		V_0 = L_23;
		// transform.root.localScale = cachedScale;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1843));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1871));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_24 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1871));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1872));
		NullCheck(L_24);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_25 = Transform_get_root_m101A8B5C2CC6D868B6B66EEDBD5336FC1EB5DDD6(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1872));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1873));
		NullCheck(L_25);
		Transform_set_localScale_m7ED1A6E5A87CD1D483515B99D6D3121FB92B0556(L_25, L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1873));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1844));
	}

IL_00b8:
	{
		// if (baseSize > 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1845));
		float L_27 = V_0;
		V_8 = (bool)((((float)L_27) > ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1846));
		bool L_28 = V_8;
		if (!L_28)
		{
			goto IL_00d1;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1847));
		// objectSize = baseSize;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1848));
		float L_29 = V_0;
		__this->set_objectSize_24(L_29);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1849));
		goto IL_00e9;
	}

IL_00d1:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1850));
		// Debug.LogWarning("ConstantViewSize: Object base size calculate was 0, defaulting to 1");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1851));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1874));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogWarning_m37338644DC81F640CCDFEAE35A223F0E965F0568(_stringLiteralD5F2B42FDCA2897E50838908138E953DF1E2CC8B, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1874));
		// objectSize = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1852));
		__this->set_objectSize_24((1.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1853));
	}

IL_00e9:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1854));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ConstantViewSize__ctor_m53FE26DAFB1C31B8EA1DBB9833A681CDCB4A792C (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize__ctor_m53FE26DAFB1C31B8EA1DBB9833A681CDCB4A792C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize__ctor_m53FE26DAFB1C31B8EA1DBB9833A681CDCB4A792C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1875));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1876));
	{
		// private float targetViewPercentV = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1877));
		__this->set_targetViewPercentV_13((0.5f));
		// private float minDistance = 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1878));
		__this->set_minDistance_14((0.5f));
		// private float maxDistance = 3.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1879));
		__this->set_maxDistance_15((3.5f));
		// private float minScale = 0.01f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1880));
		__this->set_minScale_16((0.01f));
		// private float maxScale = 100f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1881));
		__this->set_maxScale_17((100.0f));
		// private float scaleBuffer = 0.01f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1882));
		__this->set_scaleBuffer_18((0.01f));
		// private float manualObjectSize = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1883));
		__this->set_manualObjectSize_19((0.0f));
		// public ScaleState ScaleState { get; private set; } = ScaleState.Static;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1884));
		__this->set_U3CScaleStateU3Ek__BackingField_20(0);
		// public float CurrentScalePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1885));
		__this->set_U3CCurrentScalePercentU3Ek__BackingField_21((1.0f));
		// public float CurrentDistancePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1886));
		__this->set_U3CCurrentDistancePercentU3Ek__BackingField_22((1.0f));
		// private float fovScalar = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1887));
		__this->set_fovScalar_23((1.0f));
		// private float objectSize = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1888));
		__this->set_objectSize_24((1.0f));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1889));
		Solver__ctor_m45C1467BE22F4DD1541D08434DD5A046F1099CAC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1889));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::get_Handedness()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint8_t ControllerFinder_get_Handedness_m3CC7CA1D8AB3141034373253ED7A2D852F75A6E9 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_get_Handedness_m3CC7CA1D8AB3141034373253ED7A2D852F75A6E9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint8_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_get_Handedness_m3CC7CA1D8AB3141034373253ED7A2D852F75A6E9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1890));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1891));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1892));
		// get { return handedness; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1893));
		uint8_t L_0 = __this->get_handedness_4();
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// get { return handedness; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1894));
		uint8_t L_1 = V_0;
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::set_Handedness(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_set_Handedness_mDFED4A63D6F9D2AFAC4368132B068ADF1BE5717A (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, uint8_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_set_Handedness_mDFED4A63D6F9D2AFAC4368132B068ADF1BE5717A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_set_Handedness_mDFED4A63D6F9D2AFAC4368132B068ADF1BE5717A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1895));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1896));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1897));
		// if (handedness != value)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1898));
		uint8_t L_0 = __this->get_handedness_4();
		uint8_t L_1 = ___value0;
		V_0 = (bool)((((int32_t)((((int32_t)L_0) == ((int32_t)L_1))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1899));
		bool L_2 = V_0;
		if (!L_2)
		{
			goto IL_0021;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1900));
		// handedness = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1901));
		uint8_t L_3 = ___value0;
		__this->set_handedness_4(L_3);
		// RefreshControllerTransform();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1902));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1905));
		VirtActionInvoker0::Invoke(11 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RefreshControllerTransform() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1905));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1903));
	}

IL_0021:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1904));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnEnable_m121B6255DD6B5CA18731F68B8D562600519F3217 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnEnable_m121B6255DD6B5CA18731F68B8D562600519F3217_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnEnable_m121B6255DD6B5CA18731F68B8D562600519F3217_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1906));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1907));
	RuntimeObject* G_B2_0 = NULL;
	RuntimeObject* G_B1_0 = NULL;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1908));
		// CoreServices.InputSystem?.RegisterHandler<IMixedRealitySourceStateHandler>(this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1909));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1912));
		IL2CPP_RUNTIME_CLASS_INIT(CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var);
		RuntimeObject* L_0 = CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1912));
		RuntimeObject* L_1 = L_0;
		G_B1_0 = L_1;
		if (L_1)
		{
			G_B2_0 = L_1;
			goto IL_000c;
		}
	}
	{
		goto IL_0013;
	}

IL_000c:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1913));
		NullCheck(G_B2_0);
		GenericInterfaceActionInvoker1< RuntimeObject* >::Invoke(IMixedRealityEventSystem_RegisterHandler_TisIMixedRealitySourceStateHandler_tB51E20DDBCE630C7ABE435D0F71416CC2D628870_m47B07025FD5C8A66BA152D91C274B257BC986164_RuntimeMethod_var, G_B2_0, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1913));
	}

IL_0013:
	{
		// RefreshControllerTransform();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1910));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1914));
		VirtActionInvoker0::Invoke(11 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RefreshControllerTransform() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1914));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1911));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnDisable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnDisable_m3A5F3DC27832AEE2F216CD8384FEAFCDBC550ED5 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnDisable_m3A5F3DC27832AEE2F216CD8384FEAFCDBC550ED5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnDisable_m3A5F3DC27832AEE2F216CD8384FEAFCDBC550ED5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1915));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1916));
	RuntimeObject* G_B2_0 = NULL;
	RuntimeObject* G_B1_0 = NULL;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1917));
		// CoreServices.InputSystem?.UnregisterHandler<IMixedRealitySourceStateHandler>(this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1918));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1920));
		IL2CPP_RUNTIME_CLASS_INIT(CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var);
		RuntimeObject* L_0 = CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1920));
		RuntimeObject* L_1 = L_0;
		G_B1_0 = L_1;
		if (L_1)
		{
			G_B2_0 = L_1;
			goto IL_000c;
		}
	}
	{
		goto IL_0013;
	}

IL_000c:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1921));
		NullCheck(G_B2_0);
		GenericInterfaceActionInvoker1< RuntimeObject* >::Invoke(IMixedRealityEventSystem_UnregisterHandler_TisIMixedRealitySourceStateHandler_tB51E20DDBCE630C7ABE435D0F71416CC2D628870_mF0FE6BDF3711F115C265014A0CB44A0F61EAF864_RuntimeMethod_var, G_B2_0, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1921));
	}

IL_0013:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1919));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnSourceDetected(Microsoft.MixedReality.Toolkit.Input.SourceStateEventData)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnSourceDetected_mCFA11CBDE6BAC872F3613A228E230D06AB0E15CD (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * ___eventData0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnSourceDetected_mCFA11CBDE6BAC872F3613A228E230D06AB0E15CD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  V_1;
	memset((&V_1), 0, sizeof(V_1));
	uint8_t V_2 = 0;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  V_3;
	memset((&V_3), 0, sizeof(V_3));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___eventData0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnSourceDetected_mCFA11CBDE6BAC872F3613A228E230D06AB0E15CD_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1922));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1923));
	RuntimeObject* G_B2_0 = NULL;
	RuntimeObject* G_B1_0 = NULL;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  G_B3_0;
	memset((&G_B3_0), 0, sizeof(G_B3_0));
	int32_t G_B6_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1924));
		// if (eventData.Controller?.ControllerHandedness == handedness && !(eventData.Controller is IMixedRealityHand))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1925));
		SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * L_0 = ___eventData0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1931));
		NullCheck(L_0);
		RuntimeObject* L_1 = SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1931));
		RuntimeObject* L_2 = L_1;
		G_B1_0 = L_2;
		if (L_2)
		{
			G_B2_0 = L_2;
			goto IL_0016;
		}
	}
	{
		il2cpp_codegen_initobj((&V_3), sizeof(Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 ));
		Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  L_3 = V_3;
		G_B3_0 = L_3;
		goto IL_0020;
	}

IL_0016:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1932));
		NullCheck(G_B2_0);
		uint8_t L_4 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, G_B2_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1932));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1933));
		Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  L_5;
		memset((&L_5), 0, sizeof(L_5));
		Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B((&L_5), L_4, /*hidden argument*/Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1933));
		G_B3_0 = L_5;
	}

IL_0020:
	{
		V_1 = G_B3_0;
		uint8_t L_6 = __this->get_handedness_4();
		V_2 = L_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1934));
		uint8_t L_7 = Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_inline((Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *)(&V_1), /*hidden argument*/Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1934));
		uint8_t L_8 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1935));
		bool L_9 = Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_inline((Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *)(&V_1), /*hidden argument*/Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1935));
		if (!((int32_t)((int32_t)((((int32_t)L_7) == ((int32_t)L_8))? 1 : 0)&(int32_t)L_9)))
		{
			goto IL_004f;
		}
	}
	{
		SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * L_10 = ___eventData0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1936));
		NullCheck(L_10);
		RuntimeObject* L_11 = SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1936));
		G_B6_0 = ((((int32_t)((!(((RuntimeObject*)(RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_11, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var))) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0050;
	}

IL_004f:
	{
		G_B6_0 = 0;
	}

IL_0050:
	{
		V_0 = (bool)G_B6_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1926));
		bool L_12 = V_0;
		if (!L_12)
		{
			goto IL_0063;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1927));
		// AddControllerTransform(eventData.Controller);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1928));
		SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * L_13 = ___eventData0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1937));
		NullCheck(L_13);
		RuntimeObject* L_14 = SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline(L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1937));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1938));
		VirtActionInvoker1< RuntimeObject* >::Invoke(9 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::AddControllerTransform(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController) */, __this, L_14);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1938));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1929));
	}

IL_0063:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1930));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnSourceLost(Microsoft.MixedReality.Toolkit.Input.SourceStateEventData)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnSourceLost_mCF4191E8BF05F0D02A3BE105B59FFFADAFEF09A0 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * ___eventData0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnSourceLost_mCF4191E8BF05F0D02A3BE105B59FFFADAFEF09A0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  V_1;
	memset((&V_1), 0, sizeof(V_1));
	uint8_t V_2 = 0;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  V_3;
	memset((&V_3), 0, sizeof(V_3));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___eventData0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnSourceLost_mCF4191E8BF05F0D02A3BE105B59FFFADAFEF09A0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1939));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1940));
	RuntimeObject* G_B2_0 = NULL;
	RuntimeObject* G_B1_0 = NULL;
	Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  G_B3_0;
	memset((&G_B3_0), 0, sizeof(G_B3_0));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1941));
		// if (eventData.Controller?.ControllerHandedness == handedness)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1942));
		SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * L_0 = ___eventData0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1948));
		NullCheck(L_0);
		RuntimeObject* L_1 = SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1948));
		RuntimeObject* L_2 = L_1;
		G_B1_0 = L_2;
		if (L_2)
		{
			G_B2_0 = L_2;
			goto IL_0016;
		}
	}
	{
		il2cpp_codegen_initobj((&V_3), sizeof(Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 ));
		Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  L_3 = V_3;
		G_B3_0 = L_3;
		goto IL_0020;
	}

IL_0016:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1949));
		NullCheck(G_B2_0);
		uint8_t L_4 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, G_B2_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1949));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1950));
		Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231  L_5;
		memset((&L_5), 0, sizeof(L_5));
		Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B((&L_5), L_4, /*hidden argument*/Nullable_1__ctor_m823E766F59AF39F4E4F1DB87695B73FA8D181D4B_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1950));
		G_B3_0 = L_5;
	}

IL_0020:
	{
		V_1 = G_B3_0;
		uint8_t L_6 = __this->get_handedness_4();
		V_2 = L_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1951));
		uint8_t L_7 = Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_inline((Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *)(&V_1), /*hidden argument*/Nullable_1_GetValueOrDefault_m0732BB3E14200FEF0204CD4062878683EE759DBD_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1951));
		uint8_t L_8 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1952));
		bool L_9 = Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_inline((Nullable_1_tBD5BCA98767B0035CE68E24069088BC9242CB231 *)(&V_1), /*hidden argument*/Nullable_1_get_HasValue_mA695C4BF91D8A19331B9DCF66796F34A2409FADA_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1952));
		V_0 = (bool)((int32_t)((int32_t)((((int32_t)L_7) == ((int32_t)L_8))? 1 : 0)&(int32_t)L_9));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1943));
		bool L_10 = V_0;
		if (!L_10)
		{
			goto IL_0047;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1944));
		// RemoveControllerTransform();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1945));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1953));
		VirtActionInvoker0::Invoke(10 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RemoveControllerTransform() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1953));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1946));
	}

IL_0047:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1947));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::TryAndAddControllerTransform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_TryAndAddControllerTransform_mE17792545F0D536A2F91701128EB2B70993A0B63 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_TryAndAddControllerTransform_mE17792545F0D536A2F91701128EB2B70993A0B63_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  V_1;
	memset((&V_1), 0, sizeof(V_1));
	RuntimeObject* V_2 = NULL;
	bool V_3 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_TryAndAddControllerTransform_mE17792545F0D536A2F91701128EB2B70993A0B63_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1954));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1955));
	Exception_t * __last_unhandled_exception = 0;
	NO_UNUSED_WARNING (__last_unhandled_exception);
	Exception_t * __exception_local = 0;
	NO_UNUSED_WARNING (__exception_local);
	void* __leave_targets_storage = alloca(sizeof(int32_t) * 2);
	il2cpp::utils::LeaveTargetStack __leave_targets(__leave_targets_storage);
	NO_UNUSED_WARNING (__leave_targets);
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1956));
		// if (CoreServices.InputSystem == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1957));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1975));
		IL2CPP_RUNTIME_CLASS_INIT(CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var);
		RuntimeObject* L_0 = CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1975));
		V_0 = (bool)((((RuntimeObject*)(RuntimeObject*)L_0) == ((RuntimeObject*)(RuntimeObject *)NULL))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1958));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0010;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1959));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1960));
		goto IL_0064;
	}

IL_0010:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1961));
		// foreach (IMixedRealityController controller in CoreServices.InputSystem.DetectedControllers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1962));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1976));
		IL2CPP_RUNTIME_CLASS_INIT(CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var);
		RuntimeObject* L_2 = CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1976));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1977));
		NullCheck(L_2);
		HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * L_3 = InterfaceFuncInvoker0< HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * >::Invoke(5 /* System.Collections.Generic.HashSet`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController> Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem::get_DetectedControllers() */, IMixedRealityInputSystem_t5CCAA5BAD9D45403FCE5D1B3FEEB2E45BA65B22B_il2cpp_TypeInfo_var, L_2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1977));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1978));
		NullCheck(L_3);
		Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  L_4 = HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416(L_3, /*hidden argument*/HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1978));
		V_1 = L_4;
	}

IL_0021:
	try
	{ // begin try (depth: 1)
		STORE_TRY_ID(methodExecutionContext, 0);
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1963));
			goto IL_004a;
		}

IL_0023:
		{
			// foreach (IMixedRealityController controller in CoreServices.InputSystem.DetectedControllers)
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1964));
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1979));
			RuntimeObject* L_5 = Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_inline((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_1), /*hidden argument*/Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_RuntimeMethod_var);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1979));
			V_2 = L_5;
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1965));
			// if (controller.ControllerHandedness == handedness)
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1966));
			RuntimeObject* L_6 = V_2;
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1980));
			NullCheck(L_6);
			uint8_t L_7 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_6);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1980));
			uint8_t L_8 = __this->get_handedness_4();
			V_3 = (bool)((((int32_t)L_7) == ((int32_t)L_8))? 1 : 0);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1967));
			bool L_9 = V_3;
			if (!L_9)
			{
				goto IL_0049;
			}
		}

IL_003e:
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1968));
			// AddControllerTransform(controller);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1969));
			RuntimeObject* L_10 = V_2;
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1981));
			VirtActionInvoker1< RuntimeObject* >::Invoke(9 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::AddControllerTransform(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController) */, __this, L_10);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1981));
			// return;
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1970));
			IL2CPP_LEAVE(0x64, FINALLY_0055);
		}

IL_0049:
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1971));
		}

IL_004a:
		{
			// foreach (IMixedRealityController controller in CoreServices.InputSystem.DetectedControllers)
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1972));
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1982));
			bool L_11 = Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_1), /*hidden argument*/Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992_RuntimeMethod_var);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1982));
			if (L_11)
			{
				goto IL_0023;
			}
		}

IL_0053:
		{
			IL2CPP_LEAVE(0x64, FINALLY_0055);
		}
	} // end try (depth: 1)
	catch(Il2CppExceptionWrapper& e)
	{
		__last_unhandled_exception = (Exception_t *)e.ex;
		goto FINALLY_0055;
	}

FINALLY_0055:
	{ // begin finally (depth: 1)
		STORE_TRY_ID(methodExecutionContext, -1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1973));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1983));
		Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_1), /*hidden argument*/Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1983));
		IL2CPP_END_FINALLY(85)
	} // end finally (depth: 1)
	IL2CPP_CLEANUP(85)
	{
		IL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)
		IL2CPP_JUMP_TBL(0x64, IL_0064)
	}

IL_0064:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1974));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::AddControllerTransform(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_AddControllerTransform_m460890F21C2057D3022AF7069027E1BABB002BDF (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, RuntimeObject* ___newController0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_AddControllerTransform_m460890F21C2057D3022AF7069027E1BABB002BDF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___newController0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_AddControllerTransform_m460890F21C2057D3022AF7069027E1BABB002BDF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1984));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1985));
	int32_t G_B5_0 = 0;
	int32_t G_B10_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1986));
		// if (newController == null ||
		//     newController.Visualizer == null ||
		//     newController.Visualizer.GameObjectProxy == null ||
		//     newController.Visualizer.GameObjectProxy.transform == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1987));
		RuntimeObject* L_0 = ___newController0;
		if (!L_0)
		{
			goto IL_0037;
		}
	}
	{
		RuntimeObject* L_1 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1998));
		NullCheck(L_1);
		RuntimeObject* L_2 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(5 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_Visualizer() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1998));
		if (!L_2)
		{
			goto IL_0037;
		}
	}
	{
		RuntimeObject* L_3 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1999));
		NullCheck(L_3);
		RuntimeObject* L_4 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(5 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_Visualizer() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_3);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1999));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2000));
		NullCheck(L_4);
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_5 = InterfaceFuncInvoker0< GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * >::Invoke(0 /* UnityEngine.GameObject Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer::get_GameObjectProxy() */, IMixedRealityControllerVisualizer_tF11B01C18D3E7D9443AFA3B890520D0F196716C5_il2cpp_TypeInfo_var, L_4);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2000));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2001));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_6 = Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C(L_5, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2001));
		if (L_6)
		{
			goto IL_0037;
		}
	}
	{
		RuntimeObject* L_7 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2002));
		NullCheck(L_7);
		RuntimeObject* L_8 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(5 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_Visualizer() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_7);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2002));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2003));
		NullCheck(L_8);
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_9 = InterfaceFuncInvoker0< GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * >::Invoke(0 /* UnityEngine.GameObject Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer::get_GameObjectProxy() */, IMixedRealityControllerVisualizer_tF11B01C18D3E7D9443AFA3B890520D0F196716C5_il2cpp_TypeInfo_var, L_8);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2003));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2004));
		NullCheck(L_9);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_10 = GameObject_get_transform_mA5C38857137F137CB96C69FAA624199EB1C2FB2C(L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2004));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2005));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_11 = Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C(L_10, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2005));
		G_B5_0 = ((int32_t)(L_11));
		goto IL_0038;
	}

IL_0037:
	{
		G_B5_0 = 1;
	}

IL_0038:
	{
		V_0 = (bool)G_B5_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1988));
		bool L_12 = V_0;
		if (!L_12)
		{
			goto IL_003f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1989));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1990));
		goto IL_0091;
	}

IL_003f:
	{
		// if (newController.ControllerHandedness == handedness &&
		//     !newController.Visualizer.GameObjectProxy.transform.Equals(ControllerTransform))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1991));
		RuntimeObject* L_13 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2006));
		NullCheck(L_13);
		uint8_t L_14 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_13);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2006));
		uint8_t L_15 = __this->get_handedness_4();
		if ((!(((uint32_t)L_14) == ((uint32_t)L_15))))
		{
			goto IL_006d;
		}
	}
	{
		RuntimeObject* L_16 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2007));
		NullCheck(L_16);
		RuntimeObject* L_17 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(5 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_Visualizer() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_16);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2007));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2008));
		NullCheck(L_17);
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_18 = InterfaceFuncInvoker0< GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * >::Invoke(0 /* UnityEngine.GameObject Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer::get_GameObjectProxy() */, IMixedRealityControllerVisualizer_tF11B01C18D3E7D9443AFA3B890520D0F196716C5_il2cpp_TypeInfo_var, L_17);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2008));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2009));
		NullCheck(L_18);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_19 = GameObject_get_transform_mA5C38857137F137CB96C69FAA624199EB1C2FB2C(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2009));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_20 = __this->get_ControllerTransform_5();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2010));
		NullCheck(L_19);
		bool L_21 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(0 /* System.Boolean System.Object::Equals(System.Object) */, L_19, L_20);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2010));
		G_B10_0 = ((((int32_t)L_21) == ((int32_t)0))? 1 : 0);
		goto IL_006e;
	}

IL_006d:
	{
		G_B10_0 = 0;
	}

IL_006e:
	{
		V_1 = (bool)G_B10_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1992));
		bool L_22 = V_1;
		if (!L_22)
		{
			goto IL_0091;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1993));
		// ControllerTransform = newController.Visualizer.GameObjectProxy.transform;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1994));
		RuntimeObject* L_23 = ___newController0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2011));
		NullCheck(L_23);
		RuntimeObject* L_24 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(5 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_Visualizer() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_23);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2011));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2012));
		NullCheck(L_24);
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_25 = InterfaceFuncInvoker0< GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * >::Invoke(0 /* UnityEngine.GameObject Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer::get_GameObjectProxy() */, IMixedRealityControllerVisualizer_tF11B01C18D3E7D9443AFA3B890520D0F196716C5_il2cpp_TypeInfo_var, L_24);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2012));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2013));
		NullCheck(L_25);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_26 = GameObject_get_transform_mA5C38857137F137CB96C69FAA624199EB1C2FB2C(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2013));
		__this->set_ControllerTransform_5(L_26);
		// OnControllerFound();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1995));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2014));
		VirtActionInvoker0::Invoke(12 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnControllerFound() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2014));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1996));
	}

IL_0091:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1997));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RemoveControllerTransform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_RemoveControllerTransform_mE963ADDACEC4E04C28DE0CE68E70B287CF49E7F8 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_RemoveControllerTransform_mE963ADDACEC4E04C28DE0CE68E70B287CF49E7F8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_RemoveControllerTransform_mE963ADDACEC4E04C28DE0CE68E70B287CF49E7F8_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2015));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2016));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2017));
		// if (ControllerTransform != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2018));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_ControllerTransform_5();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2025));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_1 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_0, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2025));
		V_0 = L_1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2019));
		bool L_2 = V_0;
		if (!L_2)
		{
			goto IL_0021;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2020));
		// OnControllerLost();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2021));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2026));
		VirtActionInvoker0::Invoke(13 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnControllerLost() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2026));
		// ControllerTransform = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2022));
		__this->set_ControllerTransform_5((Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA *)NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2023));
	}

IL_0021:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2024));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RefreshControllerTransform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_RefreshControllerTransform_m150FC68FF1FB3A1270BD64A2BC3652132F4B6417 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_RefreshControllerTransform_m150FC68FF1FB3A1270BD64A2BC3652132F4B6417_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_RefreshControllerTransform_m150FC68FF1FB3A1270BD64A2BC3652132F4B6417_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2027));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2028));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2029));
		// if (ControllerTransform != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2030));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_ControllerTransform_5();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2037));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_1 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_0, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2037));
		V_0 = L_1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2031));
		bool L_2 = V_0;
		if (!L_2)
		{
			goto IL_001a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2032));
		// RemoveControllerTransform();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2033));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2038));
		VirtActionInvoker0::Invoke(10 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::RemoveControllerTransform() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2038));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2034));
	}

IL_001a:
	{
		// TryAndAddControllerTransform();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2035));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2039));
		VirtActionInvoker0::Invoke(8 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::TryAndAddControllerTransform() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2039));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2036));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnControllerFound()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnControllerFound_m2A0EE282AF2D6B6FDD335E0A47EBBEF2D1A04841 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnControllerFound_m2A0EE282AF2D6B6FDD335E0A47EBBEF2D1A04841_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnControllerFound_m2A0EE282AF2D6B6FDD335E0A47EBBEF2D1A04841_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2040));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2041));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2042));
		// protected virtual void OnControllerFound() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2043));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::OnControllerLost()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder_OnControllerLost_m6A8DD6B07DC4AACBAEF02D5CB28879A3CA9E1CDF (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder_OnControllerLost_m6A8DD6B07DC4AACBAEF02D5CB28879A3CA9E1CDF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder_OnControllerLost_m6A8DD6B07DC4AACBAEF02D5CB28879A3CA9E1CDF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2044));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2045));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2046));
		// protected virtual void OnControllerLost() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2047));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ControllerFinder__ctor_m1826BF754FE127E816A0E612F997916D2BECB853 (ControllerFinder_t0351D20EBEEBB7E2C3774BA905C7BAEF3D491E3F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ControllerFinder__ctor_m1826BF754FE127E816A0E612F997916D2BECB853_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ControllerFinder__ctor_m1826BF754FE127E816A0E612F997916D2BECB853_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2048));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2049));
	{
		// private Handedness handedness = Handedness.None;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2050));
		__this->set_handedness_4(0);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2051));
		MonoBehaviour__ctor_mEAEC84B222C60319D593E456D769B3311DFCEF97(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2051));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::Start()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator_Start_mFF4129B9D9EC8591F77B19A7B50642657A6E5C3D (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator_Start_mFF4129B9D9EC8591F77B19A7B50642657A6E5C3D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator_Start_mFF4129B9D9EC8591F77B19A7B50642657A6E5C3D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2052));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2053));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2054));
		// base.Start();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2055));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2058));
		Solver_Start_m0CEF9100BB0981E30F791222FF24D030D176505D(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2058));
		// SetIndicatorVisibility(ShouldShowIndicator());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2056));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2059));
		bool L_0 = DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2059));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2060));
		DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2060));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2057));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::Update()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator_Update_mFCDC43C73B34012633D7369B145FD608E88049C3 (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator_Update_mFCDC43C73B34012633D7369B145FD608E88049C3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator_Update_mFCDC43C73B34012633D7369B145FD608E88049C3_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2061));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2062));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2063));
		// bool showIndicator = ShouldShowIndicator();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2064));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2071));
		bool L_0 = DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2071));
		V_0 = L_0;
		// if (showIndicator != indicatorShown)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2065));
		bool L_1 = V_0;
		bool L_2 = __this->get_indicatorShown_18();
		V_1 = (bool)((((int32_t)((((int32_t)L_1) == ((int32_t)L_2))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2066));
		bool L_3 = V_1;
		if (!L_3)
		{
			goto IL_0022;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2067));
		// SetIndicatorVisibility(showIndicator);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2068));
		bool L_4 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2072));
		DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E(__this, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2072));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2069));
	}

IL_0022:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2070));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::ShouldShowIndicator()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70 (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator_ShouldShowIndicator_mEDAF13143F50DAC0245E32C2B71B64F06468CC70_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2073));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2074));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2075));
		// if (DirectionalTarget == null || SolverHandler.TransformTarget == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2076));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_DirectionalTarget_13();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2082));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_1 = Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C(L_0, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2082));
		if (L_1)
		{
			goto IL_0022;
		}
	}
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_2 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2083));
		NullCheck(L_2);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_3 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2083));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2084));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_4 = Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C(L_3, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2084));
		G_B3_0 = ((int32_t)(L_4));
		goto IL_0023;
	}

IL_0022:
	{
		G_B3_0 = 1;
	}

IL_0023:
	{
		V_0 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2077));
		bool L_5 = V_0;
		if (!L_5)
		{
			goto IL_002c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2078));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2079));
		V_1 = (bool)0;
		goto IL_0083;
	}

IL_002c:
	{
		// return !MathUtilities.IsInFOV(DirectionalTarget.position, SolverHandler.TransformTarget,
		//     VisibilityScaleFactor * CameraCache.Main.fieldOfView, VisibilityScaleFactor * CameraCache.Main.GetHorizontalFieldOfViewDegrees(),
		//     CameraCache.Main.nearClipPlane, CameraCache.Main.farClipPlane);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2080));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_6 = __this->get_DirectionalTarget_13();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2085));
		NullCheck(L_6);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2085));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_8 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2086));
		NullCheck(L_8);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_9 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2086));
		float L_10 = __this->get_VisibilityScaleFactor_16();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2087));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_11 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2087));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2088));
		NullCheck(L_11);
		float L_12 = Camera_get_fieldOfView_m065A50B70AC3661337ACA482DDEFA29CCBD249D6(L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2088));
		float L_13 = __this->get_VisibilityScaleFactor_16();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2089));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_14 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2089));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2090));
		float L_15 = CameraExtensions_GetHorizontalFieldOfViewDegrees_m6B1F37E65453362A8F58A9410D223A9611041563(L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2090));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2091));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_16 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2091));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2092));
		NullCheck(L_16);
		float L_17 = Camera_get_nearClipPlane_mD9D3E3D27186BBAC2CC354CE3609E6118A5BF66C(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2092));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2093));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_18 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2093));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2094));
		NullCheck(L_18);
		float L_19 = Camera_get_farClipPlane_mF51F1FF5BE87719CFAC293E272B1138DC1EFFD4B(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2094));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2095));
		bool L_20 = MathUtilities_IsInFOV_mA2F9EFE9F654D701DA4AE2C40C77D80492923300(L_7, L_9, ((float)il2cpp_codegen_multiply((float)L_10, (float)L_12)), ((float)il2cpp_codegen_multiply((float)L_13, (float)L_15)), L_17, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2095));
		V_1 = (bool)((((int32_t)L_20) == ((int32_t)0))? 1 : 0);
		goto IL_0083;
	}

IL_0083:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2081));
		bool L_21 = V_1;
		return L_21;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::SetIndicatorVisibility(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, bool ___showIndicator0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* V_0 = NULL;
	int32_t V_1 = 0;
	Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * V_2 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___showIndicator0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator_SetIndicatorVisibility_mCE563F3B543E41898232E03464C1C25441E20C3E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2096));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2097));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2098));
		// SolverHandler.UpdateSolvers = showIndicator;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2099));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		bool L_1 = ___showIndicator0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2111));
		NullCheck(L_0);
		SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BB_inline(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2111));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2100));
		// foreach (var renderer in GetComponentsInChildren<Renderer>())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2101));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2112));
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_2 = Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9(__this, /*hidden argument*/Component_GetComponentsInChildren_TisRenderer_t0556D67DD582620D1F495627EDE30D03284151F4_mFF06011DFE2A1EC6DFC8FF1C1E78EF60CA07E9D9_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2112));
		V_0 = L_2;
		V_1 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2102));
		goto IL_002c;
	}

IL_001a:
	{
		// foreach (var renderer in GetComponentsInChildren<Renderer>())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2103));
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_3 = V_0;
		int32_t L_4 = V_1;
		NullCheck(L_3);
		int32_t L_5 = L_4;
		Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * L_6 = (L_3)->GetAt(static_cast<il2cpp_array_size_t>(L_5));
		V_2 = L_6;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2104));
		// renderer.enabled = showIndicator;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2105));
		Renderer_t0556D67DD582620D1F495627EDE30D03284151F4 * L_7 = V_2;
		bool L_8 = ___showIndicator0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2113));
		NullCheck(L_7);
		Renderer_set_enabled_m0933766657F2685BAAE3340B0A984C0E63925303(L_7, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2113));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2106));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2107));
		int32_t L_9 = V_1;
		V_1 = ((int32_t)il2cpp_codegen_add((int32_t)L_9, (int32_t)1));
	}

IL_002c:
	{
		// foreach (var renderer in GetComponentsInChildren<Renderer>())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2108));
		int32_t L_10 = V_1;
		RendererU5BU5D_t711BACBBBFC0E06179ADB8932DBA208665108C93* L_11 = V_0;
		NullCheck(L_11);
		if ((((int32_t)L_10) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_11)->max_length)))))))
		{
			goto IL_001a;
		}
	}
	{
		// indicatorShown = showIndicator;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2109));
		bool L_12 = ___showIndicator0;
		__this->set_indicatorShown_18(L_12);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2110));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::SolverUpdate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator_SolverUpdate_mF817A86515F3BE5AD8D6FAACE2EFB76CCC175E71 (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator_SolverUpdate_mF817A86515F3BE5AD8D6FAACE2EFB76CCC175E71_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * V_0 = NULL;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	float V_4 = 0.0f;
	float V_5 = 0.0f;
	float V_6 = 0.0f;
	bool V_7 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_8;
	memset((&V_8), 0, sizeof(V_8));
	bool V_9 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5), (&V_6));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator_SolverUpdate_mF817A86515F3BE5AD8D6FAACE2EFB76CCC175E71_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2114));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2115));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2116));
		// if (DirectionalTarget == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2117));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_DirectionalTarget_13();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2137));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_1 = Object_op_Equality_mBC2401774F3BE33E8CF6F0A8148E66C95D6CFF1C(L_0, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2137));
		V_7 = L_1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2118));
		bool L_2 = V_7;
		if (!L_2)
		{
			goto IL_0019;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2119));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2120));
		goto IL_011e;
	}

IL_0019:
	{
		// var solverReferenceFrame = SolverHandler.TransformTarget;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2121));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_3 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2138));
		NullCheck(L_3);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_4 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2138));
		V_0 = L_4;
		// Vector3 origin = solverReferenceFrame.position + solverReferenceFrame.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2122));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_5 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2139));
		NullCheck(L_5);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2139));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2140));
		NullCheck(L_7);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2140));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2141));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_6, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2141));
		V_1 = L_9;
		// Vector3 trackerToTargetDirection = (DirectionalTarget.position - solverReferenceFrame.position).normalized;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2123));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_10 = __this->get_DirectionalTarget_13();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2142));
		NullCheck(L_10);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2142));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_12 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2143));
		NullCheck(L_12);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_13 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2143));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2144));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_11, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2144));
		V_8 = L_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2145));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2145));
		V_2 = L_15;
		// Vector3 indicatorDirection = Vector3.ProjectOnPlane(trackerToTargetDirection, -solverReferenceFrame.forward).normalized;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2124));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = V_2;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_17 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2146));
		NullCheck(L_17);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2146));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2147));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2147));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2148));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = Vector3_ProjectOnPlane_mAF89645654808BBD9754610879F94A2B3323D206(L_16, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2148));
		V_8 = L_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2149));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_21 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2149));
		V_3 = L_21;
		// if (indicatorDirection == Vector3.zero)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2125));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2150));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_23 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2150));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2151));
		bool L_24 = Vector3_op_Equality_mA9E2F96E98E71AE7ACCE74766D700D41F0404806(L_22, L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2151));
		V_9 = L_24;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2126));
		bool L_25 = V_9;
		if (!L_25)
		{
			goto IL_008c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2127));
		// indicatorDirection = solverReferenceFrame.right;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2128));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_26 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2152));
		NullCheck(L_26);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = Transform_get_right_mC32CE648E98D3D4F62F897A2751EE567C7C0CFB0(L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2152));
		V_3 = L_27;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2129));
	}

IL_008c:
	{
		// GoalPosition = origin + indicatorDirection * ViewOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2130));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_28 = V_1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = V_3;
		float L_30 = __this->get_ViewOffset_17();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2153));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_29, L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2153));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2154));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_32 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_28, L_31, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2154));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2155));
		Solver_set_GoalPosition_mA4209D5D63BDC3ACFA8D2B57CAE4440112C7D2A0(__this, L_32, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2155));
		// GoalRotation = Quaternion.LookRotation(solverReferenceFrame.forward, indicatorDirection);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2131));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_33 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2156));
		NullCheck(L_33);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_34 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2156));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_35 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2157));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_36 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_34, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2157));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2158));
		Solver_set_GoalRotation_mD9DA2B8177E59A95991E10A791208842451CB80E(__this, L_36, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2158));
		// float minVisiblityAngle = VisibilityScaleFactor * CameraCache.Main.fieldOfView * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2132));
		float L_37 = __this->get_VisibilityScaleFactor_16();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2159));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_38 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2159));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2160));
		NullCheck(L_38);
		float L_39 = Camera_get_fieldOfView_m065A50B70AC3661337ACA482DDEFA29CCBD249D6(L_38, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2160));
		V_4 = ((float)il2cpp_codegen_multiply((float)((float)il2cpp_codegen_multiply((float)L_37, (float)L_39)), (float)(0.5f)));
		// float angleToVisbilityFOV = Vector3.Angle(trackerToTargetDirection - solverReferenceFrame.position, solverReferenceFrame.forward) - minVisiblityAngle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2133));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_40 = V_2;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_41 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2161));
		NullCheck(L_41);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_42 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_41, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2161));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2162));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_43 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_40, L_42, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2162));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_44 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2163));
		NullCheck(L_44);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_45 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2163));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2164));
		float L_46 = Vector3_Angle_m8911FFA1DD1C8C46D923B52645B352FA1521CD5F(L_43, L_45, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2164));
		float L_47 = V_4;
		V_5 = ((float)il2cpp_codegen_subtract((float)L_46, (float)L_47));
		// float visibilityScale = 180f - minVisiblityAngle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2134));
		float L_48 = V_4;
		V_6 = ((float)il2cpp_codegen_subtract((float)(180.0f), (float)L_48));
		// GoalScale = Vector3.one * Mathf.Lerp(MinIndicatorScale, MaxIndicatorScale, angleToVisbilityFOV / visibilityScale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2135));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2165));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_49 = Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2165));
		float L_50 = __this->get_MinIndicatorScale_14();
		float L_51 = __this->get_MaxIndicatorScale_15();
		float L_52 = V_5;
		float L_53 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2166));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_54 = Mathf_Lerp_m9A74C5A0C37D0CDF45EE66E7774D12A9B93B1364(L_50, L_51, ((float)((float)L_52/(float)L_53)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2166));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2167));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_55 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_49, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2167));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2168));
		Solver_set_GoalScale_m923D113233485CD56065FE83C453CC21218B20BB(__this, L_55, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2168));
	}

IL_011e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2136));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.DirectionalIndicator::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DirectionalIndicator__ctor_m042C2CD3124F5D2AAFA3433BDC322990E8FCEA8C (DirectionalIndicator_t4BB7F6FB6C546827708C5E560C018BA144388711 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DirectionalIndicator__ctor_m042C2CD3124F5D2AAFA3433BDC322990E8FCEA8C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, DirectionalIndicator__ctor_m042C2CD3124F5D2AAFA3433BDC322990E8FCEA8C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2169));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2170));
	{
		// public float MinIndicatorScale = 0.05f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2171));
		__this->set_MinIndicatorScale_14((0.05f));
		// public float MaxIndicatorScale = 0.2f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2172));
		__this->set_MaxIndicatorScale_15((0.2f));
		// public float VisibilityScaleFactor = 0.8f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2173));
		__this->set_VisibilityScaleFactor_16((0.8f));
		// public float ViewOffset = 0.3f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2174));
		__this->set_ViewOffset_17((0.3f));
		// private bool indicatorShown = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2175));
		__this->set_indicatorShown_18((bool)0);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2176));
		Solver__ctor_m45C1467BE22F4DD1541D08434DD5A046F1099CAC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2176));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_OrientationType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2177));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2178));
	{
		// get => orientationType;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2179));
		int32_t L_0 = __this->get_orientationType_13();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_OrientationType(Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_OrientationType_mC2DB45099957BA1219EC308C20021BCC5269A1C1 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_OrientationType_mC2DB45099957BA1219EC308C20021BCC5269A1C1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_OrientationType_mC2DB45099957BA1219EC308C20021BCC5269A1C1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2180));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2181));
	{
		// set => orientationType = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2182));
		int32_t L_0 = ___value0;
		__this->set_orientationType_13(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_FaceTrackedObjectWhileClamped()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2183));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2184));
	{
		// get => faceTrackedObjectWhileClamped;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2185));
		bool L_0 = __this->get_faceTrackedObjectWhileClamped_14();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_FaceTrackedObjectWhileClamped(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_FaceTrackedObjectWhileClamped_m08932779B799BF1714F057F903A5FF45CC361B53 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_FaceTrackedObjectWhileClamped_m08932779B799BF1714F057F903A5FF45CC361B53_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_FaceTrackedObjectWhileClamped_m08932779B799BF1714F057F903A5FF45CC361B53_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2186));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2187));
	{
		// set => faceTrackedObjectWhileClamped = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2188));
		bool L_0 = ___value0;
		__this->set_faceTrackedObjectWhileClamped_14(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_FaceUserDefinedTargetTransform()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2189));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2190));
	{
		// get => faceUserDefinedTargetTransform;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2191));
		bool L_0 = __this->get_faceUserDefinedTargetTransform_15();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_FaceUserDefinedTargetTransform(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_FaceUserDefinedTargetTransform_mD7EB957628CDE807BAA24530A7368D240B24E078 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_FaceUserDefinedTargetTransform_mD7EB957628CDE807BAA24530A7368D240B24E078_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_FaceUserDefinedTargetTransform_mD7EB957628CDE807BAA24530A7368D240B24E078_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2192));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2193));
	{
		// set => faceUserDefinedTargetTransform = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2194));
		bool L_0 = ___value0;
		__this->set_faceUserDefinedTargetTransform_15(L_0);
		return;
	}
}
// UnityEngine.Transform Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_TargetToFace()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2195));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2196));
	{
		// get => targetToFace;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2197));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_targetToFace_16();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_TargetToFace(UnityEngine.Transform)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_TargetToFace_mFF886366A56BCE482D5D902DAD9912DBD5103209 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_TargetToFace_mFF886366A56BCE482D5D902DAD9912DBD5103209_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_TargetToFace_mFF886366A56BCE482D5D902DAD9912DBD5103209_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2198));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2199));
	{
		// set => targetToFace = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2200));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = ___value0;
		__this->set_targetToFace_16(L_0);
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.AxisFlags Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_PivotAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2201));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2202));
	{
		// get => pivotAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2203));
		int32_t L_0 = __this->get_pivotAxis_17();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_PivotAxis(Microsoft.MixedReality.Toolkit.Utilities.AxisFlags)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_PivotAxis_m86EE03789188243A289BA4617B21FAA455CE5BAA (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_PivotAxis_m86EE03789188243A289BA4617B21FAA455CE5BAA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_PivotAxis_m86EE03789188243A289BA4617B21FAA455CE5BAA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2204));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2205));
	{
		// set => pivotAxis = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2206));
		int32_t L_0 = ___value0;
		__this->set_pivotAxis_17(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MinDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2207));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2208));
	{
		// get => minDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2209));
		float L_0 = __this->get_minDistance_18();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_MinDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_MinDistance_mE71071CBEC1574012E53101B770365D28908AB62 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_MinDistance_mE71071CBEC1574012E53101B770365D28908AB62_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_MinDistance_mE71071CBEC1574012E53101B770365D28908AB62_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2210));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2211));
	{
		// set => minDistance = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2212));
		float L_0 = ___value0;
		__this->set_minDistance_18(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2213));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2214));
	{
		// get => maxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2215));
		float L_0 = __this->get_maxDistance_19();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_MaxDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_MaxDistance_mB887ADF0B8B11755024849A73332182CF5F237F9 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_MaxDistance_mB887ADF0B8B11755024849A73332182CF5F237F9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_MaxDistance_mB887ADF0B8B11755024849A73332182CF5F237F9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2216));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2217));
	{
		// set => maxDistance = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2218));
		float L_0 = ___value0;
		__this->set_maxDistance_19(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_DefaultDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2219));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2220));
	{
		// get => defaultDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2221));
		float L_0 = __this->get_defaultDistance_20();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_DefaultDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_DefaultDistance_mD7F91619CD48C603AF9E55D2E3271A8219FEEF64 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_DefaultDistance_mD7F91619CD48C603AF9E55D2E3271A8219FEEF64_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_DefaultDistance_mD7F91619CD48C603AF9E55D2E3271A8219FEEF64_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2222));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2223));
	{
		// set => defaultDistance = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2224));
		float L_0 = ___value0;
		__this->set_defaultDistance_20(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxViewHorizontalDegrees()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2225));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2226));
	{
		// get => maxViewHorizontalDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2227));
		float L_0 = __this->get_maxViewHorizontalDegrees_21();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_MaxViewHorizontalDegrees(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_MaxViewHorizontalDegrees_mA9AA90F15452AA140775C3C2017E4A99EB25A6A7 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_MaxViewHorizontalDegrees_mA9AA90F15452AA140775C3C2017E4A99EB25A6A7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_MaxViewHorizontalDegrees_mA9AA90F15452AA140775C3C2017E4A99EB25A6A7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2228));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2229));
	{
		// set => maxViewHorizontalDegrees = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2230));
		float L_0 = ___value0;
		__this->set_maxViewHorizontalDegrees_21(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_MaxViewVerticalDegrees()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2231));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2232));
	{
		// get => maxViewVerticalDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2233));
		float L_0 = __this->get_maxViewVerticalDegrees_22();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_MaxViewVerticalDegrees(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_MaxViewVerticalDegrees_m843654E15854DACD29BA53B791B957EB0419D635 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_MaxViewVerticalDegrees_m843654E15854DACD29BA53B791B957EB0419D635_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_MaxViewVerticalDegrees_m843654E15854DACD29BA53B791B957EB0419D635_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2234));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2235));
	{
		// set => maxViewVerticalDegrees = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2236));
		float L_0 = ___value0;
		__this->set_maxViewVerticalDegrees_22(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_ReorientWhenOutsideParameters()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_ReorientWhenOutsideParameters_m9C74486EBF4BB7FA21ED07632734002DD20E59CA (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_ReorientWhenOutsideParameters_m9C74486EBF4BB7FA21ED07632734002DD20E59CA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_ReorientWhenOutsideParameters_m9C74486EBF4BB7FA21ED07632734002DD20E59CA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2237));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2238));
	{
		// get => reorientWhenOutsideParameters;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2239));
		bool L_0 = __this->get_reorientWhenOutsideParameters_23();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_ReorientWhenOutsideParameters(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_ReorientWhenOutsideParameters_m476745EA12EF6E68D7FED4EBBF2A6C23CC28CE00 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_ReorientWhenOutsideParameters_m476745EA12EF6E68D7FED4EBBF2A6C23CC28CE00_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_ReorientWhenOutsideParameters_m476745EA12EF6E68D7FED4EBBF2A6C23CC28CE00_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2240));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2241));
	{
		// set => reorientWhenOutsideParameters = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2242));
		bool L_0 = ___value0;
		__this->set_reorientWhenOutsideParameters_23(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_OrientToControllerDeadzoneDegrees()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2243));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2244));
	{
		// get => orientToControllerDeadzoneDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2245));
		float L_0 = __this->get_orientToControllerDeadzoneDegrees_24();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_OrientToControllerDeadzoneDegrees(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_OrientToControllerDeadzoneDegrees_mC2877B752FA1E055AC981EDE4F245114ECD4BB6D (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_OrientToControllerDeadzoneDegrees_mC2877B752FA1E055AC981EDE4F245114ECD4BB6D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_OrientToControllerDeadzoneDegrees_mC2877B752FA1E055AC981EDE4F245114ECD4BB6D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2246));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2247));
	{
		// set => orientToControllerDeadzoneDegrees = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2248));
		float L_0 = ___value0;
		__this->set_orientToControllerDeadzoneDegrees_24(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_IgnoreAngleClamp()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_IgnoreAngleClamp_mAFBAB7B4956582516C398BD2FEDB7EBF9C0C6E49 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_IgnoreAngleClamp_mAFBAB7B4956582516C398BD2FEDB7EBF9C0C6E49_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_IgnoreAngleClamp_mAFBAB7B4956582516C398BD2FEDB7EBF9C0C6E49_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2249));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2250));
	{
		// get => ignoreAngleClamp;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2251));
		bool L_0 = __this->get_ignoreAngleClamp_25();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_IgnoreAngleClamp(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_IgnoreAngleClamp_m6D4F2FE92F26B25A63FA736AFD9742BEC6D32778 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_IgnoreAngleClamp_m6D4F2FE92F26B25A63FA736AFD9742BEC6D32778_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_IgnoreAngleClamp_m6D4F2FE92F26B25A63FA736AFD9742BEC6D32778_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2252));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2253));
	{
		// set => ignoreAngleClamp = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2254));
		bool L_0 = ___value0;
		__this->set_ignoreAngleClamp_25(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_IgnoreDistanceClamp()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_IgnoreDistanceClamp_mB10E63A2DB207ABFB5C18B26CE5CF850ADF2FBFA (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_IgnoreDistanceClamp_mB10E63A2DB207ABFB5C18B26CE5CF850ADF2FBFA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_IgnoreDistanceClamp_mB10E63A2DB207ABFB5C18B26CE5CF850ADF2FBFA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2255));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2256));
	{
		// get => ignoreDistanceClamp;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2257));
		bool L_0 = __this->get_ignoreDistanceClamp_26();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_IgnoreDistanceClamp(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_IgnoreDistanceClamp_m483CBB001E4A4D92406DBFF4E01A2AD27E762B25 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_IgnoreDistanceClamp_m483CBB001E4A4D92406DBFF4E01A2AD27E762B25_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_IgnoreDistanceClamp_m483CBB001E4A4D92406DBFF4E01A2AD27E762B25_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2258));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2259));
	{
		// set => ignoreDistanceClamp = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2260));
		bool L_0 = ___value0;
		__this->set_ignoreDistanceClamp_26(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_IgnoreReferencePitchAndRoll()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2261));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2262));
	{
		// get => ignoreReferencePitchAndRoll;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2263));
		bool L_0 = __this->get_ignoreReferencePitchAndRoll_27();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_IgnoreReferencePitchAndRoll(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_IgnoreReferencePitchAndRoll_m8589A0AFFB70CC82192B9B73588C843954F00F2E (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_IgnoreReferencePitchAndRoll_m8589A0AFFB70CC82192B9B73588C843954F00F2E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_IgnoreReferencePitchAndRoll_m8589A0AFFB70CC82192B9B73588C843954F00F2E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2264));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2265));
	{
		// set => ignoreReferencePitchAndRoll = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2266));
		bool L_0 = ___value0;
		__this->set_ignoreReferencePitchAndRoll_27(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_PitchOffset()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2267));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2268));
	{
		// get => pitchOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2269));
		float L_0 = __this->get_pitchOffset_28();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_PitchOffset(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_PitchOffset_m2B075A993EC36A7C36C94D1400CBB73AC1D3182F (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_PitchOffset_m2B075A993EC36A7C36C94D1400CBB73AC1D3182F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_PitchOffset_m2B075A993EC36A7C36C94D1400CBB73AC1D3182F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2270));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2271));
	{
		// set => pitchOffset = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2272));
		float L_0 = ___value0;
		__this->set_pitchOffset_28(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_VerticalMaxDistance()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2273));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2274));
	{
		// get => verticalMaxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2275));
		float L_0 = __this->get_verticalMaxDistance_29();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_VerticalMaxDistance(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_VerticalMaxDistance_m5A44D07D011399ED13CA0E527C9F3C475DE1521A (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_VerticalMaxDistance_m5A44D07D011399ED13CA0E527C9F3C475DE1521A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_VerticalMaxDistance_m5A44D07D011399ED13CA0E527C9F3C475DE1521A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2276));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2277));
	{
		// set => verticalMaxDistance = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2278));
		float L_0 = ___value0;
		__this->set_verticalMaxDistance_29(L_0);
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_AngularClampMode()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Follow_get_AngularClampMode_mCDE4E6D83ADBB0E889CBB9EF7543D44F0B9EF593 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_AngularClampMode_mCDE4E6D83ADBB0E889CBB9EF7543D44F0B9EF593_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_AngularClampMode_mCDE4E6D83ADBB0E889CBB9EF7543D44F0B9EF593_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2279));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2280));
	{
		// get => angularClampMode;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2281));
		int32_t L_0 = __this->get_angularClampMode_30();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_AngularClampMode(Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_AngularClampMode_m58F88F8805B4C5DA6DEB7C42154F877E39C6FDEC (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_AngularClampMode_m58F88F8805B4C5DA6DEB7C42154F877E39C6FDEC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_AngularClampMode_m58F88F8805B4C5DA6DEB7C42154F877E39C6FDEC_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2282));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2283));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2284));
		// angularClampMode = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2285));
		int32_t L_0 = ___value0;
		__this->set_angularClampMode_30(L_0);
		// RecalculateBoundsExtents();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2286));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2288));
		Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2288));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2287));
		return;
	}
}
// System.Int32 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_TetherAngleSteps()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Follow_get_TetherAngleSteps_mD496CA20C434E4C6C1A7DC3516B514663757E1DF (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_TetherAngleSteps_mD496CA20C434E4C6C1A7DC3516B514663757E1DF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_TetherAngleSteps_mD496CA20C434E4C6C1A7DC3516B514663757E1DF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2289));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2290));
	{
		// get => tetherAngleSteps;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2291));
		int32_t L_0 = __this->get_tetherAngleSteps_31();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_TetherAngleSteps(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_TetherAngleSteps_m85208F881584B3B53F62E4E606BD615820EB2EE7 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_TetherAngleSteps_m85208F881584B3B53F62E4E606BD615820EB2EE7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_TetherAngleSteps_m85208F881584B3B53F62E4E606BD615820EB2EE7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2292));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2293));
	{
		// set => tetherAngleSteps = Mathf.Clamp(value, 2, 24);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2294));
		int32_t L_0 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2295));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_1 = Mathf_Clamp_mE1EA15D719BF2F632741D42DF96F0BC797A20389(L_0, 2, ((int32_t)24), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2295));
		__this->set_tetherAngleSteps_31(L_1);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_BoundsScaler()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_get_BoundsScaler_mD3A43892AB608E45BE85DC040C47E7F8D33AD327 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_BoundsScaler_mD3A43892AB608E45BE85DC040C47E7F8D33AD327_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_BoundsScaler_mD3A43892AB608E45BE85DC040C47E7F8D33AD327_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2296));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2297));
	{
		// get => boundsScaler;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2298));
		float L_0 = __this->get_boundsScaler_32();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::set_BoundsScaler(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_set_BoundsScaler_m00C8734BCBD6CA0CB5D80362CDDA3BB9CCC71383 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_set_BoundsScaler_m00C8734BCBD6CA0CB5D80362CDDA3BB9CCC71383_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_set_BoundsScaler_m00C8734BCBD6CA0CB5D80362CDDA3BB9CCC71383_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2299));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2300));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2301));
		// boundsScaler = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2302));
		float L_0 = ___value0;
		__this->set_boundsScaler_32(L_0);
		// RecalculateBoundsExtents();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2303));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2305));
		Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2305));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2304));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::Recenter()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_Recenter_mA6A972E24E30FCB7890201DD5EE4808424F6FC42 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_Recenter_mA6A972E24E30FCB7890201DD5EE4808424F6FC42_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_Recenter_mA6A972E24E30FCB7890201DD5EE4808424F6FC42_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2306));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2307));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2308));
		// recenterNextUpdate = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2309));
		__this->set_recenterNextUpdate_34((bool)1);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2310));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::RecalculateBoundsExtents()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2311));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2312));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2313));
		// GetBounds(gameObject, angularClampMode, out bounds);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2314));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2317));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_0 = Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2317));
		int32_t L_1 = __this->get_angularClampMode_30();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2318));
		Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D(L_0, L_1, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2318));
		// boundsExtents = bounds.extents * boundsScaler;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2315));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2319));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Bounds_get_extents_mBA4B2196036DD5A858BDAD53BC71A778B41841C9((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2319));
		float L_3 = __this->get_boundsScaler_32();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2320));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2320));
		__this->set_boundsExtents_35(L_4);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2316));
		return;
	}
}
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_ReferencePosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2321));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2322));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B3_0;
	memset((&G_B3_0), 0, sizeof(G_B3_0));
	{
		// private Vector3 ReferencePosition => SolverHandler.TransformTarget != null ? SolverHandler.TransformTarget.position : Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2323));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2324));
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2324));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2325));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_2 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_1, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2325));
		if (L_2)
		{
			goto IL_001a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2326));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2326));
		G_B3_0 = L_3;
		goto IL_002a;
	}

IL_001a:
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_4 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2327));
		NullCheck(L_4);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_5 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2327));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2328));
		NullCheck(L_5);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2328));
		G_B3_0 = L_6;
	}

IL_002a:
	{
		return G_B3_0;
	}
}
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::get_ReferenceRotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2329));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2330));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B3_0;
	memset((&G_B3_0), 0, sizeof(G_B3_0));
	{
		// private Quaternion ReferenceRotation => SolverHandler.TransformTarget != null ? SolverHandler.TransformTarget.rotation : Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2331));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2332));
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2332));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2333));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_2 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_1, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2333));
		if (L_2)
		{
			goto IL_001a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2334));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_3 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2334));
		G_B3_0 = L_3;
		goto IL_002a;
	}

IL_001a:
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_4 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2335));
		NullCheck(L_4);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_5 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2335));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2336));
		NullCheck(L_5);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_6 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2336));
		G_B3_0 = L_6;
	}

IL_002a:
	{
		return G_B3_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_OnEnable_m7564FE8890C4B95F4B84037F6A28BD864030A525 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_OnEnable_m7564FE8890C4B95F4B84037F6A28BD864030A525_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_OnEnable_m7564FE8890C4B95F4B84037F6A28BD864030A525_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2337));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2338));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2339));
		// base.OnEnable();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2340));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2343));
		Solver_OnEnable_m2C1DAD96179B3122345E5D8E147F4A0C9906E4E4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2343));
		// RecalculateBoundsExtents();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2341));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2344));
		Follow_RecalculateBoundsExtents_m593A79DD3FDF6AAAB3BE40FAC3840F4FC4135B31(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2344));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2342));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::SolverUpdate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_SolverUpdate_mD94B088CC81E067A0E9E97F7DEC059EA56918D89 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_SolverUpdate_mD94B088CC81E067A0E9E97F7DEC059EA56918D89_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_1;
	memset((&V_1), 0, sizeof(V_1));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	bool V_4 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_5;
	memset((&V_5), 0, sizeof(V_5));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_6;
	memset((&V_6), 0, sizeof(V_6));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_7;
	memset((&V_7), 0, sizeof(V_7));
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	bool V_12 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5), (&V_6), (&V_7));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_SolverUpdate_mD94B088CC81E067A0E9E97F7DEC059EA56918D89_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2345));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2346));
	int32_t G_B5_0 = 0;
	int32_t G_B10_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2347));
		// Vector3 refPosition = Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2348));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2392));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2392));
		V_0 = L_0;
		// Quaternion refRotation = Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2349));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2393));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_1 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2393));
		V_1 = L_1;
		// Vector3 refForward = Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2350));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2394));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2394));
		V_2 = L_2;
		// GetReferenceInfo(ref refPosition, ref refRotation, ref refForward);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2351));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2395));
		Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A(__this, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_0), (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)(&V_1), (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2395));
		// Vector3 currentPosition = WorkingPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2352));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2396));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = Solver_get_WorkingPosition_m2CF2F7B4E2C341A65E4246DF24E91B69FA826795(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2396));
		V_3 = L_3;
		// if (recenterNextUpdate)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2353));
		bool L_4 = __this->get_recenterNextUpdate_34();
		V_8 = L_4;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2354));
		bool L_5 = V_8;
		if (!L_5)
		{
			goto IL_0048;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2355));
		// currentPosition = refPosition + refForward * DefaultDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2356));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2397));
		float L_8 = Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2397));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2398));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_7, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2398));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2399));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_6, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2399));
		V_3 = L_10;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2357));
	}

IL_0048:
	{
		// bool wasClamped = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2358));
		V_4 = (bool)0;
		// Vector3 goalDirection = refForward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2359));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = V_2;
		V_5 = L_11;
		// if (!ignoreAngleClamp && !recenterNextUpdate)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2360));
		bool L_12 = __this->get_ignoreAngleClamp_25();
		if (L_12)
		{
			goto IL_0061;
		}
	}
	{
		bool L_13 = __this->get_recenterNextUpdate_34();
		G_B5_0 = ((((int32_t)L_13) == ((int32_t)0))? 1 : 0);
		goto IL_0062;
	}

IL_0061:
	{
		G_B5_0 = 0;
	}

IL_0062:
	{
		V_9 = (bool)G_B5_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2361));
		bool L_14 = V_9;
		if (!L_14)
		{
			goto IL_007a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2362));
		// wasClamped |= AngularClamp(refPosition, refRotation, currentPosition, ref goalDirection);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2363));
		bool L_15 = V_4;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = V_0;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_17 = V_1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2400));
		bool L_19 = Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12(__this, L_16, L_17, L_18, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2400));
		V_4 = (bool)((int32_t)((int32_t)L_15|(int32_t)L_19));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2364));
	}

IL_007a:
	{
		// Vector3 goalPosition = currentPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2365));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = V_3;
		V_6 = L_20;
		// if (!ignoreDistanceClamp && !recenterNextUpdate)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2366));
		bool L_21 = __this->get_ignoreDistanceClamp_26();
		if (L_21)
		{
			goto IL_0090;
		}
	}
	{
		bool L_22 = __this->get_recenterNextUpdate_34();
		G_B10_0 = ((((int32_t)L_22) == ((int32_t)0))? 1 : 0);
		goto IL_0091;
	}

IL_0090:
	{
		G_B10_0 = 0;
	}

IL_0091:
	{
		V_10 = (bool)G_B10_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2367));
		bool L_23 = V_10;
		if (!L_23)
		{
			goto IL_00aa;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2368));
		// wasClamped |= DistanceClamp(currentPosition, refPosition, goalDirection, ref goalPosition);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2369));
		bool L_24 = V_4;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25 = V_3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2401));
		bool L_28 = Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77(__this, L_25, L_26, L_27, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2401));
		V_4 = (bool)((int32_t)((int32_t)L_24|(int32_t)L_28));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2370));
	}

IL_00aa:
	{
		// Quaternion goalRotation = Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2371));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2402));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_29 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2402));
		V_7 = L_29;
		// ComputeOrientation(goalPosition, wasClamped, ref goalRotation);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2372));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_30 = V_6;
		bool L_31 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2403));
		Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2(__this, L_30, L_31, (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)(&V_7), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2403));
		// if (recenterNextUpdate)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2373));
		bool L_32 = __this->get_recenterNextUpdate_34();
		V_11 = L_32;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2374));
		bool L_33 = V_11;
		if (!L_33)
		{
			goto IL_00ee;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2375));
		// PreviousGoalRotation = goalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2376));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_34 = V_7;
		__this->set_PreviousGoalRotation_33(L_34);
		// SnapTo(goalPosition, goalRotation, WorkingScale);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2377));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_35 = V_6;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_36 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2404));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_37 = Solver_get_WorkingScale_m7D7C2320471D6CEA07A631BF5CAE504668E0075E(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2404));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2405));
		VirtActionInvoker3< Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(9 /* System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver::SnapTo(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3) */, __this, L_35, L_36, L_37);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2405));
		// recenterNextUpdate = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2378));
		__this->set_recenterNextUpdate_34((bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2379));
		goto IL_0122;
	}

IL_00ee:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2380));
		// if (wasClamped)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2381));
		bool L_38 = V_4;
		V_12 = L_38;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2382));
		bool L_39 = V_12;
		if (!L_39)
		{
			goto IL_0102;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2383));
		// GoalPosition = goalPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2384));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_40 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2406));
		Solver_set_GoalPosition_mA4209D5D63BDC3ACFA8D2B57CAE4440112C7D2A0(__this, L_40, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2406));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2385));
	}

IL_0102:
	{
		// GoalRotation = goalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2386));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_41 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2407));
		Solver_set_GoalRotation_mD9DA2B8177E59A95991E10A791208842451CB80E(__this, L_41, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2407));
		// PreviousGoalRotation = goalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2387));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_42 = V_7;
		__this->set_PreviousGoalRotation_33(L_42);
		// UpdateWorkingPositionToGoal();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2388));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2408));
		Solver_UpdateWorkingPositionToGoal_m37637FDAE4188DE06EB2436E8647CDA3E853BDFA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2408));
		// UpdateWorkingRotationToGoal();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2389));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2409));
		Solver_UpdateWorkingRotationToGoal_m703152C16912206024090C82BF1EFC998BE51D3F(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2409));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2390));
	}

IL_0122:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2391));
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngleBetweenOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___from0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___to1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___normal2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	float V_2 = 0.0f;
	float V_3 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___from0), (&___to1), (&___normal2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2410));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2411));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2412));
		// from.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2413));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2421));
		Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&___from0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2421));
		// to.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2414));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2422));
		Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&___to1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2422));
		// normal.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2415));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2423));
		Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&___normal2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2423));
		// Vector3 right = Vector3.Cross(normal, from);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2416));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___normal2;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___from0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2424));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2424));
		V_0 = L_2;
		// Vector3 forward = Vector3.Cross(right, normal);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2417));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = ___normal2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2425));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887(L_3, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2425));
		V_1 = L_5;
		// float angle = Mathf.Atan2(Vector3.Dot(to, right), Vector3.Dot(to, forward));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2418));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = ___to1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2426));
		float L_8 = Vector3_Dot_m0C530E1C51278DE28B77906D56356506232272C1(L_6, L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2426));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = ___to1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2427));
		float L_11 = Vector3_Dot_m0C530E1C51278DE28B77906D56356506232272C1(L_9, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2427));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2428));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_12 = atan2f(L_8, L_11);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2428));
		V_2 = L_12;
		// return SimplifyAngle(angle) * Mathf.Rad2Deg;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2419));
		float L_13 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2429));
		float L_14 = Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5(__this, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2429));
		V_3 = ((float)il2cpp_codegen_multiply((float)L_14, (float)(57.29578f)));
		goto IL_004d;
	}

IL_004d:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2420));
		float L_15 = V_3;
		return L_15;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngleBetweenVectorAndPlane(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___vec0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___normal1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___vec0), (&___normal1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2430));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2431));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2432));
		// return 90 - (Mathf.Acos(Vector3.Dot(vec, normal)) * Mathf.Rad2Deg);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2433));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___vec0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___normal1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2435));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_2 = Vector3_Dot_m0C530E1C51278DE28B77906D56356506232272C1(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2435));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2436));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_3 = acosf(L_2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2436));
		V_0 = ((float)il2cpp_codegen_subtract((float)(90.0f), (float)((float)il2cpp_codegen_multiply((float)L_3, (float)(57.29578f)))));
		goto IL_001c;
	}

IL_001c:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2434));
		float L_4 = V_0;
		return L_4;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::SimplifyAngle(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, float ___angle0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	float V_2 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___angle0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_SimplifyAngle_m9E733C1230298DAC8B121542D5A8CE876D1030D5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2437));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2438));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2439));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2440));
		goto IL_000e;
	}

IL_0003:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2441));
		// angle -= 2 * Mathf.PI;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2442));
		float L_0 = ___angle0;
		___angle0 = ((float)il2cpp_codegen_subtract((float)L_0, (float)(6.28318548f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2443));
	}

IL_000e:
	{
		// while (angle > Mathf.PI)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2444));
		float L_1 = ___angle0;
		V_0 = (bool)((((float)L_1) > ((float)(3.14159274f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2445));
		bool L_2 = V_0;
		if (L_2)
		{
			goto IL_0003;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2446));
		goto IL_0027;
	}

IL_001c:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2447));
		// angle += 2 * Mathf.PI;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2448));
		float L_3 = ___angle0;
		___angle0 = ((float)il2cpp_codegen_add((float)L_3, (float)(6.28318548f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2449));
	}

IL_0027:
	{
		// while (angle < -Mathf.PI)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2450));
		float L_4 = ___angle0;
		V_1 = (bool)((((float)L_4) < ((float)(-3.14159274f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2451));
		bool L_5 = V_1;
		if (L_5)
		{
			goto IL_001c;
		}
	}
	{
		// return angle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2452));
		float L_6 = ___angle0;
		V_2 = L_6;
		goto IL_0037;
	}

IL_0037:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2453));
		float L_7 = V_2;
		return L_7;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::AngularClamp(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refPosition0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___refRotation1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___currentPosition2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refForward3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	float V_1 = 0.0f;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_2;
	memset((&V_2), 0, sizeof(V_2));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_4;
	memset((&V_4), 0, sizeof(V_4));
	bool V_5 = false;
	bool V_6 = false;
	bool V_7 = false;
	bool V_8 = false;
	float V_9 = 0.0f;
	float V_10 = 0.0f;
	float V_11 = 0.0f;
	int32_t V_12 = 0;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_13;
	memset((&V_13), 0, sizeof(V_13));
	bool V_14 = false;
	bool V_15 = false;
	int32_t V_16 = 0;
	float V_17 = 0.0f;
	int32_t V_18 = 0;
	float V_19 = 0.0f;
	float V_20 = 0.0f;
	float V_21 = 0.0f;
	bool V_22 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_23;
	memset((&V_23), 0, sizeof(V_23));
	bool V_24 = false;
	bool V_25 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___refPosition0), (&___refRotation1), (&___currentPosition2), (&___refForward3));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5), (&V_9), (&V_10), (&V_11), (&V_13), (&V_17), (&V_18), (&V_19), (&V_20), (&V_21), (&V_23));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_AngularClamp_m8C7F5449B59D3045577734A10F124C019D2A2A12_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2454));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2455));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2456));
		// Vector3 toTarget = currentPosition - refPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2457));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___currentPosition2;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___refPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2537));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2537));
		V_0 = L_2;
		// float currentDistance = toTarget.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2458));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2538));
		float L_3 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2538));
		V_1 = L_3;
		// if (currentDistance <= 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2459));
		float L_4 = V_1;
		V_6 = (bool)((((int32_t)((!(((float)L_4) <= ((float)(0.0f))))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2460));
		bool L_5 = V_6;
		if (!L_5)
		{
			goto IL_002b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2461));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2462));
		V_7 = (bool)0;
		goto IL_02a0;
	}

IL_002b:
	{
		// toTarget.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2463));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2539));
		Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2539));
		// Quaternion rotation = Quaternion.LookRotation(toTarget, Vector3.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2464));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2540));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2540));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2541));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_8 = Quaternion_LookRotation_m7BED8FBB457FF073F183AC7962264E5110794672(L_6, L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2541));
		V_2 = L_8;
		// Vector3 currentRefForward = refRotation * Vector3.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2465));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_9 = ___refRotation1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2542));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2542));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2543));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_9, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2543));
		V_3 = L_11;
		// Vector3 refRight = refRotation * Vector3.right;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2466));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_12 = ___refRotation1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2544));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_13 = Vector3_get_right_m6DD9559CA0C75BBA42D9140021C4C2A9AAA9B3F5(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2544));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2545));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_12, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2545));
		V_4 = L_14;
		// bool angularClamped = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2467));
		V_5 = (bool)0;
		// if (IgnoreReferencePitchAndRoll)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2468));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2546));
		bool L_15 = Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2546));
		V_8 = L_15;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2469));
		bool L_16 = V_8;
		if (!L_16)
		{
			goto IL_008a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2470));
		// float angle = AngleBetweenOnPlane(toTarget, currentRefForward, refRight);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2471));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = V_3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2547));
		float L_20 = Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389(__this, L_17, L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2547));
		V_9 = L_20;
		// rotation = Quaternion.AngleAxis(angle, refRight) * rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2472));
		float L_21 = V_9;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2548));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_23 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(L_21, L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2548));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_24 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2549));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_25 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_23, L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2549));
		V_2 = L_25;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2473));
		goto IL_0144;
	}

IL_008a:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2474));
		// float angle = -AngleBetweenOnPlane(toTarget, currentRefForward, refRight);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2475));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = V_3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_28 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2550));
		float L_29 = Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389(__this, L_26, L_27, L_28, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2550));
		V_10 = ((-L_29));
		// switch (angularClampMode)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2476));
		int32_t L_30 = __this->get_angularClampMode_30();
		V_12 = L_30;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2477));
		int32_t L_31 = V_12;
		if ((!(((uint32_t)L_31) > ((uint32_t)1))))
		{
			goto IL_00b0;
		}
	}
	{
		goto IL_00a7;
	}

IL_00a7:
	{
		int32_t L_32 = V_12;
		if ((!(((uint32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_32, (int32_t)2))) > ((uint32_t)1))))
		{
			goto IL_00c2;
		}
	}
	{
		goto IL_00b0;
	}

IL_00b0:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2478));
		// minMaxAngle = MaxViewVerticalDegrees * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2479));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2551));
		float L_33 = Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2551));
		V_11 = ((float)il2cpp_codegen_multiply((float)L_33, (float)(0.5f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2480));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2481));
		goto IL_00f7;
	}

IL_00c2:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2482));
		// Vector3 top = refRotation * new Vector3(0.0f, boundsExtents.y, currentDistance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2483));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_34 = ___refRotation1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_35 = __this->get_address_of_boundsExtents_35();
		float L_36 = L_35->get_y_3();
		float L_37 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2552));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_38;
		memset((&L_38), 0, sizeof(L_38));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_38), (0.0f), L_36, L_37, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2552));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2553));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_39 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_34, L_38, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2553));
		V_13 = L_39;
		// minMaxAngle = AngleBetweenOnPlane(top, currentRefForward, refRight) * 2.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2484));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_40 = V_13;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = V_3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_42 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2554));
		float L_43 = Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389(__this, L_40, L_41, L_42, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2554));
		V_11 = ((float)il2cpp_codegen_multiply((float)L_43, (float)(2.0f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2485));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2486));
		goto IL_00f7;
	}

IL_00f7:
	{
		// if (angle < -minMaxAngle)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2487));
		float L_44 = V_10;
		float L_45 = V_11;
		V_14 = (bool)((((float)L_44) < ((float)((-L_45))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2488));
		bool L_46 = V_14;
		if (!L_46)
		{
			goto IL_011f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2489));
		// rotation = Quaternion.AngleAxis(-minMaxAngle - angle, refRight) * rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2490));
		float L_47 = V_11;
		float L_48 = V_10;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_49 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2555));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_50 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(((float)il2cpp_codegen_subtract((float)((-L_47)), (float)L_48)), L_49, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2555));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_51 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2556));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_52 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_50, L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2556));
		V_2 = L_52;
		// angularClamped = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2491));
		V_5 = (bool)1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2492));
		goto IL_0143;
	}

IL_011f:
	{
		// else if (angle > minMaxAngle)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2493));
		float L_53 = V_10;
		float L_54 = V_11;
		V_15 = (bool)((((float)L_53) > ((float)L_54))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2494));
		bool L_55 = V_15;
		if (!L_55)
		{
			goto IL_0143;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2495));
		// rotation = Quaternion.AngleAxis(minMaxAngle - angle, refRight) * rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2496));
		float L_56 = V_11;
		float L_57 = V_10;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_58 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2557));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_59 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(((float)il2cpp_codegen_subtract((float)L_56, (float)L_57)), L_58, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2557));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_60 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2558));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_61 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_59, L_60, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2558));
		V_2 = L_61;
		// angularClamped = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2497));
		V_5 = (bool)1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2498));
	}

IL_0143:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2499));
	}

IL_0144:
	{
		// switch (angularClampMode)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2500));
		int32_t L_62 = __this->get_angularClampMode_30();
		V_16 = L_62;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2501));
		int32_t L_63 = V_16;
		switch (L_63)
		{
			case 0:
			{
				goto IL_01ca;
			}
			case 1:
			{
				goto IL_0168;
			}
			case 2:
			{
				goto IL_01ca;
			}
			case 3:
			{
				goto IL_01ca;
			}
		}
	}
	{
		goto IL_0288;
	}

IL_0168:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2502));
		// float stepAngle = 360f / tetherAngleSteps;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2503));
		int32_t L_64 = __this->get_tetherAngleSteps_31();
		V_17 = ((float)((float)(360.0f)/(float)(((float)((float)L_64)))));
		// int numberOfSteps = Mathf.RoundToInt(SolverHandler.TransformTarget.transform.eulerAngles.y / stepAngle);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2504));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_65 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2559));
		NullCheck(L_65);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_66 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_65, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2559));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2560));
		NullCheck(L_66);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_67 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_66, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2560));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2561));
		NullCheck(L_67);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_68 = Transform_get_eulerAngles_mF2D798FA8B18F7A1A0C4A2198329ADBAF07E37CA(L_67, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2561));
		float L_69 = L_68.get_y_3();
		float L_70 = V_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2562));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_71 = Mathf_RoundToInt_m0EAD8BD38FCB72FA1D8A04E96337C820EC83F041(((float)((float)L_69/(float)L_70)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2562));
		V_18 = L_71;
		// float newAngle = stepAngle * numberOfSteps;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2505));
		float L_72 = V_17;
		int32_t L_73 = V_18;
		V_19 = ((float)il2cpp_codegen_multiply((float)L_72, (float)(((float)((float)L_73)))));
		// rotation = Quaternion.Euler(rotation.eulerAngles.x, newAngle, rotation.eulerAngles.z);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2506));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2563));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_74 = Quaternion_get_eulerAngles_mF8ABA8EB77CD682017E92F0F457374E54BC943F9((Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2563));
		float L_75 = L_74.get_x_2();
		float L_76 = V_19;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2564));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_77 = Quaternion_get_eulerAngles_mF8ABA8EB77CD682017E92F0F457374E54BC943F9((Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2564));
		float L_78 = L_77.get_z_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2565));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_79 = Quaternion_Euler_m537DD6CEAE0AD4274D8A84414C24C30730427D05(L_75, L_76, L_78, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2565));
		V_2 = L_79;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2507));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2508));
		goto IL_0288;
	}

IL_01ca:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2509));
		// float angle = AngleBetweenVectorAndPlane(toTarget, refRight);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2510));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_80 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_81 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2566));
		float L_82 = Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1(__this, L_80, L_81, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2566));
		V_20 = L_82;
		// if (angularClampMode == AngularClampType.ViewDegrees)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2511));
		int32_t L_83 = __this->get_angularClampMode_30();
		V_22 = (bool)((((int32_t)L_83) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2512));
		bool L_84 = V_22;
		if (!L_84)
		{
			goto IL_01f7;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2513));
		// minMaxAngle = MaxViewHorizontalDegrees * 0.5f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2514));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2567));
		float L_85 = Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2567));
		V_21 = ((float)il2cpp_codegen_multiply((float)L_85, (float)(0.5f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2515));
		goto IL_0233;
	}

IL_01f7:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2516));
		// Vector3 side = refRotation * new Vector3(boundsExtents.x, 0.0f, boundsExtents.z);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2517));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_86 = ___refRotation1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_87 = __this->get_address_of_boundsExtents_35();
		float L_88 = L_87->get_x_2();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_89 = __this->get_address_of_boundsExtents_35();
		float L_90 = L_89->get_z_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2568));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_91;
		memset((&L_91), 0, sizeof(L_91));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_91), L_88, (0.0f), L_90, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2568));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2569));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_92 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_86, L_91, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2569));
		V_23 = L_92;
		// minMaxAngle = AngleBetweenVectorAndPlane(side, refRight) * 2.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2518));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_93 = V_23;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_94 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2570));
		float L_95 = Follow_AngleBetweenVectorAndPlane_mC41F8567EC652CD081D388D92E5DDA1EFBED4BB1(__this, L_93, L_94, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2570));
		V_21 = ((float)il2cpp_codegen_multiply((float)L_95, (float)(2.0f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2519));
	}

IL_0233:
	{
		// if (angle < -minMaxAngle)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2520));
		float L_96 = V_20;
		float L_97 = V_21;
		V_24 = (bool)((((float)L_96) < ((float)((-L_97))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2521));
		bool L_98 = V_24;
		if (!L_98)
		{
			goto IL_025e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2522));
		// rotation = Quaternion.AngleAxis(-minMaxAngle - angle, Vector3.up) * rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2523));
		float L_99 = V_21;
		float L_100 = V_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2571));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_101 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2571));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2572));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_102 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(((float)il2cpp_codegen_subtract((float)((-L_99)), (float)L_100)), L_101, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2572));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_103 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2573));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_104 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_102, L_103, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2573));
		V_2 = L_104;
		// angularClamped = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2524));
		V_5 = (bool)1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2525));
		goto IL_0285;
	}

IL_025e:
	{
		// else if (angle > minMaxAngle)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2526));
		float L_105 = V_20;
		float L_106 = V_21;
		V_25 = (bool)((((float)L_105) > ((float)L_106))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2527));
		bool L_107 = V_25;
		if (!L_107)
		{
			goto IL_0285;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2528));
		// rotation = Quaternion.AngleAxis(minMaxAngle - angle, Vector3.up) * rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2529));
		float L_108 = V_21;
		float L_109 = V_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2574));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_110 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2574));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2575));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_111 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(((float)il2cpp_codegen_subtract((float)L_108, (float)L_109)), L_110, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2575));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_112 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2576));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_113 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_111, L_112, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2576));
		V_2 = L_113;
		// angularClamped = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2530));
		V_5 = (bool)1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2531));
	}

IL_0285:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2532));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2533));
		goto IL_0288;
	}

IL_0288:
	{
		// refForward = rotation * Vector3.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2534));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_114 = ___refForward3;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_115 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2577));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_116 = Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2577));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2578));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_117 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_115, L_116, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2578));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_114 = L_117;
		// return angularClamped;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2535));
		bool L_118 = V_5;
		V_7 = L_118;
		goto IL_02a0;
	}

IL_02a0:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2536));
		bool L_119 = V_7;
		return L_119;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::DistanceClamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___currentPosition0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refPosition1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___refForward2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___clampedPosition3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	float V_1 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	bool V_3 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_4;
	memset((&V_4), 0, sizeof(V_4));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_5;
	memset((&V_5), 0, sizeof(V_5));
	float V_6 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_7;
	memset((&V_7), 0, sizeof(V_7));
	float V_8 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_9;
	memset((&V_9), 0, sizeof(V_9));
	float V_10 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_11;
	memset((&V_11), 0, sizeof(V_11));
	float V_12 = 0.0f;
	bool V_13 = false;
	bool V_14 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___currentPosition0), (&___refPosition1), (&___refForward2), (&___clampedPosition3));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_4), (&V_5), (&V_6), (&V_7), (&V_8), (&V_9), (&V_10), (&V_11), (&V_12));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_DistanceClamp_m241029DC39C185663EF820CB4AD0831A03350C77_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2579));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2580));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2581));
		// float currentDistance = Vector3.Distance(currentPosition, refPosition);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2582));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___currentPosition0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___refPosition1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2619));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_2 = Vector3_Distance_mE316E10B9B319A5C2A29F86E028740FD528149E7(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2619));
		V_1 = L_2;
		// Vector3 direction = refForward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2583));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = ___refForward2;
		V_2 = L_3;
		// if (IgnoreReferencePitchAndRoll && PitchOffset != 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2584));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2620));
		bool L_4 = Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2620));
		if (!L_4)
		{
			goto IL_0025;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2621));
		float L_5 = Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2621));
		G_B3_0 = ((((int32_t)((((float)L_5) == ((float)(0.0f)))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0026;
	}

IL_0025:
	{
		G_B3_0 = 0;
	}

IL_0026:
	{
		V_3 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2585));
		bool L_6 = V_3;
		if (!L_6)
		{
			goto IL_010f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2586));
		// Vector3 directionXZ = refForward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2587));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = ___refForward2;
		V_4 = L_7;
		// directionXZ.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2588));
		(&V_4)->set_y_3((0.0f));
		// directionXZ.Normalize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2589));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2622));
		Vector3_Normalize_m174460238EC6322B9095A378AA8624B1DD9000F3((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_4), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2622));
		// Vector3 refToElementXZ = currentPosition - refPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2590));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = ___currentPosition0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = ___refPosition1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2623));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_8, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2623));
		V_5 = L_10;
		// refToElementXZ.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2591));
		(&V_5)->set_y_3((0.0f));
		// float desiredDistanceXZ = refToElementXZ.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2592));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2624));
		float L_11 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2624));
		V_6 = L_11;
		// Vector3 minDistanceXZVector = refForward * MinDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2593));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = ___refForward2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2625));
		float L_13 = Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2625));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2626));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_12, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2626));
		V_7 = L_14;
		// minDistanceXZVector.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2594));
		(&V_7)->set_y_3((0.0f));
		// float minDistanceXZ = minDistanceXZVector.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2595));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2627));
		float L_15 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_7), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2627));
		V_8 = L_15;
		// Vector3 maxDistanceXZVector = refForward * MaxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2596));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = ___refForward2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2628));
		float L_17 = Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2628));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2629));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_16, L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2629));
		V_9 = L_18;
		// maxDistanceXZVector.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2597));
		(&V_9)->set_y_3((0.0f));
		// float maxDistanceXZ = maxDistanceXZVector.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2598));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2630));
		float L_19 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_9), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2630));
		V_10 = L_19;
		// desiredDistanceXZ = Mathf.Clamp(desiredDistanceXZ, minDistanceXZ, maxDistanceXZ);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2599));
		float L_20 = V_6;
		float L_21 = V_8;
		float L_22 = V_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2631));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_23 = Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507(L_20, L_21, L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2631));
		V_6 = L_23;
		// Vector3 desiredPosition = refPosition + directionXZ * desiredDistanceXZ;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2600));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_24 = ___refPosition1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25 = V_4;
		float L_26 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2632));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_25, L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2632));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2633));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_28 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_24, L_27, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2633));
		V_11 = L_28;
		// float desiredHeight = refPosition.y + refForward.y * MaxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2601));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = ___refPosition1;
		float L_30 = L_29.get_y_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = ___refForward2;
		float L_32 = L_31.get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2634));
		float L_33 = Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2634));
		V_12 = ((float)il2cpp_codegen_add((float)L_30, (float)((float)il2cpp_codegen_multiply((float)L_32, (float)L_33))));
		// desiredPosition.y = desiredHeight;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2602));
		float L_34 = V_12;
		(&V_11)->set_y_3(L_34);
		// direction = desiredPosition - refPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2603));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_35 = V_11;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_36 = ___refPosition1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2635));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_37 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_35, L_36, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2635));
		V_2 = L_37;
		// clampedDistance = direction.magnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2604));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2636));
		float L_38 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2636));
		V_0 = L_38;
		// direction /= clampedDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2605));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_39 = V_2;
		float L_40 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2637));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = Vector3_op_Division_mDF34F1CC445981B4D1137765BC6277419E561624(L_39, L_40, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2637));
		V_2 = L_41;
		// clampedDistance = Mathf.Max(MinDistance, clampedDistance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2606));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2638));
		float L_42 = Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2638));
		float L_43 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2639));
		float L_44 = Mathf_Max_m670AE0EC1B09ED1A56FF9606B0F954670319CB65(L_42, L_43, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2639));
		V_0 = L_44;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2607));
		goto IL_0124;
	}

IL_010f:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2608));
		// clampedDistance = Mathf.Clamp(currentDistance, MinDistance, MaxDistance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2609));
		float L_45 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2640));
		float L_46 = Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2640));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2641));
		float L_47 = Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2641));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2642));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_48 = Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507(L_45, L_46, L_47, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2642));
		V_0 = L_48;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2610));
	}

IL_0124:
	{
		// clampedPosition = refPosition + direction * clampedDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2611));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_49 = ___clampedPosition3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_50 = ___refPosition1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_51 = V_2;
		float L_52 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2643));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_51, L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2643));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2644));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_54 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_50, L_53, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2644));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_49 = L_54;
		// if (VerticalMaxDistance > 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2612));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2645));
		float L_55 = Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2645));
		V_13 = (bool)((((float)L_55) > ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2613));
		bool L_56 = V_13;
		if (!L_56)
		{
			goto IL_0184;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2614));
		// clampedPosition.y = Mathf.Clamp(clampedPosition.y, ReferencePosition.y - VerticalMaxDistance, ReferencePosition.y + VerticalMaxDistance);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2615));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_57 = ___clampedPosition3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_58 = ___clampedPosition3;
		float L_59 = L_58->get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2646));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_60 = Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2646));
		float L_61 = L_60.get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2647));
		float L_62 = Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2647));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2648));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_63 = Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2648));
		float L_64 = L_63.get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2649));
		float L_65 = Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2649));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2650));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_66 = Mathf_Clamp_m033DD894F89E6DCCDAFC580091053059C86A4507(L_59, ((float)il2cpp_codegen_subtract((float)L_61, (float)L_62)), ((float)il2cpp_codegen_add((float)L_64, (float)L_65)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2650));
		L_57->set_y_3(L_66);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2616));
	}

IL_0184:
	{
		// return Vector3EqualEpsilon(clampedPosition, currentPosition, 0.0001f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2617));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_67 = ___clampedPosition3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_68 = (*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_67);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_69 = ___currentPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2651));
		bool L_70 = Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1(__this, L_68, L_69, (0.0001f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2651));
		V_14 = L_70;
		goto IL_019b;
	}

IL_019b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2618));
		bool L_71 = V_14;
		return L_71;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::ComputeOrientation(UnityEngine.Vector3,System.Boolean,UnityEngine.Quaternion&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___goalPosition0, bool ___wasClamped1, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___orientation2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_2;
	memset((&V_2), 0, sizeof(V_2));
	float V_3 = 0.0f;
	bool V_4 = false;
	bool V_5 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_6;
	memset((&V_6), 0, sizeof(V_6));
	bool V_7 = false;
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	int32_t V_12 = 0;
	float V_13 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___goalPosition0), (&___wasClamped1), (&___orientation2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_2), (&V_3), (&V_6), (&V_13));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_ComputeOrientation_m1A426F82F3A7DE42A739902FC0D387B2C87000D2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2652));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2653));
	int32_t G_B3_0 = 0;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B11_0;
	memset((&G_B11_0), 0, sizeof(G_B11_0));
	int32_t G_B23_0 = 0;
	float G_B30_0 = 0.0f;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B35_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B34_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B36_0;
	memset((&G_B36_0), 0, sizeof(G_B36_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B36_1 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B39_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B38_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B40_0;
	memset((&G_B40_0), 0, sizeof(G_B40_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B40_1 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B43_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B42_0 = NULL;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  G_B44_0;
	memset((&G_B44_0), 0, sizeof(G_B44_0));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * G_B44_1 = NULL;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2654));
		// SolverOrientationType defaultOrientationType = OrientationType;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2655));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2716));
		int32_t L_0 = Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2716));
		V_0 = L_0;
		// if (!wasClamped && reorientWhenOutsideParameters)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2656));
		bool L_1 = ___wasClamped1;
		if (L_1)
		{
			goto IL_0013;
		}
	}
	{
		bool L_2 = __this->get_reorientWhenOutsideParameters_23();
		G_B3_0 = ((int32_t)(L_2));
		goto IL_0014;
	}

IL_0013:
	{
		G_B3_0 = 0;
	}

IL_0014:
	{
		V_1 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2657));
		bool L_3 = V_1;
		if (!L_3)
		{
			goto IL_0065;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2658));
		// Vector3 nodeToCamera = goalPosition - ReferencePosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2659));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = ___goalPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2717));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2717));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2718));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_4, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2718));
		V_2 = L_6;
		// float angle = Mathf.Abs(AngleBetweenOnPlane(transform.forward, nodeToCamera, Vector3.up));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2660));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2719));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2719));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2720));
		NullCheck(L_7);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2720));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2721));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2721));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2722));
		float L_11 = Follow_AngleBetweenOnPlane_mDCAD9848C2470F9A85DF395621F7195B2C674389(__this, L_8, L_9, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2722));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2723));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_12 = fabsf(L_11);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2723));
		V_3 = L_12;
		// if (angle < OrientToControllerDeadzoneDegrees)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2661));
		float L_13 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2724));
		float L_14 = Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2724));
		V_4 = (bool)((((float)L_13) < ((float)L_14))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2662));
		bool L_15 = V_4;
		if (!L_15)
		{
			goto IL_0064;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2663));
		// orientation = PreviousGoalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2664));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_16 = ___orientation2;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_17 = __this->get_PreviousGoalRotation_33();
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_16 = L_17;
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2665));
		goto IL_02ae;
	}

IL_0064:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2666));
	}

IL_0065:
	{
		// if (FaceUserDefinedTargetTransform)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2667));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2725));
		bool L_18 = Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2725));
		V_5 = L_18;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2668));
		bool L_19 = V_5;
		if (!L_19)
		{
			goto IL_013d;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2669));
		// Vector3 directionToTarget = TargetToFace != null ? goalPosition - TargetToFace.position : Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2670));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2726));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_20 = Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2726));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2727));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_21 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_20, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2727));
		if (L_21)
		{
			goto IL_008a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2728));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2728));
		G_B11_0 = L_22;
		goto IL_009b;
	}

IL_008a:
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_23 = ___goalPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2729));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_24 = Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2729));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2730));
		NullCheck(L_24);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2730));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2731));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_23, L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2731));
		G_B11_0 = L_26;
	}

IL_009b:
	{
		V_6 = G_B11_0;
		// if (!PivotAxis.IsMaskSet(AxisFlags.XAxis))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2671));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2732));
		int32_t L_27 = Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2732));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2733));
		bool L_28 = AxisFlagsExtensions_IsMaskSet_m8EBA7A31AEC86DA4FD25AD8F559E467A1C48A66D(L_27, 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2733));
		V_7 = (bool)((((int32_t)L_28) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2672));
		bool L_29 = V_7;
		if (!L_29)
		{
			goto IL_00c0;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2673));
		// directionToTarget.x = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2674));
		(&V_6)->set_x_2((0.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2675));
	}

IL_00c0:
	{
		// if (!PivotAxis.IsMaskSet(AxisFlags.YAxis))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2676));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2734));
		int32_t L_30 = Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2734));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2735));
		bool L_31 = AxisFlagsExtensions_IsMaskSet_m8EBA7A31AEC86DA4FD25AD8F559E467A1C48A66D(L_30, 2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2735));
		V_8 = (bool)((((int32_t)L_31) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2677));
		bool L_32 = V_8;
		if (!L_32)
		{
			goto IL_00e3;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2678));
		// directionToTarget.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2679));
		(&V_6)->set_y_3((0.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2680));
	}

IL_00e3:
	{
		// if (!PivotAxis.IsMaskSet(AxisFlags.ZAxis))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2681));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2736));
		int32_t L_33 = Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2736));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2737));
		bool L_34 = AxisFlagsExtensions_IsMaskSet_m8EBA7A31AEC86DA4FD25AD8F559E467A1C48A66D(L_33, 4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2737));
		V_9 = (bool)((((int32_t)L_34) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2682));
		bool L_35 = V_9;
		if (!L_35)
		{
			goto IL_0106;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2683));
		// directionToTarget.z = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2684));
		(&V_6)->set_z_4((0.0f));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2685));
	}

IL_0106:
	{
		// if (directionToTarget.sqrMagnitude == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2686));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2738));
		float L_36 = Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2738));
		V_10 = (bool)((((float)L_36) == ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2687));
		bool L_37 = V_10;
		if (!L_37)
		{
			goto IL_012b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2688));
		// orientation = Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2689));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_38 = ___orientation2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2739));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_39 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2739));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_38 = L_39;
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2690));
		goto IL_02ae;
	}

IL_012b:
	{
		// orientation = Quaternion.LookRotation(directionToTarget);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2691));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_40 = ___orientation2;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2740));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_42 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_41, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2740));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_40 = L_42;
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2692));
		goto IL_02ae;
	}

IL_013d:
	{
		// if (wasClamped && FaceTrackedObjectWhileClamped)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2693));
		bool L_43 = ___wasClamped1;
		if (!L_43)
		{
			goto IL_0148;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2741));
		bool L_44 = Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2741));
		G_B23_0 = ((int32_t)(L_44));
		goto IL_0149;
	}

IL_0148:
	{
		G_B23_0 = 0;
	}

IL_0149:
	{
		V_11 = (bool)G_B23_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2694));
		bool L_45 = V_11;
		if (!L_45)
		{
			goto IL_0153;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2695));
		// defaultOrientationType = SolverOrientationType.FaceTrackedObject;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2696));
		V_0 = 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2697));
	}

IL_0153:
	{
		// switch (defaultOrientationType)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2698));
		int32_t L_46 = V_0;
		V_12 = L_46;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2699));
		int32_t L_47 = V_12;
		switch (L_47)
		{
			case 0:
			{
				goto IL_0269;
			}
			case 1:
			{
				goto IL_01f7;
			}
			case 2:
			{
				goto IL_017a;
			}
			case 3:
			{
				goto IL_01c7;
			}
			case 4:
			{
				goto IL_022d;
			}
			case 5:
			{
				goto IL_01dd;
			}
		}
	}
	{
		goto IL_0291;
	}

IL_017a:
	{
		// float targetYRotation = SolverHandler.TransformTarget != null ? SolverHandler.TransformTarget.eulerAngles.y : 0.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2700));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_48 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2742));
		NullCheck(L_48);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_49 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_48, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2742));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2743));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_50 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_49, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2743));
		if (L_50)
		{
			goto IL_0194;
		}
	}
	{
		G_B30_0 = (0.0f);
		goto IL_01a9;
	}

IL_0194:
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_51 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2744));
		NullCheck(L_51);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_52 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2744));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2745));
		NullCheck(L_52);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = Transform_get_eulerAngles_mF2D798FA8B18F7A1A0C4A2198329ADBAF07E37CA(L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2745));
		float L_54 = L_53.get_y_3();
		G_B30_0 = L_54;
	}

IL_01a9:
	{
		V_13 = G_B30_0;
		// orientation = Quaternion.Euler(0f, targetYRotation, 0f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2701));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_55 = ___orientation2;
		float L_56 = V_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2746));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_57 = Quaternion_Euler_m537DD6CEAE0AD4274D8A84414C24C30730427D05((0.0f), L_56, (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2746));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_55 = L_57;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2702));
		goto IL_02ae;
	}

IL_01c7:
	{
		// orientation = transform.rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2703));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_58 = ___orientation2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2747));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_59 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2747));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2748));
		NullCheck(L_59);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_60 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_59, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2748));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_58 = L_60;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2704));
		goto IL_02ae;
	}

IL_01dd:
	{
		// orientation = CameraCache.Main.transform.rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2705));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_61 = ___orientation2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2749));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_62 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2749));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2750));
		NullCheck(L_62);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_63 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_62, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2750));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2751));
		NullCheck(L_63);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_64 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_63, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2751));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_61 = L_64;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2706));
		goto IL_02ae;
	}

IL_01f7:
	{
		// orientation = SolverHandler.TransformTarget != null ? Quaternion.LookRotation(goalPosition - ReferencePosition) : Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2707));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_65 = ___orientation2;
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_66 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2752));
		NullCheck(L_66);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_67 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_66, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2752));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2753));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_68 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_67, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2753));
		G_B34_0 = L_65;
		if (L_68)
		{
			G_B35_0 = L_65;
			goto IL_0212;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2754));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_69 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2754));
		G_B36_0 = L_69;
		G_B36_1 = G_B34_0;
		goto IL_0223;
	}

IL_0212:
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_70 = ___goalPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2755));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_71 = Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2755));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2756));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_72 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_70, L_71, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2756));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2757));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_73 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_72, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2757));
		G_B36_0 = L_73;
		G_B36_1 = G_B35_0;
	}

IL_0223:
	{
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)G_B36_1 = G_B36_0;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2708));
		goto IL_02ae;
	}

IL_022d:
	{
		// orientation = SolverHandler.TransformTarget != null ? Quaternion.LookRotation(goalPosition - CameraCache.Main.transform.position) : Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2709));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_74 = ___orientation2;
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_75 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2758));
		NullCheck(L_75);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_76 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_75, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2758));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2759));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_77 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_76, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2759));
		G_B38_0 = L_74;
		if (L_77)
		{
			G_B39_0 = L_74;
			goto IL_0248;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2760));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_78 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2760));
		G_B40_0 = L_78;
		G_B40_1 = G_B38_0;
		goto IL_0262;
	}

IL_0248:
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_79 = ___goalPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2761));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_80 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2761));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2762));
		NullCheck(L_80);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_81 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_80, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2762));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2763));
		NullCheck(L_81);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_82 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_81, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2763));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2764));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_83 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_79, L_82, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2764));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2765));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_84 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_83, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2765));
		G_B40_0 = L_84;
		G_B40_1 = G_B39_0;
	}

IL_0262:
	{
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)G_B40_1 = G_B40_0;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2710));
		goto IL_02ae;
	}

IL_0269:
	{
		// orientation = SolverHandler.TransformTarget != null ? ReferenceRotation : Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2711));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_85 = ___orientation2;
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_86 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2766));
		NullCheck(L_86);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_87 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_86, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2766));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2767));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_88 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_87, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2767));
		G_B42_0 = L_85;
		if (L_88)
		{
			G_B43_0 = L_85;
			goto IL_0284;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2768));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_89 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2768));
		G_B44_0 = L_89;
		G_B44_1 = G_B42_0;
		goto IL_028a;
	}

IL_0284:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2769));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_90 = Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2769));
		G_B44_0 = L_90;
		G_B44_1 = G_B43_0;
	}

IL_028a:
	{
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)G_B44_1 = G_B44_0;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2712));
		goto IL_02ae;
	}

IL_0291:
	{
		// Debug.LogError($"Invalid OrientationType for Orbital Solver on {gameObject.name}");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2713));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2770));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_91 = Component_get_gameObject_m0B0570BA8DDD3CD78A9DB568EA18D7317686603C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2770));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2771));
		NullCheck(L_91);
		String_t* L_92 = Object_get_name_mA2D400141CB3C991C87A2556429781DE961A83CE(L_91, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2771));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2772));
		String_t* L_93 = String_Concat_mB78D0094592718DA6D5DB6C712A9C225631666BE(_stringLiteralF7E8D8FA41CB0C1CCEB687AB4AE503CE4773E4AE, L_92, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2772));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2773));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_93, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2773));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2714));
		goto IL_02ae;
	}

IL_02ae:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2715));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::GetReferenceInfo(UnityEngine.Vector3&,UnityEngine.Quaternion&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refPosition0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___refRotation1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___refForward2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	bool V_2 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___refPosition0), (&___refRotation1), (&___refForward2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1), (&V_3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_GetReferenceInfo_m0B4A372BA8BD6BD224663CA4F3F169A218F7972A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2774));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2775));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2776));
		// refPosition = ReferencePosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2777));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_0 = ___refPosition0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2795));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = Follow_get_ReferencePosition_m6DA55686935C3505EAE320A36D99CBEA560D526C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2795));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_0 = L_1;
		// refRotation = ReferenceRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2778));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_2 = ___refRotation1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2796));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_3 = Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2796));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_2 = L_3;
		// if (IgnoreReferencePitchAndRoll)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2779));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2797));
		bool L_4 = Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2797));
		V_0 = L_4;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2780));
		bool L_5 = V_0;
		if (!L_5)
		{
			goto IL_0094;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2781));
		// Vector3 forward = ReferenceRotation * Vector3.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2782));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2798));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_6 = Follow_get_ReferenceRotation_m5240318A3FE5E667FE7EA53CB27980518C63B7BC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2798));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2799));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2799));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2800));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_6, L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2800));
		V_1 = L_8;
		// forward.y = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2783));
		(&V_1)->set_y_3((0.0f));
		// refRotation = Quaternion.LookRotation(forward);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2784));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_9 = ___refRotation1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2801));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_11 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2801));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_9 = L_11;
		// if (PitchOffset != 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2785));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2802));
		float L_12 = Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2802));
		V_2 = (bool)((((int32_t)((((float)L_12) == ((float)(0.0f)))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2786));
		bool L_13 = V_2;
		if (!L_13)
		{
			goto IL_0093;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2787));
		// Vector3 right = refRotation * Vector3.right;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2788));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_14 = ___refRotation1;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_15 = (*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_14);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2803));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = Vector3_get_right_m6DD9559CA0C75BBA42D9140021C4C2A9AAA9B3F5(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2803));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2804));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_15, L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2804));
		V_3 = L_17;
		// forward = Quaternion.AngleAxis(PitchOffset, right) * forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2789));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2805));
		float L_18 = Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2805));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2806));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_20 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2806));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_21 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2807));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_22 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_20, L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2807));
		V_1 = L_22;
		// refRotation = Quaternion.LookRotation(forward);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2790));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_23 = ___refRotation1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_24 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2808));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_25 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2808));
		*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_23 = L_25;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2791));
	}

IL_0093:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2792));
	}

IL_0094:
	{
		// refForward = refRotation * Vector3.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2793));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_26 = ___refForward2;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_27 = ___refRotation1;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_28 = (*(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_27);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2809));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = Vector3_get_forward_m3E2E192B3302130098738C308FA1EE1439449D0D(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2809));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2810));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_30 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_28, L_29, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2810));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_26 = L_30;
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2794));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::Vector3EqualEpsilon(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1 (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___x0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___y1, float ___eps2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	bool V_2 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___x0), (&___y1), (&___eps2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_Vector3EqualEpsilon_m440DECECCE66964423D802FC95772DD676DEAAC1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2811));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2812));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2813));
		// float sqrMagnitude = (x - y).sqrMagnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2814));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___x0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = ___y1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2817));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2817));
		V_1 = L_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2818));
		float L_3 = Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2818));
		V_0 = L_3;
		// return sqrMagnitude > eps;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2815));
		float L_4 = V_0;
		float L_5 = ___eps2;
		V_2 = (bool)((((float)L_4) > ((float)L_5))? 1 : 0);
		goto IL_0018;
	}

IL_0018:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2816));
		bool L_6 = V_2;
		return L_6;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::GetBounds(UnityEngine.GameObject,Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow/AngularClampType,UnityEngine.Bounds&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D (GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___target0, int32_t ___angularClampType1, Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * ___bounds2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___target0), (&___angularClampType1), (&___bounds2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_GetBounds_mDA2FD4740BBBA3C3B697E382BCB3AFF01D51401D_RuntimeMethod_var, NULL, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2819));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2820));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2821));
		// switch (angularClampType)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2822));
		int32_t L_0 = ___angularClampType1;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2823));
		int32_t L_1 = V_0;
		if ((((int32_t)L_1) == ((int32_t)2)))
		{
			goto IL_000f;
		}
	}
	{
		goto IL_0009;
	}

IL_0009:
	{
		int32_t L_2 = V_0;
		if ((((int32_t)L_2) == ((int32_t)3)))
		{
			goto IL_0020;
		}
	}
	{
		goto IL_0031;
	}

IL_000f:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2824));
		// return BoundsExtensions.GetRenderBounds(target, out bounds, 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2825));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_3 = ___target0;
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * L_4 = ___bounds2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2831));
		LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0  L_5 = LayerMask_op_Implicit_m3F256A7D96C66548F5B62C4621B9725301850300(0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2831));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2832));
		IL2CPP_RUNTIME_CLASS_INIT(BoundsExtensions_t65D5B81F0B4D8D20A4798B651AD4C93A9A761859_il2cpp_TypeInfo_var);
		bool L_6 = BoundsExtensions_GetRenderBounds_m1DB44BE8CF53329B304BEE24B058634EECB26F07(L_3, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)L_4, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2832));
		V_1 = L_6;
		goto IL_003c;
	}

IL_0020:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2826));
		// return BoundsExtensions.GetColliderBounds(target, out bounds, 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2827));
		GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * L_7 = ___target0;
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * L_8 = ___bounds2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2833));
		LayerMask_tBB9173D8B6939D476E67E849280AC9F4EC4D93B0  L_9 = LayerMask_op_Implicit_m3F256A7D96C66548F5B62C4621B9725301850300(0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2833));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2834));
		IL2CPP_RUNTIME_CLASS_INIT(BoundsExtensions_t65D5B81F0B4D8D20A4798B651AD4C93A9A761859_il2cpp_TypeInfo_var);
		bool L_10 = BoundsExtensions_GetColliderBounds_m717659BB944D983D6B2770988F2A57EDC9E9A74B(L_7, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)L_8, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2834));
		V_1 = L_10;
		goto IL_003c;
	}

IL_0031:
	{
		// bounds = new Bounds();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2828));
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 * L_11 = ___bounds2;
		il2cpp_codegen_initobj(L_11, sizeof(Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 ));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2829));
		V_1 = (bool)0;
		goto IL_003c;
	}

IL_003c:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2830));
		bool L_12 = V_1;
		return L_12;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.Follow::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Follow__ctor_m48520A35B6DC82F5AF4D50A63A5DE36A5F3CD52C (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow__ctor_m48520A35B6DC82F5AF4D50A63A5DE36A5F3CD52C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow__ctor_m48520A35B6DC82F5AF4D50A63A5DE36A5F3CD52C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2835));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2836));
	{
		// private SolverOrientationType orientationType = SolverOrientationType.FaceTrackedObject;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2837));
		__this->set_orientationType_13(1);
		// private bool faceTrackedObjectWhileClamped = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2838));
		__this->set_faceTrackedObjectWhileClamped_14((bool)1);
		// private bool faceUserDefinedTargetTransform = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2839));
		__this->set_faceUserDefinedTargetTransform_15((bool)0);
		// private Transform targetToFace = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2840));
		__this->set_targetToFace_16((Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA *)NULL);
		// private AxisFlags pivotAxis = AxisFlags.XAxis | AxisFlags.YAxis | AxisFlags.ZAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2841));
		__this->set_pivotAxis_17(7);
		// private float minDistance = 0.3f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2842));
		__this->set_minDistance_18((0.3f));
		// private float maxDistance = 0.9f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2843));
		__this->set_maxDistance_19((0.9f));
		// private float defaultDistance = 0.7f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2844));
		__this->set_defaultDistance_20((0.7f));
		// private float maxViewHorizontalDegrees = 30f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2845));
		__this->set_maxViewHorizontalDegrees_21((30.0f));
		// private float maxViewVerticalDegrees = 20f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2846));
		__this->set_maxViewVerticalDegrees_22((20.0f));
		// private bool reorientWhenOutsideParameters = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2847));
		__this->set_reorientWhenOutsideParameters_23((bool)1);
		// private float orientToControllerDeadzoneDegrees = 60f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2848));
		__this->set_orientToControllerDeadzoneDegrees_24((60.0f));
		// private bool ignoreAngleClamp = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2849));
		__this->set_ignoreAngleClamp_25((bool)0);
		// private bool ignoreDistanceClamp = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2850));
		__this->set_ignoreDistanceClamp_26((bool)0);
		// private bool ignoreReferencePitchAndRoll = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2851));
		__this->set_ignoreReferencePitchAndRoll_27((bool)0);
		// public float pitchOffset = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2852));
		__this->set_pitchOffset_28((0.0f));
		// private float verticalMaxDistance = 0.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2853));
		__this->set_verticalMaxDistance_29((0.0f));
		// private AngularClampType angularClampMode = AngularClampType.ViewDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2854));
		__this->set_angularClampMode_30(0);
		// private int tetherAngleSteps = 6;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2855));
		__this->set_tetherAngleSteps_31(6);
		// private float boundsScaler = 1.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2856));
		__this->set_boundsScaler_32((1.0f));
		// private Quaternion PreviousGoalRotation = Quaternion.identity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2857));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2860));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_0 = Quaternion_get_identity_m548B37D80F2DEE60E41D1F09BF6889B557BE1A64(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2860));
		__this->set_PreviousGoalRotation_33(L_0);
		// private bool recenterNextUpdate = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2858));
		__this->set_recenterNextUpdate_34((bool)1);
		// private Vector3 boundsExtents = Vector3.one;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2859));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2861));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = Vector3_get_one_mA11B83037CB269C6076CBCF754E24C8F3ACEC2AB(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2861));
		__this->set_boundsExtents_35(L_1);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2862));
		Solver__ctor_m45C1467BE22F4DD1541D08434DD5A046F1099CAC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2862));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_SafeZone()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2863));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2864));
	{
		// get => safeZone;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2865));
		int32_t L_0 = __this->get_safeZone_14();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_SafeZone(Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_SafeZone_m1B35B60DDC6D4E96A68BB401230014186A12E9AD (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_SafeZone_m1B35B60DDC6D4E96A68BB401230014186A12E9AD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_SafeZone_m1B35B60DDC6D4E96A68BB401230014186A12E9AD_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2866));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2867));
	{
		// set => safeZone = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2868));
		int32_t L_0 = ___value0;
		__this->set_safeZone_14(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_SafeZoneBuffer()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraint_get_SafeZoneBuffer_mEE697AF5521AF89E75306B223C0E7E09DB95EDB1 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_SafeZoneBuffer_mEE697AF5521AF89E75306B223C0E7E09DB95EDB1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_SafeZoneBuffer_mEE697AF5521AF89E75306B223C0E7E09DB95EDB1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2869));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2870));
	{
		// get => safeZoneBuffer;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2871));
		float L_0 = __this->get_safeZoneBuffer_15();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_SafeZoneBuffer(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_SafeZoneBuffer_mD910F855D03632FD808B79D3F87B1338F267A3E6 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_SafeZoneBuffer_mD910F855D03632FD808B79D3F87B1338F267A3E6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_SafeZoneBuffer_mD910F855D03632FD808B79D3F87B1338F267A3E6_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2872));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2873));
	{
		// set => safeZoneBuffer = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2874));
		float L_0 = ___value0;
		__this->set_safeZoneBuffer_15(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_UpdateWhenOppositeHandNear()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_get_UpdateWhenOppositeHandNear_mE7336624369976088B9842E543ADAB54619BA6F0 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_UpdateWhenOppositeHandNear_mE7336624369976088B9842E543ADAB54619BA6F0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_UpdateWhenOppositeHandNear_mE7336624369976088B9842E543ADAB54619BA6F0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2875));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2876));
	{
		// get => updateWhenOppositeHandNear;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2877));
		bool L_0 = __this->get_updateWhenOppositeHandNear_16();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_UpdateWhenOppositeHandNear(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_UpdateWhenOppositeHandNear_mCACBF6D38FA6BDC3591FEF561043AC1D9C7CE02D (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_UpdateWhenOppositeHandNear_mCACBF6D38FA6BDC3591FEF561043AC1D9C7CE02D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_UpdateWhenOppositeHandNear_mCACBF6D38FA6BDC3591FEF561043AC1D9C7CE02D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2878));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2879));
	{
		// set => updateWhenOppositeHandNear = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2880));
		bool L_0 = ___value0;
		__this->set_updateWhenOppositeHandNear_16(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_HideHandCursorsOnActivate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_get_HideHandCursorsOnActivate_m1B8D06C354FD54E969E84ADCE9383CEEC2489BDB (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_HideHandCursorsOnActivate_m1B8D06C354FD54E969E84ADCE9383CEEC2489BDB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_HideHandCursorsOnActivate_m1B8D06C354FD54E969E84ADCE9383CEEC2489BDB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2881));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2882));
	{
		// get => hideHandCursorsOnActivate;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2883));
		bool L_0 = __this->get_hideHandCursorsOnActivate_17();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_HideHandCursorsOnActivate(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_HideHandCursorsOnActivate_mF060A193919F7362172CD1C83024753E0DF0ECA5 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_HideHandCursorsOnActivate_mF060A193919F7362172CD1C83024753E0DF0ECA5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_HideHandCursorsOnActivate_mF060A193919F7362172CD1C83024753E0DF0ECA5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2884));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2885));
	{
		// set => hideHandCursorsOnActivate = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2886));
		bool L_0 = ___value0;
		__this->set_hideHandCursorsOnActivate_17(L_0);
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_RotationBehavior()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t HandConstraint_get_RotationBehavior_mA91781668E0CC7D1BB859E9C106B7B60C337E4C0 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_RotationBehavior_mA91781668E0CC7D1BB859E9C106B7B60C337E4C0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_RotationBehavior_mA91781668E0CC7D1BB859E9C106B7B60C337E4C0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2887));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2888));
	{
		// get => rotationBehavior;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2889));
		int32_t L_0 = __this->get_rotationBehavior_18();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_RotationBehavior(Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverRotationBehavior)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2890));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2891));
	{
		// set => rotationBehavior = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2892));
		int32_t L_0 = ___value0;
		__this->set_rotationBehavior_18(L_0);
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OffsetBehavior()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2893));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2894));
	{
		// get => offsetBehavior;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2895));
		int32_t L_0 = __this->get_offsetBehavior_19();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OffsetBehavior(Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2896));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2897));
	{
		// set => offsetBehavior = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2898));
		int32_t L_0 = ___value0;
		__this->set_offsetBehavior_19(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_ForwardOffset()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2899));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2900));
	{
		// get => forwardOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2901));
		float L_0 = __this->get_forwardOffset_20();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_ForwardOffset(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_ForwardOffset_mDFDA56423946B50EFB22ADAB9B5FA31060B0B960 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_ForwardOffset_mDFDA56423946B50EFB22ADAB9B5FA31060B0B960_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_ForwardOffset_mDFDA56423946B50EFB22ADAB9B5FA31060B0B960_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2902));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2903));
	{
		// set => forwardOffset = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2904));
		float L_0 = ___value0;
		__this->set_forwardOffset_20(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_SafeZoneAngleOffset()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraint_get_SafeZoneAngleOffset_m4D330EB6A9AC074051B6BCDA7ECD19F16B6A99A5 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_SafeZoneAngleOffset_m4D330EB6A9AC074051B6BCDA7ECD19F16B6A99A5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_SafeZoneAngleOffset_m4D330EB6A9AC074051B6BCDA7ECD19F16B6A99A5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2905));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2906));
	{
		// get => safeZoneAngleOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2907));
		float L_0 = __this->get_safeZoneAngleOffset_21();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_SafeZoneAngleOffset(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_SafeZoneAngleOffset_mFF3C8BDB77D2E260952557C5C4EC944AE84C8B06 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_SafeZoneAngleOffset_mFF3C8BDB77D2E260952557C5C4EC944AE84C8B06_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_SafeZoneAngleOffset_mFF3C8BDB77D2E260952557C5C4EC944AE84C8B06_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2908));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2909));
	{
		// set => safeZoneAngleOffset = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2910));
		float L_0 = ___value0;
		__this->set_safeZoneAngleOffset_21(L_0);
		return;
	}
}
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnHandActivate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2911));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2912));
	{
		// get => onHandActivate;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2913));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onHandActivate_22();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OnHandActivate(UnityEngine.Events.UnityEvent)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_OnHandActivate_m80EF0A2685F8ED10133D4E75F39BE211C3F1E944 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OnHandActivate_m80EF0A2685F8ED10133D4E75F39BE211C3F1E944_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OnHandActivate_m80EF0A2685F8ED10133D4E75F39BE211C3F1E944_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2914));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2915));
	{
		// set => onHandActivate = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2916));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = ___value0;
		__this->set_onHandActivate_22(L_0);
		return;
	}
}
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnHandDeactivate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2917));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2918));
	{
		// get => onHandDeactivate;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2919));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onHandDeactivate_23();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OnHandDeactivate(UnityEngine.Events.UnityEvent)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_OnHandDeactivate_m09124DB825A202A62E677D4CA88D317E96D65A4B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OnHandDeactivate_m09124DB825A202A62E677D4CA88D317E96D65A4B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OnHandDeactivate_m09124DB825A202A62E677D4CA88D317E96D65A4B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2920));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2921));
	{
		// set => onHandDeactivate = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2922));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = ___value0;
		__this->set_onHandDeactivate_23(L_0);
		return;
	}
}
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnFirstHandDetected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2923));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2924));
	{
		// get => onFirstHandDetected;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2925));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onFirstHandDetected_24();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OnFirstHandDetected(UnityEngine.Events.UnityEvent)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_OnFirstHandDetected_mA977862AE00D76E4E63BAFCE2C72777661F0A72B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OnFirstHandDetected_mA977862AE00D76E4E63BAFCE2C72777661F0A72B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OnFirstHandDetected_mA977862AE00D76E4E63BAFCE2C72777661F0A72B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2926));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2927));
	{
		// set => onFirstHandDetected = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2928));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = ___value0;
		__this->set_onFirstHandDetected_24(L_0);
		return;
	}
}
// UnityEngine.Events.UnityEvent Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_OnLastHandLost()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2929));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2930));
	{
		// get => onLastHandLost;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2931));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onLastHandLost_25();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::set_OnLastHandLost(UnityEngine.Events.UnityEvent)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_set_OnLastHandLost_m2936352DE416D49855D4DF4722CF85F26EE8B5E0 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OnLastHandLost_m2936352DE416D49855D4DF4722CF85F26EE8B5E0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OnLastHandLost_m2936352DE416D49855D4DF4722CF85F26EE8B5E0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2932));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2933));
	{
		// set => onLastHandLost = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2934));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = ___value0;
		__this->set_onLastHandLost_25(L_0);
		return;
	}
}
// Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::get_Handedness()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint8_t HandConstraint_get_Handedness_mA01336521C8E505AE46DF49EEF04E970E94180CB (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_Handedness_mA01336521C8E505AE46DF49EEF04E970E94180CB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_Handedness_mA01336521C8E505AE46DF49EEF04E970E94180CB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2935));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2936));
	{
		// public Handedness Handedness => previousHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2937));
		uint8_t L_0 = __this->get_previousHandedness_26();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::SolverUpdate()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_SolverUpdate_mB6CD00739671F6D575C4A9358940612B01C84E02 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_SolverUpdate_mB6CD00739671F6D575C4A9358940612B01C84E02_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	RuntimeObject* V_0 = NULL;
	uint8_t V_1 = 0;
	bool V_2 = false;
	bool V_3 = false;
	bool V_4 = false;
	bool V_5 = false;
	bool V_6 = false;
	bool V_7 = false;
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_4));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_SolverUpdate_mB6CD00739671F6D575C4A9358940612B01C84E02_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2938));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2939));
	int32_t G_B3_0 = 0;
	int32_t G_B13_0 = 0;
	int32_t G_B17_0 = 0;
	int32_t G_B25_0 = 0;
	int32_t G_B28_0 = 0;
	int32_t G_B33_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2940));
		// if (SolverHandler.TrackedTargetType != TrackedObjectType.HandJoint &&
		//     SolverHandler.TrackedTargetType != TrackedObjectType.ControllerRay)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2941));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3007));
		NullCheck(L_0);
		int32_t L_1 = SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3007));
		if ((((int32_t)L_1) == ((int32_t)6)))
		{
			goto IL_0022;
		}
	}
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_2 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3008));
		NullCheck(L_2);
		int32_t L_3 = SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3008));
		G_B3_0 = ((((int32_t)((((int32_t)L_3) == ((int32_t)5))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0023;
	}

IL_0022:
	{
		G_B3_0 = 0;
	}

IL_0023:
	{
		V_2 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2942));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_002d;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2943));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2944));
		goto IL_0269;
	}

IL_002d:
	{
		// var prevTrackedController = trackedController;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2945));
		RuntimeObject* L_5 = __this->get_trackedController_27();
		V_0 = L_5;
		// if (SolverHandler.CurrentTrackedHandedness != Handedness.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2946));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_6 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3009));
		NullCheck(L_6);
		uint8_t L_7 = SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline(L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3009));
		V_3 = (bool)((!(((uint32_t)L_7) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2947));
		bool L_8 = V_3;
		if (!L_8)
		{
			goto IL_013a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2948));
		// trackedController = GetController(SolverHandler.CurrentTrackedHandedness);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2949));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_9 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3010));
		NullCheck(L_9);
		uint8_t L_10 = SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline(L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3010));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3011));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		RuntimeObject* L_11 = HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3011));
		__this->set_trackedController_27(L_11);
		// bool isValidController = IsValidController(trackedController);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2950));
		RuntimeObject* L_12 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3012));
		bool L_13 = VirtFuncInvoker1< bool, RuntimeObject* >::Invoke(14 /* System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsValidController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController) */, __this, L_12);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3012));
		V_4 = L_13;
		// if (!isValidController)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2951));
		bool L_14 = V_4;
		V_5 = (bool)((((int32_t)L_14) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2952));
		bool L_15 = V_5;
		if (!L_15)
		{
			goto IL_00db;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2953));
		// SolverHandler.PreferredTrackedHandedness = SolverHandler.CurrentTrackedHandedness.GetOppositeHandedness();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2954));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_16 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_17 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3013));
		NullCheck(L_17);
		uint8_t L_18 = SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3013));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3014));
		uint8_t L_19 = HandednessExtensions_GetOppositeHandedness_mF92A15A497E5A29847A1E4AC5E5BD28C986F0D4C(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3014));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3015));
		NullCheck(L_16);
		SolverHandler_set_PreferredTrackedHandedness_m59D94082674DA2175A03D3A0E860A84748919B7A(L_16, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3015));
		// SolverHandler.RefreshTrackedObject();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2955));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_20 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3016));
		NullCheck(L_20);
		SolverHandler_RefreshTrackedObject_mB31FEAB6C2B34BED750A1AA44AE2FAD8D6A25245(L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3016));
		// trackedController = GetController(SolverHandler.CurrentTrackedHandedness);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2956));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_21 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3017));
		NullCheck(L_21);
		uint8_t L_22 = SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline(L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3017));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3018));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		RuntimeObject* L_23 = HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1(L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3018));
		__this->set_trackedController_27(L_23);
		// isValidController = IsValidController(trackedController);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2957));
		RuntimeObject* L_24 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3019));
		bool L_25 = VirtFuncInvoker1< bool, RuntimeObject* >::Invoke(14 /* System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsValidController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController) */, __this, L_24);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3019));
		V_4 = L_25;
		// if (!isValidController)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2958));
		bool L_26 = V_4;
		V_6 = (bool)((((int32_t)L_26) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2959));
		bool L_27 = V_6;
		if (!L_27)
		{
			goto IL_00da;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2960));
		// trackedController = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2961));
		__this->set_trackedController_27((RuntimeObject*)NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2962));
	}

IL_00da:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2963));
	}

IL_00db:
	{
		// if (isValidController && SolverHandler.TransformTarget != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2964));
		bool L_28 = V_4;
		if (!L_28)
		{
			goto IL_00f2;
		}
	}
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_29 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3020));
		NullCheck(L_29);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_30 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_29, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3020));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3021));
		IL2CPP_RUNTIME_CLASS_INIT(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_il2cpp_TypeInfo_var);
		bool L_31 = Object_op_Inequality_m31EF58E217E8F4BDD3E409DEF79E1AEE95874FC1(L_30, (Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0 *)NULL, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3021));
		G_B13_0 = ((int32_t)(L_31));
		goto IL_00f3;
	}

IL_00f2:
	{
		G_B13_0 = 0;
	}

IL_00f3:
	{
		V_7 = (bool)G_B13_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2965));
		bool L_32 = V_7;
		if (!L_32)
		{
			goto IL_0137;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2966));
		// if (updateWhenOppositeHandNear || !IsOppositeHandNear(trackedController))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2967));
		bool L_33 = __this->get_updateWhenOppositeHandNear_16();
		if (L_33)
		{
			goto IL_0113;
		}
	}
	{
		RuntimeObject* L_34 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3022));
		bool L_35 = VirtFuncInvoker1< bool, RuntimeObject* >::Invoke(18 /* System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsOppositeHandNear(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController) */, __this, L_34);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3022));
		G_B17_0 = ((((int32_t)L_35) == ((int32_t)0))? 1 : 0);
		goto IL_0114;
	}

IL_0113:
	{
		G_B17_0 = 1;
	}

IL_0114:
	{
		V_8 = (bool)G_B17_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2968));
		bool L_36 = V_8;
		if (!L_36)
		{
			goto IL_0136;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2969));
		// GoalPosition = CalculateGoalPosition();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2970));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3023));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_37 = VirtFuncInvoker0< Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(15 /* UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalPosition() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3023));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3024));
		Solver_set_GoalPosition_mA4209D5D63BDC3ACFA8D2B57CAE4440112C7D2A0(__this, L_37, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3024));
		// GoalRotation = CalculateGoalRotation();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2971));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3025));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_38 = VirtFuncInvoker0< Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  >::Invoke(16 /* UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalRotation() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3025));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3026));
		Solver_set_GoalRotation_mD9DA2B8177E59A95991E10A791208842451CB80E(__this, L_38, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3026));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2972));
	}

IL_0136:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2973));
	}

IL_0137:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2974));
		goto IL_0143;
	}

IL_013a:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2975));
		// trackedController = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2976));
		__this->set_trackedController_27((RuntimeObject*)NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2977));
	}

IL_0143:
	{
		// var newHandedness = trackedController == null ? Handedness.None : trackedController.ControllerHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2978));
		RuntimeObject* L_39 = __this->get_trackedController_27();
		if (!L_39)
		{
			goto IL_0158;
		}
	}
	{
		RuntimeObject* L_40 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3027));
		NullCheck(L_40);
		uint8_t L_41 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_40);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3027));
		G_B25_0 = ((int32_t)(L_41));
		goto IL_0159;
	}

IL_0158:
	{
		G_B25_0 = 0;
	}

IL_0159:
	{
		V_1 = G_B25_0;
		// if (previousHandedness.IsNone() && !newHandedness.IsNone())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2979));
		uint8_t L_42 = __this->get_previousHandedness_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3028));
		bool L_43 = HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A(L_42, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3028));
		if (!L_43)
		{
			goto IL_0172;
		}
	}
	{
		uint8_t L_44 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3029));
		bool L_45 = HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A(L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3029));
		G_B28_0 = ((((int32_t)L_45) == ((int32_t)0))? 1 : 0);
		goto IL_0173;
	}

IL_0172:
	{
		G_B28_0 = 0;
	}

IL_0173:
	{
		V_9 = (bool)G_B28_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2980));
		bool L_46 = V_9;
		if (!L_46)
		{
			goto IL_01b4;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2981));
		// StartCoroutine(ToggleCursors(trackedController, false, true));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2982));
		RuntimeObject* L_47 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3030));
		RuntimeObject* L_48 = VirtFuncInvoker3< RuntimeObject*, RuntimeObject*, bool, bool >::Invoke(17 /* System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::ToggleCursors(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,System.Boolean,System.Boolean) */, __this, L_47, (bool)0, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3030));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3031));
		MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7(__this, L_48, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3031));
		// previousHandedness = newHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2983));
		uint8_t L_49 = V_1;
		__this->set_previousHandedness_26(L_49);
		// OnFirstHandDetected.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2984));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3032));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_50 = HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3032));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3033));
		NullCheck(L_50);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_50, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3033));
		// OnHandActivate.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2985));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3034));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_51 = HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3034));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3035));
		NullCheck(L_51);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3035));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2986));
		goto IL_025b;
	}

IL_01b4:
	{
		// else if (!previousHandedness.IsNone() && newHandedness.IsNone())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2987));
		uint8_t L_52 = __this->get_previousHandedness_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3036));
		bool L_53 = HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A(L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3036));
		if (L_53)
		{
			goto IL_01c9;
		}
	}
	{
		uint8_t L_54 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3037));
		bool L_55 = HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A(L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3037));
		G_B33_0 = ((int32_t)(L_55));
		goto IL_01ca;
	}

IL_01c9:
	{
		G_B33_0 = 0;
	}

IL_01ca:
	{
		V_10 = (bool)G_B33_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2988));
		bool L_56 = V_10;
		if (!L_56)
		{
			goto IL_0203;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2989));
		// StartCoroutine(ToggleCursors(prevTrackedController, true));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2990));
		RuntimeObject* L_57 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3038));
		RuntimeObject* L_58 = VirtFuncInvoker3< RuntimeObject*, RuntimeObject*, bool, bool >::Invoke(17 /* System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::ToggleCursors(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,System.Boolean,System.Boolean) */, __this, L_57, (bool)1, (bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3038));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3039));
		MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7(__this, L_58, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3039));
		// previousHandedness = newHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2991));
		uint8_t L_59 = V_1;
		__this->set_previousHandedness_26(L_59);
		// OnLastHandLost.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2992));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3040));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_60 = HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3040));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3041));
		NullCheck(L_60);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_60, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3041));
		// OnHandDeactivate.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2993));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3042));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_61 = HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3042));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3043));
		NullCheck(L_61);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_61, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3043));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2994));
		goto IL_025b;
	}

IL_0203:
	{
		// else if (previousHandedness != newHandedness)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2995));
		uint8_t L_62 = __this->get_previousHandedness_26();
		uint8_t L_63 = V_1;
		V_11 = (bool)((((int32_t)((((int32_t)L_62) == ((int32_t)L_63))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2996));
		bool L_64 = V_11;
		if (!L_64)
		{
			goto IL_025b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2997));
		// StartCoroutine(ToggleCursors(prevTrackedController, true));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2998));
		RuntimeObject* L_65 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3044));
		RuntimeObject* L_66 = VirtFuncInvoker3< RuntimeObject*, RuntimeObject*, bool, bool >::Invoke(17 /* System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::ToggleCursors(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,System.Boolean,System.Boolean) */, __this, L_65, (bool)1, (bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3044));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3045));
		MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7(__this, L_66, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3045));
		// StartCoroutine(ToggleCursors(trackedController, false, true));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2999));
		RuntimeObject* L_67 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3046));
		RuntimeObject* L_68 = VirtFuncInvoker3< RuntimeObject*, RuntimeObject*, bool, bool >::Invoke(17 /* System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::ToggleCursors(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,System.Boolean,System.Boolean) */, __this, L_67, (bool)0, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3046));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3047));
		MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7(__this, L_68, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3047));
		// OnHandDeactivate.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3000));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3048));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_69 = HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3048));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3049));
		NullCheck(L_69);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_69, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3049));
		// previousHandedness = newHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3001));
		uint8_t L_70 = V_1;
		__this->set_previousHandedness_26(L_70);
		// OnHandActivate.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3002));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3050));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_71 = HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3050));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3051));
		NullCheck(L_71);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_71, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3051));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3003));
	}

IL_025b:
	{
		// UpdateWorkingPositionToGoal();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3004));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3052));
		Solver_UpdateWorkingPositionToGoal_m37637FDAE4188DE06EB2436E8647CDA3E853BDFA(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3052));
		// UpdateWorkingRotationToGoal();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3005));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3053));
		Solver_UpdateWorkingRotationToGoal_m703152C16912206024090C82BF1EFC998BE51D3F(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3053));
	}

IL_0269:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3006));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsValidController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, RuntimeObject* ___controller0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* V_2 = NULL;
	int32_t V_3 = 0;
	RuntimeObject* V_4 = NULL;
	bool V_5 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___controller0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_4));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3054));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3055));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3056));
		// if (controller == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3057));
		RuntimeObject* L_0 = ___controller0;
		V_0 = (bool)((((RuntimeObject*)(RuntimeObject*)L_0) == ((RuntimeObject*)(RuntimeObject *)NULL))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3058));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_000e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3059));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3060));
		V_1 = (bool)0;
		goto IL_0046;
	}

IL_000e:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3061));
		// foreach (var pointer in controller.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3062));
		RuntimeObject* L_2 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3075));
		NullCheck(L_2);
		RuntimeObject* L_3 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(4 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_InputSource() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3075));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3076));
		NullCheck(L_3);
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_4 = InterfaceFuncInvoker0< IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* >::Invoke(0 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer[] Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource::get_Pointers() */, IMixedRealityInputSource_tE0E928A8AFA1825E798A69EB5D4BE993B8227ED2_il2cpp_TypeInfo_var, L_3);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3076));
		V_2 = L_4;
		V_3 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3063));
		goto IL_003c;
	}

IL_001f:
	{
		// foreach (var pointer in controller.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3064));
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_5 = V_2;
		int32_t L_6 = V_3;
		NullCheck(L_5);
		int32_t L_7 = L_6;
		RuntimeObject* L_8 = (L_5)->GetAt(static_cast<il2cpp_array_size_t>(L_7));
		V_4 = L_8;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3065));
		// if (pointer.IsFocusLocked)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3066));
		RuntimeObject* L_9 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3077));
		NullCheck(L_9);
		bool L_10 = InterfaceFuncInvoker0< bool >::Invoke(13 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer::get_IsFocusLocked() */, IMixedRealityPointer_tD7C4CF8940EB016597EF8CED76503F0D39A61C53_il2cpp_TypeInfo_var, L_9);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3077));
		V_5 = L_10;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3067));
		bool L_11 = V_5;
		if (!L_11)
		{
			goto IL_0037;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3068));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3069));
		V_1 = (bool)0;
		goto IL_0046;
	}

IL_0037:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3070));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3071));
		int32_t L_12 = V_3;
		V_3 = ((int32_t)il2cpp_codegen_add((int32_t)L_12, (int32_t)1));
	}

IL_003c:
	{
		// foreach (var pointer in controller.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3072));
		int32_t L_13 = V_3;
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_14 = V_2;
		NullCheck(L_14);
		if ((((int32_t)L_13) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_14)->max_length)))))))
		{
			goto IL_001f;
		}
	}
	{
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3073));
		V_1 = (bool)1;
		goto IL_0046;
	}

IL_0046:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3074));
		bool L_15 = V_1;
		return L_15;
	}
}
// UnityEngine.Vector3 Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  HandConstraint_CalculateGoalPosition_mC16716A23BEA45792716B66EE4F5E7606C050877 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_CalculateGoalPosition_mC16716A23BEA45792716B66EE4F5E7606C050877_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_1;
	memset((&V_1), 0, sizeof(V_1));
	bool V_2 = false;
	Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  V_3;
	memset((&V_3), 0, sizeof(V_3));
	float V_4 = 0.0f;
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_5;
	memset((&V_5), 0, sizeof(V_5));
	bool V_6 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_7;
	memset((&V_7), 0, sizeof(V_7));
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_8;
	memset((&V_8), 0, sizeof(V_8));
	bool V_9 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_10;
	memset((&V_10), 0, sizeof(V_10));
	bool V_11 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_12;
	memset((&V_12), 0, sizeof(V_12));
	bool V_13 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_3), (&V_4), (&V_5), (&V_10), (&V_12));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_CalculateGoalPosition_mC16716A23BEA45792716B66EE4F5E7606C050877_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3078));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3079));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3080));
		// var goalPosition = SolverHandler.TransformTarget.position;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3081));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3113));
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3113));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3114));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3114));
		V_0 = L_2;
		// if (trackedController != null &&
		//     handBounds.LocalBounds.TryGetValue(trackedController.ControllerHandedness, out trackedHandBounds))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3082));
		RuntimeObject* L_3 = __this->get_trackedController_27();
		if (!L_3)
		{
			goto IL_0039;
		}
	}
	{
		HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * L_4 = __this->get_handBounds_28();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3115));
		NullCheck(L_4);
		Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * L_5 = HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4_inline(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3115));
		RuntimeObject* L_6 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3116));
		NullCheck(L_6);
		uint8_t L_7 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_6);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3116));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3117));
		NullCheck(L_5);
		bool L_8 = Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141(L_5, L_7, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), /*hidden argument*/Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3117));
		G_B3_0 = ((int32_t)(L_8));
		goto IL_003a;
	}

IL_0039:
	{
		G_B3_0 = 0;
	}

IL_003a:
	{
		V_2 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3083));
		bool L_9 = V_2;
		if (!L_9)
		{
			goto IL_01bc;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3084));
		// MixedRealityPose? palmPose = GetPalmPose(trackedController);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3085));
		RuntimeObject* L_10 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3118));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_11 = HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3118));
		V_3 = L_11;
		// if (palmPose.HasValue == false)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3086));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3119));
		bool L_12 = Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_inline((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3119));
		V_6 = (bool)((((int32_t)L_12) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3087));
		bool L_13 = V_6;
		if (!L_13)
		{
			goto IL_0067;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3088));
		// return goalPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3089));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = V_0;
		V_7 = L_14;
		goto IL_01c1;
	}

IL_0067:
	{
		// Ray ray = CalculateGoalPositionRay(
		//     goalPosition, SolverHandler.TransformTarget,
		//     trackedController, safeZone, OffsetBehavior, safeZoneAngleOffset);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3090));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = V_0;
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_16 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3120));
		NullCheck(L_16);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_17 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3120));
		RuntimeObject* L_18 = __this->get_trackedController_27();
		int32_t L_19 = __this->get_safeZone_14();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3121));
		int32_t L_20 = HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3121));
		float L_21 = __this->get_safeZoneAngleOffset_21();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3122));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_22 = HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3(L_15, L_17, L_18, L_19, L_20, L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3122));
		V_5 = L_22;
		// trackedHandBounds.Expand(safeZoneBuffer);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3091));
		float L_23 = __this->get_safeZoneBuffer_15();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3123));
		Bounds_Expand_m3FB9436F88DFE0FB57ECF6B1C4B2EDF9589346DA((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3123));
		// ray.origin = Quaternion.Inverse(palmPose.Value.Rotation) * (ray.origin - palmPose.Value.Position);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3092));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3124));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_24 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3124));
		V_8 = L_24;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3125));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_25 = MixedRealityPose_get_Rotation_m6A888CC2D81BE74348C5C556880E83DA4418C846((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3125));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3126));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_26 = Quaternion_Inverse_mC3A78571A826F05CE179637E675BD25F8B203E0C(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3126));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3127));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = Ray_get_origin_m3773CA7B1E2F26F6F1447652B485D86C0BEC5187((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3127));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3128));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_28 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3128));
		V_8 = L_28;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3129));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3129));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3130));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_30 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_27, L_29, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3130));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3131));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_26, L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3131));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3132));
		Ray_set_origin_m6E0F02140356CBC1BA9B448CBBA065AAB492A132((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), L_31, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3132));
		// ray.direction = Quaternion.Inverse(palmPose.Value.Rotation) * ray.direction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3093));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3133));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_32 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3133));
		V_8 = L_32;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3134));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_33 = MixedRealityPose_get_Rotation_m6A888CC2D81BE74348C5C556880E83DA4418C846((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3134));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3135));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_34 = Quaternion_Inverse_mC3A78571A826F05CE179637E675BD25F8B203E0C(L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3135));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3136));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_35 = Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3136));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3137));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_36 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_34, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3137));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3138));
		Ray_set_direction_mD4D0EA72276CF43ABFE2C190DFD24930ED977D8B((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), L_36, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3138));
		// if (trackedHandBounds.IntersectRay(ray, out distance))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3094));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_37 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3139));
		bool L_38 = Bounds_IntersectRay_m11E700B1AE0EAE3568379B999D1FBFEDEEB56EC7((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), L_37, (float*)(&V_4), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3139));
		V_9 = L_38;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3095));
		bool L_39 = V_9;
		if (!L_39)
		{
			goto IL_01bb;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3096));
		// var localSpaceHit = ray.origin + ray.direction * distance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3097));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3140));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_40 = Ray_get_origin_m3773CA7B1E2F26F6F1447652B485D86C0BEC5187((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3140));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3141));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3141));
		float L_42 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3142));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_43 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_41, L_42, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3142));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3143));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_44 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_40, L_43, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3143));
		V_10 = L_44;
		// if (palmPose.HasValue)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3098));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3144));
		bool L_45 = Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_inline((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3144));
		V_11 = L_45;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3099));
		bool L_46 = V_11;
		if (!L_46)
		{
			goto IL_01ba;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3100));
		// goalPosition = palmPose.Value.Rotation * (localSpaceHit) + palmPose.Value.Position;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3101));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3145));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_47 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3145));
		V_8 = L_47;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3146));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_48 = MixedRealityPose_get_Rotation_m6A888CC2D81BE74348C5C556880E83DA4418C846((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3146));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_49 = V_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3147));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_50 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_48, L_49, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3147));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3148));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_51 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_3), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3148));
		V_8 = L_51;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3149));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_52 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_8), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3149));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3150));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_50, L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3150));
		V_0 = L_53;
		// Vector3 goalToCam = CameraCache.Main.transform.position - goalPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3102));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3151));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_54 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3151));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3152));
		NullCheck(L_54);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_55 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3152));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3153));
		NullCheck(L_55);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_56 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_55, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3153));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_57 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3154));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_58 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_56, L_57, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3154));
		V_12 = L_58;
		// if (goalToCam.magnitude > Mathf.Epsilon)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3103));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3155));
		float L_59 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_12), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3155));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_60 = ((Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields*)il2cpp_codegen_static_fields_for(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var))->get_Epsilon_0();
		V_13 = (bool)((((float)L_59) > ((float)L_60))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3104));
		bool L_61 = V_13;
		if (!L_61)
		{
			goto IL_01b9;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3105));
		// goalPosition += (goalToCam).normalized * ForwardOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3106));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_62 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3156));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_63 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_12), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3156));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3157));
		float L_64 = HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3157));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3158));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_65 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_63, L_64, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3158));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3159));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_66 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_62, L_65, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3159));
		V_0 = L_66;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3107));
	}

IL_01b9:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3108));
	}

IL_01ba:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3109));
	}

IL_01bb:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3110));
	}

IL_01bc:
	{
		// return goalPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3111));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_67 = V_0;
		V_7 = L_67;
		goto IL_01c1;
	}

IL_01c1:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3112));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_68 = V_7;
		return L_68;
	}
}
// UnityEngine.Quaternion Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalRotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  HandConstraint_CalculateGoalRotation_m62CC8B34F0F527C6F01E8C26E67F566CDB199F46 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_CalculateGoalRotation_m62CC8B34F0F527C6F01E8C26E67F566CDB199F46_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_0;
	memset((&V_0), 0, sizeof(V_0));
	int32_t V_1 = 0;
	bool V_2 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	bool V_4 = false;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_5;
	memset((&V_5), 0, sizeof(V_5));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_CalculateGoalRotation_m62CC8B34F0F527C6F01E8C26E67F566CDB199F46_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3160));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3161));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3162));
		// var goalRotation = SolverHandler.TransformTarget.rotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3163));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_0 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3187));
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = SolverHandler_get_TransformTarget_mDCD4E12FB2CA66DE59FD9BAAA0B928F4FD503A4E(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3187));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3188));
		NullCheck(L_1);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_2 = Transform_get_rotation_m3AB90A67403249AECCA5E02BC70FCE8C90FE9FB9(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3188));
		V_0 = L_2;
		// switch (rotationBehavior)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3164));
		int32_t L_3 = __this->get_rotationBehavior_18();
		V_1 = L_3;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3165));
		int32_t L_4 = V_1;
		if ((((int32_t)L_4) == ((int32_t)2)))
		{
			goto IL_0025;
		}
	}
	{
		goto IL_001f;
	}

IL_001f:
	{
		int32_t L_5 = V_1;
		if ((((int32_t)L_5) == ((int32_t)3)))
		{
			goto IL_0049;
		}
	}
	{
		goto IL_005a;
	}

IL_0025:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3166));
		// goalRotation = Quaternion.LookRotation(GoalPosition - CameraCache.Main.transform.position);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3167));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3189));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Solver_get_GoalPosition_mF9338C0233F665879FA53CEE46E48B571988756B(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3189));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3190));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_7 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3190));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3191));
		NullCheck(L_7);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_8 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3191));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3192));
		NullCheck(L_8);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3192));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3193));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_6, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3193));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3194));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_11 = Quaternion_LookRotation_m465C08262650385D02ADDE78C9791AED47D2155F(L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3194));
		V_0 = L_11;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3168));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3169));
		goto IL_005a;
	}

IL_0049:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3170));
		// goalRotation *= handToWorldRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3171));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_12 = V_0;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_13 = __this->get_handToWorldRotation_29();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3195));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_14 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_12, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3195));
		V_0 = L_14;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3172));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3173));
		goto IL_005a;
	}

IL_005a:
	{
		// if (rotationBehavior != SolverRotationBehavior.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3174));
		int32_t L_15 = __this->get_rotationBehavior_18();
		V_2 = (bool)((!(((uint32_t)L_15) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3175));
		bool L_16 = V_2;
		if (!L_16)
		{
			goto IL_00bb;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3176));
		// var additionalRotation = SolverHandler.AdditionalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3177));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_17 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3196));
		NullCheck(L_17);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135_inline(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3196));
		V_3 = L_18;
		// if (trackedController.ControllerHandedness.IsRight())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3178));
		RuntimeObject* L_19 = __this->get_trackedController_27();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3197));
		NullCheck(L_19);
		uint8_t L_20 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_19);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3197));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3198));
		bool L_21 = HandednessExtensions_IsRight_mB93D3FACC0DE8F40C91BC945403DD1014C785363(L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3198));
		V_4 = L_21;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3179));
		bool L_22 = V_4;
		if (!L_22)
		{
			goto IL_009c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3180));
		// additionalRotation.y *= -1.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3181));
		float* L_23 = (&V_3)->get_address_of_y_3();
		float* L_24 = L_23;
		float L_25 = *((float*)L_24);
		*((float*)L_24) = (float)((float)il2cpp_codegen_multiply((float)L_25, (float)(-1.0f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3182));
	}

IL_009c:
	{
		// goalRotation *= Quaternion.Euler(additionalRotation.x, additionalRotation.y, additionalRotation.z);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3183));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_26 = V_0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_27 = V_3;
		float L_28 = L_27.get_x_2();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_29 = V_3;
		float L_30 = L_29.get_y_3();
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = V_3;
		float L_32 = L_31.get_z_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3199));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_33 = Quaternion_Euler_m537DD6CEAE0AD4274D8A84414C24C30730427D05(L_28, L_30, L_32, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3199));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3200));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_34 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_26, L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3200));
		V_0 = L_34;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3184));
	}

IL_00bb:
	{
		// return goalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3185));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_35 = V_0;
		V_5 = L_35;
		goto IL_00c0;
	}

IL_00c0:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3186));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_36 = V_5;
		return L_36;
	}
}
// System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::ToggleCursors(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,System.Boolean,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* HandConstraint_ToggleCursors_mE985EC6CD4A4E930F7015DF18C2F5A04CCB2D117 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, RuntimeObject* ___controller0, bool ___visible1, bool ___frameDelay2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_ToggleCursors_mE985EC6CD4A4E930F7015DF18C2F5A04CCB2D117_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_ToggleCursors_mE985EC6CD4A4E930F7015DF18C2F5A04CCB2D117_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * L_0 = (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 *)il2cpp_codegen_object_new(U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267_il2cpp_TypeInfo_var);
		U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617(L_0, 0, /*hidden argument*/NULL);
		U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * L_1 = L_0;
		NullCheck(L_1);
		L_1->set_U3CU3E4__this_5(__this);
		U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * L_2 = L_1;
		RuntimeObject* L_3 = ___controller0;
		NullCheck(L_2);
		L_2->set_controller_2(L_3);
		U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * L_4 = L_2;
		bool L_5 = ___visible1;
		NullCheck(L_4);
		L_4->set_visible_3(L_5);
		U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * L_6 = L_4;
		bool L_7 = ___frameDelay2;
		NullCheck(L_6);
		L_6->set_frameDelay_4(L_7);
		return L_6;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsOppositeHandNear(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsOppositeHandNear_m011D2C9383CC692D92AC52437DCAE119B4364652 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, RuntimeObject* ___controller0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_IsOppositeHandNear_m011D2C9383CC692D92AC52437DCAE119B4364652_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_1;
	memset((&V_1), 0, sizeof(V_1));
	Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  V_2;
	memset((&V_2), 0, sizeof(V_2));
	bool V_3 = false;
	bool V_4 = false;
	bool V_5 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___controller0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1), (&V_2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_IsOppositeHandNear_m011D2C9383CC692D92AC52437DCAE119B4364652_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3201));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3202));
	int32_t G_B4_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3203));
		// if (controller != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3204));
		RuntimeObject* L_0 = ___controller0;
		V_0 = (bool)((!(((RuntimeObject*)(RuntimeObject*)L_0) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3205));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_007d;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3206));
		// if (handBounds.Bounds.TryGetValue(controller.ControllerHandedness.GetOppositeHandedness(), out Bounds oppositeHandBounds) &&
		//     handBounds.Bounds.TryGetValue(controller.ControllerHandedness, out Bounds trackedHandBounds))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3207));
		HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * L_2 = __this->get_handBounds_28();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3220));
		NullCheck(L_2);
		Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * L_3 = HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3220));
		RuntimeObject* L_4 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3221));
		NullCheck(L_4);
		uint8_t L_5 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_4);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3221));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3222));
		uint8_t L_6 = HandednessExtensions_GetOppositeHandedness_mF92A15A497E5A29847A1E4AC5E5BD28C986F0D4C(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3222));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3223));
		NullCheck(L_3);
		bool L_7 = Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141(L_3, L_6, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), /*hidden argument*/Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3223));
		if (!L_7)
		{
			goto IL_0043;
		}
	}
	{
		HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * L_8 = __this->get_handBounds_28();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3224));
		NullCheck(L_8);
		Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * L_9 = HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_inline(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3224));
		RuntimeObject* L_10 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3225));
		NullCheck(L_10);
		uint8_t L_11 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_10);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3225));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3226));
		NullCheck(L_9);
		bool L_12 = Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141(L_9, L_11, (Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_2), /*hidden argument*/Dictionary_2_TryGetValue_m1DDF8E018E78CBE91A97201A9A38697405744141_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3226));
		G_B4_0 = ((int32_t)(L_12));
		goto IL_0044;
	}

IL_0043:
	{
		G_B4_0 = 0;
	}

IL_0044:
	{
		V_3 = (bool)G_B4_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3208));
		bool L_13 = V_3;
		if (!L_13)
		{
			goto IL_007c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3209));
		// trackedHandBounds.Expand(trackedHandBounds.extents);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3210));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3227));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Bounds_get_extents_mBA4B2196036DD5A858BDAD53BC71A778B41841C9((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3227));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3228));
		Bounds_Expand_mB181AD8DCDE6A018DFC196528CC5002CA7EBCF0A((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_2), L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3228));
		// oppositeHandBounds.Expand(oppositeHandBounds.extents);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3211));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3229));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = Bounds_get_extents_mBA4B2196036DD5A858BDAD53BC71A778B41841C9((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3229));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3230));
		Bounds_Expand_mB181AD8DCDE6A018DFC196528CC5002CA7EBCF0A((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_1), L_15, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3230));
		// if (trackedHandBounds.Intersects(oppositeHandBounds))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3212));
		Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890  L_16 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3231));
		bool L_17 = Bounds_Intersects_m7B1398FDAC8ECA19677D0956E67FF92EB0BADA9E((Bounds_tA2716F5212749C61B0E7B7B77E0CD3D79B742890 *)(&V_2), L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3231));
		V_4 = L_17;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3213));
		bool L_18 = V_4;
		if (!L_18)
		{
			goto IL_007b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3214));
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3215));
		V_5 = (bool)1;
		goto IL_0082;
	}

IL_007b:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3216));
	}

IL_007c:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3217));
	}

IL_007d:
	{
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3218));
		V_5 = (bool)0;
		goto IL_0082;
	}

IL_0082:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3219));
		bool L_19 = V_5;
		return L_19;
	}
}
// UnityEngine.Ray Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateRayForSafeZone(UnityEngine.Vector3,UnityEngine.Transform,Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___origin0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___targetTransform1, RuntimeObject* ___hand2, int32_t ___handSafeZone3, int32_t ___offsetBehavior4, float ___angleOffset5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_1;
	memset((&V_1), 0, sizeof(V_1));
	int32_t V_2 = 0;
	bool V_3 = false;
	bool V_4 = false;
	bool V_5 = false;
	bool V_6 = false;
	bool V_7 = false;
	bool V_8 = false;
	Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  V_9;
	memset((&V_9), 0, sizeof(V_9));
	bool V_10 = false;
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_11;
	memset((&V_11), 0, sizeof(V_11));
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_12;
	memset((&V_12), 0, sizeof(V_12));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___origin0), (&___targetTransform1), (&___hand2), (&___handSafeZone3), (&___offsetBehavior4), (&___angleOffset5));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_9));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3232));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3233));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B7_0;
	memset((&G_B7_0), 0, sizeof(G_B7_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B16_0;
	memset((&G_B16_0), 0, sizeof(G_B16_0));
	float G_B32_0 = 0.0f;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3234));
		// Vector3 lookAtCamera = targetTransform.transform.position - CameraCache.Main.transform.position;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3235));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = ___targetTransform1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3308));
		NullCheck(L_0);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_1 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3308));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3309));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3309));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3310));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_3 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3310));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3311));
		NullCheck(L_3);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_4 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3311));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3312));
		NullCheck(L_4);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = Transform_get_position_mF54C3A064F7C8E24F1C56EE128728B2E4485E294(L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3312));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3313));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_6 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_2, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3313));
		V_1 = L_6;
		// switch (handSafeZone)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3236));
		int32_t L_7 = ___handSafeZone3;
		V_2 = L_7;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3237));
		int32_t L_8 = V_2;
		switch (L_8)
		{
			case 0:
			{
				goto IL_003f;
			}
			case 1:
			{
				goto IL_0094;
			}
			case 2:
			{
				goto IL_00f0;
			}
			case 3:
			{
				goto IL_011f;
			}
			case 4:
			{
				goto IL_0155;
			}
		}
	}
	{
		goto IL_003f;
	}

IL_003f:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3238));
		// if (offsetBehavior == SolverOffsetBehavior.TrackedObjectRotation)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3239));
		int32_t L_9 = ___offsetBehavior4;
		V_3 = (bool)((((int32_t)L_9) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3240));
		bool L_10 = V_3;
		if (!L_10)
		{
			goto IL_0054;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3241));
		// direction = targetTransform.right;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3242));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_11 = ___targetTransform1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3314));
		NullCheck(L_11);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = Transform_get_right_mC32CE648E98D3D4F62F897A2751EE567C7C0CFB0(L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3314));
		V_0 = L_12;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3243));
		goto IL_0074;
	}

IL_0054:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3244));
		// direction = Vector3.Cross(lookAtCamera, Vector3.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3245));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_13 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3315));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3315));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3316));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887(L_13, L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3316));
		V_0 = L_15;
		// direction = IsPalmFacingCamera(hand) ? direction : -direction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3246));
		RuntimeObject* L_16 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3317));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		bool L_17 = HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128(L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3317));
		if (L_17)
		{
			goto IL_0071;
		}
	}
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3318));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3318));
		G_B7_0 = L_19;
		goto IL_0072;
	}

IL_0071:
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = V_0;
		G_B7_0 = L_20;
	}

IL_0072:
	{
		V_0 = G_B7_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3247));
	}

IL_0074:
	{
		// if (hand.ControllerHandedness.IsLeft())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3248));
		RuntimeObject* L_21 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3319));
		NullCheck(L_21);
		uint8_t L_22 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_21);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3319));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3320));
		bool L_23 = HandednessExtensions_IsLeft_m2A5BCC78504AA7985A0220F5A511CBB63523B719(L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3320));
		V_4 = L_23;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3249));
		bool L_24 = V_4;
		if (!L_24)
		{
			goto IL_008e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3250));
		// direction = -direction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3251));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_25 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3321));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_26 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3321));
		V_0 = L_26;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3252));
	}

IL_008e:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3253));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3254));
		goto IL_01bf;
	}

IL_0094:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3255));
		// if (offsetBehavior == SolverOffsetBehavior.TrackedObjectRotation)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3256));
		int32_t L_27 = ___offsetBehavior4;
		V_5 = (bool)((((int32_t)L_27) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3257));
		bool L_28 = V_5;
		if (!L_28)
		{
			goto IL_00b0;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3258));
		// direction = -targetTransform.right;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3259));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_29 = ___targetTransform1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3322));
		NullCheck(L_29);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_30 = Transform_get_right_mC32CE648E98D3D4F62F897A2751EE567C7C0CFB0(L_29, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3322));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3323));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_31 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3323));
		V_0 = L_31;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3260));
		goto IL_00d0;
	}

IL_00b0:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3261));
		// direction = Vector3.Cross(lookAtCamera, Vector3.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3262));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_32 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3324));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_33 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3324));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3325));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_34 = Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887(L_32, L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3325));
		V_0 = L_34;
		// direction = IsPalmFacingCamera(hand) ? direction : -direction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3263));
		RuntimeObject* L_35 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3326));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		bool L_36 = HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128(L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3326));
		if (L_36)
		{
			goto IL_00cd;
		}
	}
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_37 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3327));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_38 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_37, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3327));
		G_B16_0 = L_38;
		goto IL_00ce;
	}

IL_00cd:
	{
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_39 = V_0;
		G_B16_0 = L_39;
	}

IL_00ce:
	{
		V_0 = G_B16_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3264));
	}

IL_00d0:
	{
		// if (hand.ControllerHandedness.IsRight())
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3265));
		RuntimeObject* L_40 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3328));
		NullCheck(L_40);
		uint8_t L_41 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_40);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3328));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3329));
		bool L_42 = HandednessExtensions_IsRight_mB93D3FACC0DE8F40C91BC945403DD1014C785363(L_41, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3329));
		V_6 = L_42;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3266));
		bool L_43 = V_6;
		if (!L_43)
		{
			goto IL_00ea;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3267));
		// direction = -direction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3268));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_44 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3330));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_45 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3330));
		V_0 = L_45;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3269));
	}

IL_00ea:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3270));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3271));
		goto IL_01bf;
	}

IL_00f0:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3272));
		// if (offsetBehavior == SolverOffsetBehavior.TrackedObjectRotation)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3273));
		int32_t L_46 = ___offsetBehavior4;
		V_7 = (bool)((((int32_t)L_46) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3274));
		bool L_47 = V_7;
		if (!L_47)
		{
			goto IL_0107;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3275));
		// direction = targetTransform.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3276));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_48 = ___targetTransform1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3331));
		NullCheck(L_48);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_49 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_48, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3331));
		V_0 = L_49;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3277));
		goto IL_0119;
	}

IL_0107:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3278));
		// direction = CameraCache.Main.transform.up;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3279));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3332));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_50 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3332));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3333));
		NullCheck(L_50);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_51 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_50, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3333));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3334));
		NullCheck(L_51);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_52 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_51, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3334));
		V_0 = L_52;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3280));
	}

IL_0119:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3281));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3282));
		goto IL_01bf;
	}

IL_011f:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3283));
		// if (offsetBehavior == SolverOffsetBehavior.TrackedObjectRotation)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3284));
		int32_t L_53 = ___offsetBehavior4;
		V_8 = (bool)((((int32_t)L_53) == ((int32_t)1))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3285));
		bool L_54 = V_8;
		if (!L_54)
		{
			goto IL_013b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3286));
		// direction = -targetTransform.forward;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3287));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_55 = ___targetTransform1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3335));
		NullCheck(L_55);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_56 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_55, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3335));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3336));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_57 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_56, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3336));
		V_0 = L_57;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3288));
		goto IL_0152;
	}

IL_013b:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3289));
		// direction = -CameraCache.Main.transform.up;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3290));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3337));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_58 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3337));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3338));
		NullCheck(L_58);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_59 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_58, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3338));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3339));
		NullCheck(L_59);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_60 = Transform_get_up_m3E443F6EB278D547946E80D77065A871BEEEE282(L_59, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3339));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3340));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_61 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_60, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3340));
		V_0 = L_61;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3291));
	}

IL_0152:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3292));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3293));
		goto IL_01bf;
	}

IL_0155:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3294));
		// MixedRealityPose? palmPose = GetPalmPose(hand);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3295));
		RuntimeObject* L_62 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3341));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_63 = HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898(L_62, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3341));
		V_9 = L_63;
		// if (palmPose.HasValue)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3296));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3342));
		bool L_64 = Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_inline((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_9), /*hidden argument*/Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3342));
		V_10 = L_64;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3297));
		bool L_65 = V_10;
		if (!L_65)
		{
			goto IL_01b3;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3298));
		// direction = Quaternion.AngleAxis(hand.ControllerHandedness.IsLeft() ? angleOffset : -angleOffset, palmPose.Value.Forward) * -palmPose.Value.Up;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3299));
		RuntimeObject* L_66 = ___hand2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3343));
		NullCheck(L_66);
		uint8_t L_67 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_66);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3343));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3344));
		bool L_68 = HandednessExtensions_IsLeft_m2A5BCC78504AA7985A0220F5A511CBB63523B719(L_67, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3344));
		if (L_68)
		{
			goto IL_017e;
		}
	}
	{
		float L_69 = ___angleOffset5;
		G_B32_0 = ((-L_69));
		goto IL_0180;
	}

IL_017e:
	{
		float L_70 = ___angleOffset5;
		G_B32_0 = L_70;
	}

IL_0180:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3345));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_71 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_9), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3345));
		V_11 = L_71;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3346));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_72 = MixedRealityPose_get_Forward_m8AC3F48E50D7917797E641BD9FBF7FB35074DC0E((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_11), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3346));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3347));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_73 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0(G_B32_0, L_72, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3347));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3348));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_74 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_9), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3348));
		V_11 = L_74;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3349));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_75 = MixedRealityPose_get_Up_mB950FA9059CBB6EEE53990F744D5B30C756A63C0((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_11), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3349));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3350));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_76 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_75, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3350));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3351));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_77 = Quaternion_op_Multiply_mD5999DE317D808808B72E58E7A978C4C0995879C(L_73, L_76, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3351));
		V_0 = L_77;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3300));
		goto IL_01bc;
	}

IL_01b3:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3301));
		// direction = -lookAtCamera;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3302));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_78 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3352));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_79 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_78, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3352));
		V_0 = L_79;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3303));
	}

IL_01bc:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3304));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3305));
		goto IL_01bf;
	}

IL_01bf:
	{
		// return new Ray(origin + direction, -direction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3306));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_80 = ___origin0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_81 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3353));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_82 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_80, L_81, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3353));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_83 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3354));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_84 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_83, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3354));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3355));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_85;
		memset((&L_85), 0, sizeof(L_85));
		Ray__ctor_m695D219349B8AA4C82F96C55A27D384C07736F6B((&L_85), L_82, L_84, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3355));
		V_12 = L_85;
		goto IL_01d5;
	}

IL_01d5:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3307));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_86 = V_12;
		return L_86;
	}
}
// UnityEngine.Ray Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::CalculateGoalPositionRay(UnityEngine.Vector3,UnityEngine.Transform,Microsoft.MixedReality.Toolkit.Input.IMixedRealityController,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverSafeZone,Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/SolverOffsetBehavior,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___origin0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___targetTransform1, RuntimeObject* ___hand2, int32_t ___handSafeZone3, int32_t ___offsetBehavior4, float ___angleOffset5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	int32_t V_1 = 0;
	float V_2 = 0.0f;
	int32_t V_3 = 0;
	int32_t V_4 = 0;
	int32_t V_5 = 0;
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_6;
	memset((&V_6), 0, sizeof(V_6));
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_7;
	memset((&V_7), 0, sizeof(V_7));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_8;
	memset((&V_8), 0, sizeof(V_8));
	bool V_9 = false;
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_10;
	memset((&V_10), 0, sizeof(V_10));
	bool V_11 = false;
	bool V_12 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_13;
	memset((&V_13), 0, sizeof(V_13));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___origin0), (&___targetTransform1), (&___hand2), (&___handSafeZone3), (&___offsetBehavior4), (&___angleOffset5));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5), (&V_6), (&V_7), (&V_8));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_CalculateGoalPositionRay_mC541D8821DBBE4B942965B22F0F10650F66D65D3_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3356));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3357));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3358));
		// if (angleOffset == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3359));
		float L_0 = ___angleOffset5;
		V_9 = (bool)((((float)L_0) == ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3360));
		bool L_1 = V_9;
		if (!L_1)
		{
			goto IL_0028;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3361));
		// return CalculateRayForSafeZone(origin, targetTransform, hand, handSafeZone, offsetBehavior);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3362));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = ___origin0;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_3 = ___targetTransform1;
		RuntimeObject* L_4 = ___hand2;
		int32_t L_5 = ___handSafeZone3;
		int32_t L_6 = ___offsetBehavior4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3385));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_7 = HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86(L_2, L_3, L_4, L_5, L_6, (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3385));
		V_10 = L_7;
		goto IL_0124;
	}

IL_0028:
	{
		// angleOffset %= 360;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3363));
		float L_8 = ___angleOffset5;
		___angleOffset5 = (fmodf(L_8, (360.0f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3364));
		goto IL_0046;
	}

IL_0034:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3365));
		// angleOffset = (angleOffset + 360) % 360;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3366));
		float L_9 = ___angleOffset5;
		___angleOffset5 = (fmodf(((float)il2cpp_codegen_add((float)L_9, (float)(360.0f))), (360.0f)));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3367));
	}

IL_0046:
	{
		// while (angleOffset < 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3368));
		float L_10 = ___angleOffset5;
		V_11 = (bool)((((float)L_10) < ((float)(0.0f)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3369));
		bool L_11 = V_11;
		if (L_11)
		{
			goto IL_0034;
		}
	}
	{
		// if (handSafeZone == SolverSafeZone.AtopPalm)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3370));
		int32_t L_12 = ___handSafeZone3;
		V_12 = (bool)((((int32_t)L_12) == ((int32_t)4))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3371));
		bool L_13 = V_12;
		if (!L_13)
		{
			goto IL_0074;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3372));
		// return CalculateRayForSafeZone(origin, targetTransform, hand, handSafeZone, offsetBehavior, angleOffset);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3373));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = ___origin0;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_15 = ___targetTransform1;
		RuntimeObject* L_16 = ___hand2;
		int32_t L_17 = ___handSafeZone3;
		int32_t L_18 = ___offsetBehavior4;
		float L_19 = ___angleOffset5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3386));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_20 = HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86(L_14, L_15, L_16, L_17, L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3386));
		V_10 = L_20;
		goto IL_0124;
	}

IL_0074:
	{
		// float offset = angleOffset / 90;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3374));
		float L_21 = ___angleOffset5;
		V_0 = ((float)((float)L_21/(float)(90.0f)));
		// int intOffset = Mathf.FloorToInt(offset);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3375));
		float L_22 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3387));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		int32_t L_23 = Mathf_FloorToInt_m0C42B64571CE92A738AD7BB82388CE12FBE7457C(L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3387));
		V_1 = L_23;
		// float fracOffset = offset - intOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3376));
		float L_24 = V_0;
		int32_t L_25 = V_1;
		V_2 = ((float)il2cpp_codegen_subtract((float)L_24, (float)(((float)((float)L_25)))));
		// int currentSafeZoneClockwiseIdx = System.Array.IndexOf(handSafeZonesClockWiseRightHand, handSafeZone);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3377));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_26 = ((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->get_handSafeZonesClockWiseRightHand_13();
		int32_t L_27 = ___handSafeZone3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3388));
		int32_t L_28 = Array_IndexOf_TisSolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5_m0212C0F4B0CA593D89081B9D01E9CC0363E9B60A(L_26, L_27, /*hidden argument*/Array_IndexOf_TisSolverSafeZone_t1B20D2C2E91FD74C1A550210A7E96E482B7D35A5_m0212C0F4B0CA593D89081B9D01E9CC0363E9B60A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3388));
		V_3 = L_28;
		// SolverSafeZone intPartSafeZoneClockwise = handSafeZonesClockWiseRightHand[(currentSafeZoneClockwiseIdx + intOffset) % handSafeZonesClockWiseRightHand.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3378));
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_29 = ((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->get_handSafeZonesClockWiseRightHand_13();
		int32_t L_30 = V_3;
		int32_t L_31 = V_1;
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_32 = ((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->get_handSafeZonesClockWiseRightHand_13();
		NullCheck(L_32);
		NullCheck(L_29);
		int32_t L_33 = ((int32_t)((int32_t)((int32_t)il2cpp_codegen_add((int32_t)L_30, (int32_t)L_31))%(int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_32)->max_length))))));
		int32_t L_34 = (int32_t)(L_29)->GetAt(static_cast<il2cpp_array_size_t>(L_33));
		V_4 = L_34;
		// SolverSafeZone fracPartSafeZoneClockwise = handSafeZonesClockWiseRightHand[(currentSafeZoneClockwiseIdx + intOffset + 1) % handSafeZonesClockWiseRightHand.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3379));
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_35 = ((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->get_handSafeZonesClockWiseRightHand_13();
		int32_t L_36 = V_3;
		int32_t L_37 = V_1;
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_38 = ((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->get_handSafeZonesClockWiseRightHand_13();
		NullCheck(L_38);
		NullCheck(L_35);
		int32_t L_39 = ((int32_t)((int32_t)((int32_t)il2cpp_codegen_add((int32_t)((int32_t)il2cpp_codegen_add((int32_t)L_36, (int32_t)L_37)), (int32_t)1))%(int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_38)->max_length))))));
		int32_t L_40 = (int32_t)(L_35)->GetAt(static_cast<il2cpp_array_size_t>(L_39));
		V_5 = L_40;
		// Ray intSafeZoneRay = CalculateRayForSafeZone(origin, targetTransform, hand, intPartSafeZoneClockwise, offsetBehavior);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3380));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_41 = ___origin0;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_42 = ___targetTransform1;
		RuntimeObject* L_43 = ___hand2;
		int32_t L_44 = V_4;
		int32_t L_45 = ___offsetBehavior4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3389));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_46 = HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86(L_41, L_42, L_43, L_44, L_45, (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3389));
		V_6 = L_46;
		// Ray fracPartSafeZoneRay = CalculateRayForSafeZone(origin, targetTransform, hand, fracPartSafeZoneClockwise, offsetBehavior);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3381));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_47 = ___origin0;
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_48 = ___targetTransform1;
		RuntimeObject* L_49 = ___hand2;
		int32_t L_50 = V_5;
		int32_t L_51 = ___offsetBehavior4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3390));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_52 = HandConstraint_CalculateRayForSafeZone_m53FC6B5BFD13ED4B6602A6B51EC38ED6F531FA86(L_47, L_48, L_49, L_50, L_51, (0.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3390));
		V_7 = L_52;
		// Vector3 direction = Vector3.Lerp(-intSafeZoneRay.direction, -fracPartSafeZoneRay.direction, fracOffset).normalized;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3382));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3391));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_53 = Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3391));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3392));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_54 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_53, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3392));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3393));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_55 = Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_7), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3393));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3394));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_56 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_55, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3394));
		float L_57 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3395));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_58 = Vector3_Lerp_m5BA75496B803820CC64079383956D73C6FD4A8A1(L_54, L_56, L_57, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3395));
		V_13 = L_58;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3396));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_59 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_13), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3396));
		V_8 = L_59;
		// return new Ray(origin + direction, -direction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3383));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_60 = ___origin0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_61 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3397));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_62 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_60, L_61, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3397));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_63 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3398));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_64 = Vector3_op_UnaryNegation_m2AFBBF22801F9BCA5A4EBE642A29F433FE1339C2(L_63, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3398));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3399));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_65;
		memset((&L_65), 0, sizeof(L_65));
		Ray__ctor_m695D219349B8AA4C82F96C55A27D384C07736F6B((&L_65), L_62, L_64, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3399));
		V_10 = L_65;
		goto IL_0124;
	}

IL_0124:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3384));
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_66 = V_10;
		return L_66;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsPalmFacingCamera(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128 (RuntimeObject* ___hand0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  V_0;
	memset((&V_0), 0, sizeof(V_0));
	bool V_1 = false;
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_2;
	memset((&V_2), 0, sizeof(V_2));
	bool V_3 = false;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___hand0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_IsPalmFacingCamera_m65860D24EEA5027D75E838038AE973B3C1366128_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3400));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3401));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3402));
		// MixedRealityPose? palmPose = GetPalmPose(hand);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3403));
		RuntimeObject* L_0 = ___hand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3410));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_1 = HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3410));
		V_0 = L_1;
		// if (palmPose.HasValue)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3404));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3411));
		bool L_2 = Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_inline((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_0), /*hidden argument*/Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3411));
		V_1 = L_2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3405));
		bool L_3 = V_1;
		if (!L_3)
		{
			goto IL_0041;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3406));
		// return (Vector3.Dot(palmPose.Value.Up, CameraCache.Main.transform.forward) > 0.0f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3407));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3412));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_4 = Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04((Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F *)(&V_0), /*hidden argument*/Nullable_1_get_Value_m29E5395FCB86DC0944D9E3CA0B4E41EC83D7AF04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3412));
		V_2 = L_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3413));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_5 = MixedRealityPose_get_Up_mB950FA9059CBB6EEE53990F744D5B30C756A63C0((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3413));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3414));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_6 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3414));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3415));
		NullCheck(L_6);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_7 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3415));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3416));
		NullCheck(L_7);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3416));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3417));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_9 = Vector3_Dot_m0C530E1C51278DE28B77906D56356506232272C1(L_5, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3417));
		V_3 = (bool)((((float)L_9) > ((float)(0.0f)))? 1 : 0);
		goto IL_0045;
	}

IL_0041:
	{
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3408));
		V_3 = (bool)0;
		goto IL_0045;
	}

IL_0045:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3409));
		bool L_10 = V_3;
		return L_10;
	}
}
// System.Nullable`1<Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose> Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::GetPalmPose(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898 (RuntimeObject* ___hand0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_0;
	memset((&V_0), 0, sizeof(V_0));
	RuntimeObject* V_1 = NULL;
	bool V_2 = false;
	Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  V_3;
	memset((&V_3), 0, sizeof(V_3));
	Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  V_4;
	memset((&V_4), 0, sizeof(V_4));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___hand0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_GetPalmPose_m05490B6D792E9672EBDA9DA5F0C72275A4DCD898_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3418));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3419));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3420));
		// if (hand is IMixedRealityHand jointedHand && jointedHand.TryGetJoint(TrackedHandJoint.Palm, out palmPose))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3421));
		RuntimeObject* L_0 = ___hand0;
		RuntimeObject* L_1 = ((RuntimeObject*)IsInst((RuntimeObject*)L_0, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var));
		V_1 = L_1;
		if (!L_1)
		{
			goto IL_0016;
		}
	}
	{
		RuntimeObject* L_2 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3427));
		NullCheck(L_2);
		bool L_3 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_2, 2, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_0));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3427));
		G_B3_0 = ((int32_t)(L_3));
		goto IL_0017;
	}

IL_0016:
	{
		G_B3_0 = 0;
	}

IL_0017:
	{
		V_2 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3422));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_0025;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3423));
		// return palmPose;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3424));
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_5 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3428));
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_6;
		memset((&L_6), 0, sizeof(L_6));
		Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8((&L_6), L_5, /*hidden argument*/Nullable_1__ctor_mAFC33BD5A5C371B81B50D07E65C04ADC836B10C8_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3428));
		V_3 = L_6;
		goto IL_0032;
	}

IL_0025:
	{
		// return null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3425));
		il2cpp_codegen_initobj((&V_4), sizeof(Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F ));
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_7 = V_4;
		V_3 = L_7;
		goto IL_0032;
	}

IL_0032:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3426));
		Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F  L_8 = V_3;
		return L_8;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::IsApplicableController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraint_IsApplicableController_m6A775EE0DA5665713600A1AB40CBBA60C2E480D0 (RuntimeObject* ___controller0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_IsApplicableController_m6A775EE0DA5665713600A1AB40CBBA60C2E480D0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___controller0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_IsApplicableController_m6A775EE0DA5665713600A1AB40CBBA60C2E480D0_RuntimeMethod_var, NULL, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3429));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3430));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3431));
		// return !controller.ControllerHandedness.IsNone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3432));
		RuntimeObject* L_0 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3434));
		NullCheck(L_0);
		uint8_t L_1 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3434));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3435));
		bool L_2 = HandednessExtensions_IsNone_m1A953AE3AE1161298BB8835B27ADA441AB56A50A(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3435));
		V_0 = (bool)((((int32_t)L_2) == ((int32_t)0))? 1 : 0);
		goto IL_0012;
	}

IL_0012:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3433));
		bool L_3 = V_0;
		return L_3;
	}
}
// Microsoft.MixedReality.Toolkit.Input.IMixedRealityController Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::GetController(Microsoft.MixedReality.Toolkit.Utilities.Handedness)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1 (uint8_t ___handedness0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  V_0;
	memset((&V_0), 0, sizeof(V_0));
	RuntimeObject* V_1 = NULL;
	bool V_2 = false;
	RuntimeObject* V_3 = NULL;
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___handedness0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_GetController_m8C164362D540BBC4A1E7816F586777D2111482B1_RuntimeMethod_var, NULL, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3436));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3437));
	Exception_t * __last_unhandled_exception = 0;
	NO_UNUSED_WARNING (__last_unhandled_exception);
	Exception_t * __exception_local = 0;
	NO_UNUSED_WARNING (__exception_local);
	void* __leave_targets_storage = alloca(sizeof(int32_t) * 2);
	il2cpp::utils::LeaveTargetStack __leave_targets(__leave_targets_storage);
	NO_UNUSED_WARNING (__leave_targets);
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3438));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3439));
		// foreach (IMixedRealityController c in CoreServices.InputSystem.DetectedControllers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3440));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3453));
		IL2CPP_RUNTIME_CLASS_INIT(CoreServices_t3A685C81FB6AC96F74F9279B54CD03754F1FF544_il2cpp_TypeInfo_var);
		RuntimeObject* L_0 = CoreServices_get_InputSystem_m4797E97A2258E0318F789F3291D646530225C3E8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3453));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3454));
		NullCheck(L_0);
		HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * L_1 = InterfaceFuncInvoker0< HashSet_1_t02265BFDCA60AA11C8DAAD2906D880F8171B5229 * >::Invoke(5 /* System.Collections.Generic.HashSet`1<Microsoft.MixedReality.Toolkit.Input.IMixedRealityController> Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem::get_DetectedControllers() */, IMixedRealityInputSystem_t5CCAA5BAD9D45403FCE5D1B3FEEB2E45BA65B22B_il2cpp_TypeInfo_var, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3454));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3455));
		NullCheck(L_1);
		Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD  L_2 = HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416(L_1, /*hidden argument*/HashSet_1_GetEnumerator_mA889029FA07B9D545D789ABAEF094BDF9A228416_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3455));
		V_0 = L_2;
	}

IL_0012:
	try
	{ // begin try (depth: 1)
		STORE_TRY_ID(methodExecutionContext, 0);
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3441));
			goto IL_0033;
		}

IL_0014:
		{
			// foreach (IMixedRealityController c in CoreServices.InputSystem.DetectedControllers)
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3442));
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3456));
			RuntimeObject* L_3 = Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_inline((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_0), /*hidden argument*/Enumerator_get_Current_m5C3D3DFB017C501D03F223E3463AB91458CC44B7_RuntimeMethod_var);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3456));
			V_1 = L_3;
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3443));
			// if (c.ControllerHandedness.IsMatch(handedness))
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3444));
			RuntimeObject* L_4 = V_1;
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3457));
			NullCheck(L_4);
			uint8_t L_5 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_4);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3457));
			uint8_t L_6 = ___handedness0;
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3458));
			bool L_7 = HandednessExtensions_IsMatch_mB143A26B3E75502CFDC2F6B846A2832033299813(L_5, L_6, /*hidden argument*/NULL);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3458));
			V_2 = L_7;
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3445));
			bool L_8 = V_2;
			if (!L_8)
			{
				goto IL_0032;
			}
		}

IL_002d:
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3446));
			// return c;
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3447));
			RuntimeObject* L_9 = V_1;
			V_3 = L_9;
			IL2CPP_LEAVE(0x51, FINALLY_003e);
		}

IL_0032:
		{
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3448));
		}

IL_0033:
		{
			// foreach (IMixedRealityController c in CoreServices.InputSystem.DetectedControllers)
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3449));
			STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3459));
			bool L_10 = Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_0), /*hidden argument*/Enumerator_MoveNext_m9B9126E05AE57185E1C1B2007019CB72B2D7E992_RuntimeMethod_var);
			CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3459));
			if (L_10)
			{
				goto IL_0014;
			}
		}

IL_003c:
		{
			IL2CPP_LEAVE(0x4D, FINALLY_003e);
		}
	} // end try (depth: 1)
	catch(Il2CppExceptionWrapper& e)
	{
		__last_unhandled_exception = (Exception_t *)e.ex;
		goto FINALLY_003e;
	}

FINALLY_003e:
	{ // begin finally (depth: 1)
		STORE_TRY_ID(methodExecutionContext, -1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3450));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3460));
		Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B((Enumerator_t42984CA33BF22C1464CD34BCEA40497BAFFD7DCD *)(&V_0), /*hidden argument*/Enumerator_Dispose_m3897751F5615B83A9E0565DD015002AE963DB69B_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3460));
		IL2CPP_END_FINALLY(62)
	} // end finally (depth: 1)
	IL2CPP_CLEANUP(62)
	{
		IL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)
		IL2CPP_JUMP_TBL(0x51, IL_0051)
		IL2CPP_JUMP_TBL(0x4D, IL_004d)
	}

IL_004d:
	{
		// return null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3451));
		V_3 = (RuntimeObject*)NULL;
		goto IL_0051;
	}

IL_0051:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3452));
		RuntimeObject* L_11 = V_3;
		return L_11;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3461));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3462));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3463));
		// base.OnEnable();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3464));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3475));
		Solver_OnEnable_m2C1DAD96179B3122345E5D8E147F4A0C9906E4E4(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3475));
		// handBounds = GetComponent<HandBounds>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3465));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3476));
		HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * L_0 = Component_GetComponent_TisHandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E_m4C730F9D6CDB58BF40E7306BEDB928C9CA4DB376(__this, /*hidden argument*/Component_GetComponent_TisHandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E_m4C730F9D6CDB58BF40E7306BEDB928C9CA4DB376_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3476));
		__this->set_handBounds_28(L_0);
		// trackedController = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3466));
		__this->set_trackedController_27((RuntimeObject*)NULL);
		// OnLastHandLost.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3467));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3477));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_1 = HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3477));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3478));
		NullCheck(L_1);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3478));
		// OnHandDeactivate.Invoke();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3468));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3479));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_2 = HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3479));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3480));
		NullCheck(L_2);
		UnityEvent_Invoke_mB2FA1C76256FE34D5E7F84ABE528AC61CE8A0325(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3480));
		// if (SolverHandler.TrackedTargetType != TrackedObjectType.HandJoint &&
		//     SolverHandler.TrackedTargetType != TrackedObjectType.ControllerRay)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3469));
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_3 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3481));
		NullCheck(L_3);
		int32_t L_4 = SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3481));
		if ((((int32_t)L_4) == ((int32_t)6)))
		{
			goto IL_0054;
		}
	}
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_5 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3482));
		NullCheck(L_5);
		int32_t L_6 = SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline(L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3482));
		G_B3_0 = ((((int32_t)((((int32_t)L_6) == ((int32_t)5))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0055;
	}

IL_0054:
	{
		G_B3_0 = 0;
	}

IL_0055:
	{
		V_0 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3470));
		bool L_7 = V_0;
		if (!L_7)
		{
			goto IL_0066;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3471));
		// Debug.LogWarning("Solver HandConstraint requires TrackedObjectType of type HandJoint or ControllerRay.");
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3472));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3483));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogWarning_m37338644DC81F640CCDFEAE35A223F0E965F0568(_stringLiteral354BAE277397EE63CBAD0D35735B3CDE930323D1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3483));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3473));
	}

IL_0066:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3474));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34 (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3484));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3485));
	{
		// private SolverSafeZone safeZone = SolverSafeZone.UlnarSide;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3486));
		__this->set_safeZone_14(0);
		// private float safeZoneBuffer = 0.15f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3487));
		__this->set_safeZoneBuffer_15((0.15f));
		// private bool updateWhenOppositeHandNear = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3488));
		__this->set_updateWhenOppositeHandNear_16((bool)0);
		// private bool hideHandCursorsOnActivate = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3489));
		__this->set_hideHandCursorsOnActivate_17((bool)1);
		// private SolverRotationBehavior rotationBehavior = SolverRotationBehavior.LookAtMainCamera;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3490));
		__this->set_rotationBehavior_18(2);
		// private SolverOffsetBehavior offsetBehavior = SolverOffsetBehavior.LookAtCameraRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3491));
		__this->set_offsetBehavior_19(0);
		// private float forwardOffset = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3492));
		__this->set_forwardOffset_20((0.0f));
		// private float safeZoneAngleOffset = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3493));
		__this->set_safeZoneAngleOffset_21((0.0f));
		// private UnityEvent onHandActivate = new UnityEvent();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3494));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3502));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F *)il2cpp_codegen_object_new(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F_il2cpp_TypeInfo_var);
		UnityEvent__ctor_m2F8C02F28E289CA65598FF4FA8EAB84D955FF028(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3502));
		__this->set_onHandActivate_22(L_0);
		// private UnityEvent onHandDeactivate = new UnityEvent();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3495));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3503));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_1 = (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F *)il2cpp_codegen_object_new(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F_il2cpp_TypeInfo_var);
		UnityEvent__ctor_m2F8C02F28E289CA65598FF4FA8EAB84D955FF028(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3503));
		__this->set_onHandDeactivate_23(L_1);
		// private UnityEvent onFirstHandDetected = new UnityEvent();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3496));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3504));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_2 = (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F *)il2cpp_codegen_object_new(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F_il2cpp_TypeInfo_var);
		UnityEvent__ctor_m2F8C02F28E289CA65598FF4FA8EAB84D955FF028(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3504));
		__this->set_onFirstHandDetected_24(L_2);
		// private UnityEvent onLastHandLost = new UnityEvent();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3497));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3505));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_3 = (UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F *)il2cpp_codegen_object_new(UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F_il2cpp_TypeInfo_var);
		UnityEvent__ctor_m2F8C02F28E289CA65598FF4FA8EAB84D955FF028(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3505));
		__this->set_onLastHandLost_25(L_3);
		// private Handedness previousHandedness = Handedness.None;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3498));
		__this->set_previousHandedness_26(0);
		// protected IMixedRealityController trackedController = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3499));
		__this->set_trackedController_27((RuntimeObject*)NULL);
		// protected HandBounds handBounds = null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3500));
		__this->set_handBounds_28((HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E *)NULL);
		// private readonly Quaternion handToWorldRotation = Quaternion.Euler(-90.0f, 0.0f, 180.0f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3501));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3506));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_4 = Quaternion_Euler_m537DD6CEAE0AD4274D8A84414C24C30730427D05((-90.0f), (0.0f), (180.0f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3506));
		__this->set_handToWorldRotation_29(L_4);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3507));
		Solver__ctor_m45C1467BE22F4DD1541D08434DD5A046F1099CAC(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3507));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraint__cctor_mB27CEFA3C5DC257CE9A952EFB9E6467F68EE52E6 (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint__cctor_mB27CEFA3C5DC257CE9A952EFB9E6467F68EE52E6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint__cctor_mB27CEFA3C5DC257CE9A952EFB9E6467F68EE52E6_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3508));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3509));
	{
		// private static readonly SolverSafeZone[] handSafeZonesClockWiseRightHand = new SolverSafeZone[] {
		//     SolverSafeZone.UlnarSide,
		//     SolverSafeZone.AboveFingerTips,
		//     SolverSafeZone.RadialSide,
		//     SolverSafeZone.BelowWrist
		// };
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3510));
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_0 = (SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90*)(SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90*)SZArrayNew(SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90_il2cpp_TypeInfo_var, (uint32_t)4);
		SolverSafeZoneU5BU5D_t18104AB97CB7830EBEB4E77A7D218047920B0E90* L_1 = L_0;
		RuntimeFieldHandle_t844BDF00E8E6FE69D9AEAA7657F09018B864F4EF  L_2 = { reinterpret_cast<intptr_t> (U3CPrivateImplementationDetailsU3E_t270952CDBCB3D37A83B43179171EFCB3BF0C3765____C9E3D331C8CC7E17B017EC19E05F5868E4A2D00B_10_FieldInfo_var) };
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3511));
		RuntimeHelpers_InitializeArray_m29F50CDFEEE0AB868200291366253DD4737BC76A((RuntimeArray *)(RuntimeArray *)L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3511));
		((HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_StaticFields*)il2cpp_codegen_static_fields_for(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var))->set_handSafeZonesClockWiseRightHand_13(L_1);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::.ctor(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, int32_t ___U3CU3E1__state0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62__ctor_m65941A64CC734F13325F4D3B97589E8D4DCC5617_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		int32_t L_0 = ___U3CU3E1__state0;
		__this->set_U3CU3E1__state_0(L_0);
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::System.IDisposable.Dispose()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void U3CToggleCursorsU3Ed__62_System_IDisposable_Dispose_m2D647784EF6EDA93F8ED92DD2778106F6E26D734 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62_System_IDisposable_Dispose_m2D647784EF6EDA93F8ED92DD2778106F6E26D734_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62_System_IDisposable_Dispose_m2D647784EF6EDA93F8ED92DD2778106F6E26D734_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::MoveNext()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool U3CToggleCursorsU3Ed__62_MoveNext_mB7C8B85FCBFFB594DA67437F9F664BD7A59D3718 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62_MoveNext_mB7C8B85FCBFFB594DA67437F9F664BD7A59D3718_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	bool V_2 = false;
	bool V_3 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62_MoveNext_mB7C8B85FCBFFB594DA67437F9F664BD7A59D3718_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3512));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3513));
	RuntimeObject* G_B15_0 = NULL;
	U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * G_B15_1 = NULL;
	RuntimeObject* G_B14_0 = NULL;
	U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * G_B14_1 = NULL;
	IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* G_B16_0 = NULL;
	U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * G_B16_1 = NULL;
	RuntimeObject* G_B19_0 = NULL;
	RuntimeObject* G_B18_0 = NULL;
	RuntimeObject* G_B21_0 = NULL;
	RuntimeObject* G_B20_0 = NULL;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3514));
		int32_t L_0 = __this->get_U3CU3E1__state_0();
		V_0 = L_0;
		int32_t L_1 = V_0;
		if (!L_1)
		{
			goto IL_0012;
		}
	}
	{
		goto IL_000c;
	}

IL_000c:
	{
		int32_t L_2 = V_0;
		if ((((int32_t)L_2) == ((int32_t)1)))
		{
			goto IL_0014;
		}
	}
	{
		goto IL_0016;
	}

IL_0012:
	{
		goto IL_0018;
	}

IL_0014:
	{
		goto IL_005e;
	}

IL_0016:
	{
		return (bool)0;
	}

IL_0018:
	{
		__this->set_U3CU3E1__state_0((-1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3515));
		// if (controller == null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3516));
		RuntimeObject* L_3 = __this->get_controller_2();
		V_1 = (bool)((((RuntimeObject*)(RuntimeObject*)L_3) == ((RuntimeObject*)(RuntimeObject *)NULL))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3517));
		bool L_4 = V_1;
		if (!L_4)
		{
			goto IL_0030;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3518));
		// yield break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3519));
		return (bool)0;
	}

IL_0030:
	{
		// if (hideHandCursorsOnActivate)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3520));
		HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * L_5 = __this->get_U3CU3E4__this_5();
		NullCheck(L_5);
		bool L_6 = L_5->get_hideHandCursorsOnActivate_17();
		V_2 = L_6;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3521));
		bool L_7 = V_2;
		if (!L_7)
		{
			goto IL_00f2;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3522));
		// if (frameDelay)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3523));
		bool L_8 = __this->get_frameDelay_4();
		V_3 = L_8;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3524));
		bool L_9 = V_3;
		if (!L_9)
		{
			goto IL_0066;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3525));
		// yield return null;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3526));
		__this->set_U3CU3E2__current_1(NULL);
		__this->set_U3CU3E1__state_0(1);
		return (bool)1;
	}

IL_005e:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3527));
		__this->set_U3CU3E1__state_0((-1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3528));
	}

IL_0066:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3529));
		// foreach (var pointer in controller?.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3530));
		RuntimeObject* L_10 = __this->get_controller_2();
		RuntimeObject* L_11 = L_10;
		G_B14_0 = L_11;
		G_B14_1 = __this;
		if (L_11)
		{
			G_B15_0 = L_11;
			G_B15_1 = __this;
			goto IL_0075;
		}
	}
	{
		G_B16_0 = ((IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778*)(NULL));
		G_B16_1 = G_B14_1;
		goto IL_007f;
	}

IL_0075:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3540));
		NullCheck(G_B15_0);
		RuntimeObject* L_12 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(4 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_InputSource() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, G_B15_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3540));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3541));
		NullCheck(L_12);
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_13 = InterfaceFuncInvoker0< IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* >::Invoke(0 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer[] Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource::get_Pointers() */, IMixedRealityInputSource_tE0E928A8AFA1825E798A69EB5D4BE993B8227ED2_il2cpp_TypeInfo_var, L_12);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3541));
		G_B16_0 = L_13;
		G_B16_1 = G_B15_1;
	}

IL_007f:
	{
		NullCheck(G_B16_1);
		G_B16_1->set_U3CU3Es__1_6(G_B16_0);
		__this->set_U3CU3Es__2_7(0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3531));
		goto IL_00da;
	}

IL_008d:
	{
		// foreach (var pointer in controller?.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3532));
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_14 = __this->get_U3CU3Es__1_6();
		int32_t L_15 = __this->get_U3CU3Es__2_7();
		NullCheck(L_14);
		int32_t L_16 = L_15;
		RuntimeObject* L_17 = (L_14)->GetAt(static_cast<il2cpp_array_size_t>(L_16));
		__this->set_U3CpointerU3E5__3_8(L_17);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3533));
		// pointer?.BaseCursor?.SetVisibility(visible);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3534));
		RuntimeObject* L_18 = __this->get_U3CpointerU3E5__3_8();
		RuntimeObject* L_19 = L_18;
		G_B18_0 = L_19;
		if (L_19)
		{
			G_B19_0 = L_19;
			goto IL_00ad;
		}
	}
	{
		goto IL_00c4;
	}

IL_00ad:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3542));
		NullCheck(G_B19_0);
		RuntimeObject* L_20 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(6 /* Microsoft.MixedReality.Toolkit.Input.IMixedRealityCursor Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer::get_BaseCursor() */, IMixedRealityPointer_tD7C4CF8940EB016597EF8CED76503F0D39A61C53_il2cpp_TypeInfo_var, G_B19_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3542));
		RuntimeObject* L_21 = L_20;
		G_B20_0 = L_21;
		if (L_21)
		{
			G_B21_0 = L_21;
			goto IL_00b8;
		}
	}
	{
		goto IL_00c4;
	}

IL_00b8:
	{
		bool L_22 = __this->get_visible_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3543));
		NullCheck(G_B21_0);
		InterfaceActionInvoker1< bool >::Invoke(8 /* System.Void Microsoft.MixedReality.Toolkit.Input.IMixedRealityCursor::SetVisibility(System.Boolean) */, IMixedRealityCursor_t5CB717D2AFE455FE2DC89AB280C35323D0670E05_il2cpp_TypeInfo_var, G_B21_0, L_22);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3543));
	}

IL_00c4:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3535));
		__this->set_U3CpointerU3E5__3_8((RuntimeObject*)NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3536));
		int32_t L_23 = __this->get_U3CU3Es__2_7();
		__this->set_U3CU3Es__2_7(((int32_t)il2cpp_codegen_add((int32_t)L_23, (int32_t)1)));
	}

IL_00da:
	{
		// foreach (var pointer in controller?.InputSource.Pointers)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3537));
		int32_t L_24 = __this->get_U3CU3Es__2_7();
		IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778* L_25 = __this->get_U3CU3Es__1_6();
		NullCheck(L_25);
		if ((((int32_t)L_24) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_25)->max_length)))))))
		{
			goto IL_008d;
		}
	}
	{
		__this->set_U3CU3Es__1_6((IMixedRealityPointerU5BU5D_t39DD1136CDE343C8864073AF61557AFC03AB3778*)NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3538));
	}

IL_00f2:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3539));
		return (bool)0;
	}
}
// System.Object Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::System.Collections.Generic.IEnumerator<System.Object>.get_Current()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * U3CToggleCursorsU3Ed__62_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_mBC8322915428F92D1D2256D0E289FB7D77F2FB48 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_mBC8322915428F92D1D2256D0E289FB7D77F2FB48_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62_System_Collections_Generic_IEnumeratorU3CSystem_ObjectU3E_get_Current_mBC8322915428F92D1D2256D0E289FB7D77F2FB48_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		RuntimeObject * L_0 = __this->get_U3CU3E2__current_1();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::System.Collections.IEnumerator.Reset()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010 * L_0 = (NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010 *)il2cpp_codegen_object_new(NotSupportedException_tE75B318D6590A02A5D9B29FD97409B1750FA0010_il2cpp_TypeInfo_var);
		NotSupportedException__ctor_mA121DE1CAC8F25277DEB489DC7771209D91CAE33(L_0, /*hidden argument*/NULL);
		IL2CPP_RAISE_MANAGED_EXCEPTION(L_0, U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_Reset_m17778DB5B2ABDE347A6FFF018FA303B999964577_RuntimeMethod_var);
	}
}
// System.Object Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint/<ToggleCursors>d__62::System.Collections.IEnumerator.get_Current()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_get_Current_m58BE25D249A46A1FB96E1AD0F31DEB1526F148F1 (U3CToggleCursorsU3Ed__62_t61006804B86B987E9E5765B40BC5BB58A9E04267 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_get_Current_m58BE25D249A46A1FB96E1AD0F31DEB1526F148F1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, U3CToggleCursorsU3Ed__62_System_Collections_IEnumerator_get_Current_m58BE25D249A46A1FB96E1AD0F31DEB1526F148F1_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		RuntimeObject * L_0 = __this->get_U3CU3E2__current_1();
		return L_0;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FacingCameraTrackingThreshold()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3544));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3545));
	{
		// get => facingCameraTrackingThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3546));
		float L_0 = __this->get_facingCameraTrackingThreshold_30();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FacingCameraTrackingThreshold(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3547));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3548));
	{
		// set => facingCameraTrackingThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3549));
		float L_0 = ___value0;
		__this->set_facingCameraTrackingThreshold_30(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FacingThreshold()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FacingThreshold_m2E776E1833A99123C3E9280F3C929632F1FD3F2B (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FacingThreshold_m2E776E1833A99123C3E9280F3C929632F1FD3F2B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FacingThreshold_m2E776E1833A99123C3E9280F3C929632F1FD3F2B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3550));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3551));
	{
		// get => FacingCameraTrackingThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3552));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3553));
		float L_0 = HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3553));
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FacingThreshold(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FacingThreshold_m03FD2A6DF4A7436A411AE268428CE36588D0E286 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FacingThreshold_m03FD2A6DF4A7436A411AE268428CE36588D0E286_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FacingThreshold_m03FD2A6DF4A7436A411AE268428CE36588D0E286_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3554));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3555));
	{
		// set => FacingCameraTrackingThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3556));
		float L_0 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3557));
		HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_inline(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3557));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_RequireFlatHand()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_get_RequireFlatHand_m0D9669EF45765191072940032B2E840DD042E169 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_RequireFlatHand_m0D9669EF45765191072940032B2E840DD042E169_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_RequireFlatHand_m0D9669EF45765191072940032B2E840DD042E169_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3558));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3559));
	{
		// get => requireFlatHand;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3560));
		bool L_0 = __this->get_requireFlatHand_31();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_RequireFlatHand(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_RequireFlatHand_m3387F5A62BF7E3DAE88B84B34718AA075C1FD95D (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_RequireFlatHand_m3387F5A62BF7E3DAE88B84B34718AA075C1FD95D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_RequireFlatHand_m3387F5A62BF7E3DAE88B84B34718AA075C1FD95D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3561));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3562));
	{
		// set => requireFlatHand = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3563));
		bool L_0 = ___value0;
		__this->set_requireFlatHand_31(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FlatHandThreshold()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FlatHandThreshold_m76D4C6D6B0190D15F69B83E7F07FA101D957A7DC (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FlatHandThreshold_m76D4C6D6B0190D15F69B83E7F07FA101D957A7DC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FlatHandThreshold_m76D4C6D6B0190D15F69B83E7F07FA101D957A7DC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3564));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3565));
	{
		// get => flatHandThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3566));
		float L_0 = __this->get_flatHandThreshold_32();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FlatHandThreshold(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FlatHandThreshold_m7124B66AA1E8EC680AFA472FB918040E840CFAA7 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FlatHandThreshold_m7124B66AA1E8EC680AFA472FB918040E840CFAA7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FlatHandThreshold_m7124B66AA1E8EC680AFA472FB918040E840CFAA7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3567));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3568));
	{
		// set => flatHandThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3569));
		float L_0 = ___value0;
		__this->set_flatHandThreshold_32(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FollowHandUntilFacingCamera()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_get_FollowHandUntilFacingCamera_m2B0A1D9323B72578781DBA2715759CC4FC3A2EF6 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FollowHandUntilFacingCamera_m2B0A1D9323B72578781DBA2715759CC4FC3A2EF6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FollowHandUntilFacingCamera_m2B0A1D9323B72578781DBA2715759CC4FC3A2EF6_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3570));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3571));
	{
		// get => followHandUntilFacingCamera;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3572));
		bool L_0 = __this->get_followHandUntilFacingCamera_33();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FollowHandUntilFacingCamera(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FollowHandUntilFacingCamera_m52AEC4E4BBEF9738EA4331F5EDB7B301DCD4FB9E (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FollowHandUntilFacingCamera_m52AEC4E4BBEF9738EA4331F5EDB7B301DCD4FB9E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FollowHandUntilFacingCamera_m52AEC4E4BBEF9738EA4331F5EDB7B301DCD4FB9E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3573));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3574));
	{
		// set => followHandUntilFacingCamera = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3575));
		bool L_0 = ___value0;
		__this->set_followHandUntilFacingCamera_33(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_FollowHandCameraFacingThresholdAngle()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FollowHandCameraFacingThresholdAngle_m6E198FCE5FCE44D8F7B00418707D3D090D94C94B (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FollowHandCameraFacingThresholdAngle_m6E198FCE5FCE44D8F7B00418707D3D090D94C94B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FollowHandCameraFacingThresholdAngle_m6E198FCE5FCE44D8F7B00418707D3D090D94C94B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3576));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3577));
	{
		// get => followHandCameraFacingThresholdAngle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3578));
		float L_0 = __this->get_followHandCameraFacingThresholdAngle_34();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_FollowHandCameraFacingThresholdAngle(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FollowHandCameraFacingThresholdAngle_m1E5D6374DB8EFF9246F753ADB2456ADC0BD47692 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FollowHandCameraFacingThresholdAngle_m1E5D6374DB8EFF9246F753ADB2456ADC0BD47692_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FollowHandCameraFacingThresholdAngle_m1E5D6374DB8EFF9246F753ADB2456ADC0BD47692_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3579));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3580));
	{
		// set => followHandCameraFacingThresholdAngle = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3581));
		float L_0 = ___value0;
		__this->set_followHandCameraFacingThresholdAngle_34(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_UseGazeActivation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_get_UseGazeActivation_m926C99CFCEB2615B8E3532E1534E58F7FA807C9E (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_UseGazeActivation_m926C99CFCEB2615B8E3532E1534E58F7FA807C9E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_UseGazeActivation_m926C99CFCEB2615B8E3532E1534E58F7FA807C9E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3582));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3583));
	{
		// get => useGazeActivation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3584));
		bool L_0 = __this->get_useGazeActivation_35();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_UseGazeActivation(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_UseGazeActivation_m249B7437DC9A549170548BA25F146DCAA6CA9D0A (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_UseGazeActivation_m249B7437DC9A549170548BA25F146DCAA6CA9D0A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_UseGazeActivation_m249B7437DC9A549170548BA25F146DCAA6CA9D0A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3585));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3586));
	{
		// set => useGazeActivation = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3587));
		bool L_0 = ___value0;
		__this->set_useGazeActivation_35(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_EyeGazeProximityThreshold()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_EyeGazeProximityThreshold_mBF50491FC3C68BE544F44EC54859390C9F0046C7 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_EyeGazeProximityThreshold_mBF50491FC3C68BE544F44EC54859390C9F0046C7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_EyeGazeProximityThreshold_mBF50491FC3C68BE544F44EC54859390C9F0046C7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3588));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3589));
	{
		// get => eyeGazeProximityThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3590));
		float L_0 = __this->get_eyeGazeProximityThreshold_36();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_EyeGazeProximityThreshold(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_EyeGazeProximityThreshold_m9AD44FB25243B67EEC2D22B87640D7222C8ABB6F (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_EyeGazeProximityThreshold_m9AD44FB25243B67EEC2D22B87640D7222C8ABB6F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_EyeGazeProximityThreshold_m9AD44FB25243B67EEC2D22B87640D7222C8ABB6F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3591));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3592));
	{
		// set => eyeGazeProximityThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3593));
		float L_0 = ___value0;
		__this->set_eyeGazeProximityThreshold_36(L_0);
		return;
	}
}
// System.Single Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::get_HeadGazeProximityThreshold()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_HeadGazeProximityThreshold_mE0AD784334BEE357804D986906D599BCD6D50E42 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_HeadGazeProximityThreshold_mE0AD784334BEE357804D986906D599BCD6D50E42_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_HeadGazeProximityThreshold_mE0AD784334BEE357804D986906D599BCD6D50E42_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3594));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3595));
	{
		// get => headGazeProximityThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3596));
		float L_0 = __this->get_headGazeProximityThreshold_37();
		return L_0;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::set_HeadGazeProximityThreshold(System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_HeadGazeProximityThreshold_mDA9F8BEC1717AB60E997505D6DDF4544ED4D87B6 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_HeadGazeProximityThreshold_mDA9F8BEC1717AB60E997505D6DDF4544ED4D87B6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_HeadGazeProximityThreshold_mDA9F8BEC1717AB60E997505D6DDF4544ED4D87B6_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3597));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3598));
	{
		// set => headGazeProximityThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3599));
		float L_0 = ___value0;
		__this->set_headGazeProximityThreshold_37(L_0);
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::IsValidController(Microsoft.MixedReality.Toolkit.Input.IMixedRealityController)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_IsValidController_mD977131BC6E203871C35BF7AD99807FC41A92C22 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___controller0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_IsValidController_mD977131BC6E203871C35BF7AD99807FC41A92C22_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	RuntimeObject* V_1 = NULL;
	bool V_2 = false;
	bool V_3 = false;
	bool V_4 = false;
	bool V_5 = false;
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_6;
	memset((&V_6), 0, sizeof(V_6));
	bool V_7 = false;
	float V_8 = 0.0f;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	bool V_12 = false;
	bool V_13 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___controller0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_6), (&V_8));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_IsValidController_mD977131BC6E203871C35BF7AD99807FC41A92C22_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3600));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3601));
	int32_t G_B16_0 = 0;
	int32_t G_B18_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3602));
		// if (!base.IsValidController(controller))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3603));
		RuntimeObject* L_0 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3651));
		bool L_1 = HandConstraint_IsValidController_m7D452FCFF4E386714B378D5377CE7A73916FD84B(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3651));
		V_2 = (bool)((((int32_t)L_1) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3604));
		bool L_2 = V_2;
		if (!L_2)
		{
			goto IL_0017;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3605));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3606));
		V_3 = (bool)0;
		goto IL_0122;
	}

IL_0017:
	{
		// if (!controller.IsPositionAvailable)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3607));
		RuntimeObject* L_3 = ___controller0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3652));
		NullCheck(L_3);
		bool L_4 = InterfaceFuncInvoker0< bool >::Invoke(6 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_IsPositionAvailable() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_3);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3652));
		V_4 = (bool)((((int32_t)L_4) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3608));
		bool L_5 = V_4;
		if (!L_5)
		{
			goto IL_002e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3609));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3610));
		V_3 = (bool)0;
		goto IL_0122;
	}

IL_002e:
	{
		// bool palmFacingThresholdMet = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3611));
		V_0 = (bool)0;
		// if (controller is IMixedRealityHand jointedHand)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3612));
		RuntimeObject* L_6 = ___controller0;
		RuntimeObject* L_7 = ((RuntimeObject*)IsInst((RuntimeObject*)L_6, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var));
		V_1 = L_7;
		V_5 = (bool)((!(((RuntimeObject*)(RuntimeObject*)L_7) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3613));
		bool L_8 = V_5;
		if (!L_8)
		{
			goto IL_011e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3614));
		// if (jointedHand.TryGetJoint(TrackedHandJoint.Palm, out MixedRealityPose palmPose))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3615));
		RuntimeObject* L_9 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3653));
		NullCheck(L_9);
		bool L_10 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_9, 2, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_6));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3653));
		V_7 = L_10;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3616));
		bool L_11 = V_7;
		if (!L_11)
		{
			goto IL_011a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3617));
		// float palmCameraAngle = Vector3.Angle(palmPose.Up, CameraCache.Main.transform.forward);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3618));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3654));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = MixedRealityPose_get_Up_mB950FA9059CBB6EEE53990F744D5B30C756A63C0((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_6), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3654));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3655));
		Camera_t48B2B9ECB3CE6108A98BF949A1CECF0FE3421F34 * L_13 = CameraCache_get_Main_m23FB3162F6476988FEE59F829DEAF08702D81554(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3655));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3656));
		NullCheck(L_13);
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_14 = Component_get_transform_m00F05BD782F920C301A7EBA480F3B7A904C07EC9(L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3656));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3657));
		NullCheck(L_14);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = Transform_get_forward_m0BE1E88B86049ADA39391C3ACED2314A624BC67F(L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3657));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3658));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_16 = Vector3_Angle_m8911FFA1DD1C8C46D923B52645B352FA1521CD5F(L_12, L_15, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3658));
		V_8 = L_16;
		// palmFacingThresholdMet = IsPalmMeetingThresholdRequirements(jointedHand, palmPose, palmCameraAngle);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3619));
		RuntimeObject* L_17 = V_1;
		MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  L_18 = V_6;
		float L_19 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3659));
		bool L_20 = HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC(__this, L_17, L_18, L_19, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3659));
		V_0 = L_20;
		// if (palmFacingThresholdMet)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3620));
		bool L_21 = V_0;
		V_9 = L_21;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3621));
		bool L_22 = V_9;
		if (!L_22)
		{
			goto IL_0103;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3622));
		// if (followHandUntilFacingCamera)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3623));
		bool L_23 = __this->get_followHandUntilFacingCamera_33();
		V_10 = L_23;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3624));
		bool L_24 = V_10;
		if (!L_24)
		{
			goto IL_00cd;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3625));
		// if (palmCameraAngle > followHandCameraFacingThresholdAngle)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3626));
		float L_25 = V_8;
		float L_26 = __this->get_followHandCameraFacingThresholdAngle_34();
		V_11 = (bool)((((float)L_25) > ((float)L_26))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3627));
		bool L_27 = V_11;
		if (!L_27)
		{
			goto IL_00ba;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3628));
		// RotationBehavior = SolverRotationBehavior.LookAtTrackedObject;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3629));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3660));
		HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_inline(__this, 3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3660));
		// OffsetBehavior = SolverOffsetBehavior.TrackedObjectRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3630));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3661));
		HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_inline(__this, 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3661));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3631));
		goto IL_00cc;
	}

IL_00ba:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3632));
		// RotationBehavior = SolverRotationBehavior.LookAtMainCamera;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3633));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3662));
		HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_inline(__this, 2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3662));
		// OffsetBehavior = SolverOffsetBehavior.LookAtCameraRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3634));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3663));
		HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_inline(__this, 0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3663));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3635));
	}

IL_00cc:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3636));
	}

IL_00cd:
	{
		// if (useGazeActivation && (!gazeActivationAlreadyTriggered || !SolverHandler.UpdateSolvers))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3637));
		bool L_28 = __this->get_useGazeActivation_35();
		if (!L_28)
		{
			goto IL_00f0;
		}
	}
	{
		bool L_29 = __this->get_gazeActivationAlreadyTriggered_38();
		if (!L_29)
		{
			goto IL_00ed;
		}
	}
	{
		SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * L_30 = ((Solver_t79AE87802ED7C51B02E35D03DF67E057377E1011 *)__this)->get_SolverHandler_12();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3664));
		NullCheck(L_30);
		bool L_31 = SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4_inline(L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3664));
		G_B16_0 = ((((int32_t)L_31) == ((int32_t)0))? 1 : 0);
		goto IL_00ee;
	}

IL_00ed:
	{
		G_B16_0 = 1;
	}

IL_00ee:
	{
		G_B18_0 = G_B16_0;
		goto IL_00f1;
	}

IL_00f0:
	{
		G_B18_0 = 0;
	}

IL_00f1:
	{
		V_12 = (bool)G_B18_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3638));
		bool L_32 = V_12;
		if (!L_32)
		{
			goto IL_0102;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3639));
		// return IsUserGazeMeetingThresholdRequirements(jointedHand);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3640));
		RuntimeObject* L_33 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3665));
		bool L_34 = HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C(__this, L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3665));
		V_3 = L_34;
		goto IL_0122;
	}

IL_0102:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3641));
	}

IL_0103:
	{
		// if (!palmFacingThresholdMet)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3642));
		bool L_35 = V_0;
		V_13 = (bool)((((int32_t)L_35) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3643));
		bool L_36 = V_13;
		if (!L_36)
		{
			goto IL_0116;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3644));
		// gazeActivationAlreadyTriggered = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3645));
		__this->set_gazeActivationAlreadyTriggered_38((bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3646));
	}

IL_0116:
	{
		// return palmFacingThresholdMet;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3647));
		bool L_37 = V_0;
		V_3 = L_37;
		goto IL_0122;
	}

IL_011a:
	{
		// return palmFacingThresholdMet;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3648));
		bool L_38 = V_0;
		V_3 = L_38;
		goto IL_0122;
	}

IL_011e:
	{
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3649));
		V_3 = (bool)1;
		goto IL_0122;
	}

IL_0122:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3650));
		bool L_39 = V_3;
		return L_39;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::IsPalmMeetingThresholdRequirements(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  ___palmPose1, float ___palmCameraAngle2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_1;
	memset((&V_1), 0, sizeof(V_1));
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_2;
	memset((&V_2), 0, sizeof(V_2));
	bool V_3 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_4;
	memset((&V_4), 0, sizeof(V_4));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_5;
	memset((&V_5), 0, sizeof(V_5));
	bool V_6 = false;
	bool V_7 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___jointedHand0), (&___palmPose1), (&___palmCameraAngle2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1), (&V_2), (&V_4));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_IsPalmMeetingThresholdRequirements_mDD0D6BFC5AC4C55F4681B57C83FB1838565EFBBC_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3666));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3667));
	int32_t G_B4_0 = 0;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B7_0;
	memset((&G_B7_0), 0, sizeof(G_B7_0));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B6_0;
	memset((&G_B6_0), 0, sizeof(G_B6_0));
	float G_B8_0 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  G_B8_1;
	memset((&G_B8_1), 0, sizeof(G_B8_1));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3668));
		// if (requireFlatHand)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3669));
		bool L_0 = __this->get_requireFlatHand_31();
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3670));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_00a5;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3671));
		// if (jointedHand.TryGetJoint(TrackedHandJoint.IndexTip, out indexTipPose) &&
		//     jointedHand.TryGetJoint(TrackedHandJoint.RingTip, out ringTipPose))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3672));
		RuntimeObject* L_2 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3685));
		NullCheck(L_2);
		bool L_3 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_2, ((int32_t)11), (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3685));
		if (!L_3)
		{
			goto IL_0027;
		}
	}
	{
		RuntimeObject* L_4 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3686));
		NullCheck(L_4);
		bool L_5 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_4, ((int32_t)21), (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3686));
		G_B4_0 = ((int32_t)(L_5));
		goto IL_0028;
	}

IL_0027:
	{
		G_B4_0 = 0;
	}

IL_0028:
	{
		V_3 = (bool)G_B4_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3673));
		bool L_6 = V_3;
		if (!L_6)
		{
			goto IL_00a4;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3674));
		// var handNormal = Vector3.Cross(indexTipPose.Position - palmPose.Position,
		//                                ringTipPose.Position - indexTipPose.Position).normalized;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3675));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3687));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_7 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3687));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3688));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&___palmPose1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3688));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3689));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_7, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3689));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3690));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3690));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3691));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3691));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3692));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_12 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_10, L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3692));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3693));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_13 = Vector3_Cross_m3E9DBC445228FDB850BDBB4B01D6F61AC0111887(L_9, L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3693));
		V_5 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3694));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3694));
		V_4 = L_14;
		// handNormal *= (jointedHand.ControllerHandedness == Handedness.Right) ? 1.0f : -1.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3676));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = V_4;
		RuntimeObject* L_16 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3695));
		NullCheck(L_16);
		uint8_t L_17 = InterfaceFuncInvoker0< uint8_t >::Invoke(3 /* Microsoft.MixedReality.Toolkit.Utilities.Handedness Microsoft.MixedReality.Toolkit.Input.IMixedRealityController::get_ControllerHandedness() */, IMixedRealityController_tA6E280BFC4D9FE24AADF2C8FC2150A7872D3E671_il2cpp_TypeInfo_var, L_16);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3695));
		G_B6_0 = L_15;
		if ((((int32_t)L_17) == ((int32_t)2)))
		{
			G_B7_0 = L_15;
			goto IL_0075;
		}
	}
	{
		G_B8_0 = (-1.0f);
		G_B8_1 = G_B6_0;
		goto IL_007a;
	}

IL_0075:
	{
		G_B8_0 = (1.0f);
		G_B8_1 = G_B7_0;
	}

IL_007a:
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3696));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(G_B8_1, G_B8_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3696));
		V_4 = L_18;
		// if (Vector3.Angle(palmPose.Up, handNormal) > flatHandThreshold)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3677));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3697));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = MixedRealityPose_get_Up_mB950FA9059CBB6EEE53990F744D5B30C756A63C0((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&___palmPose1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3697));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3698));
		float L_21 = Vector3_Angle_m8911FFA1DD1C8C46D923B52645B352FA1521CD5F(L_19, L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3698));
		float L_22 = __this->get_flatHandThreshold_32();
		V_6 = (bool)((((float)L_21) > ((float)L_22))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3678));
		bool L_23 = V_6;
		if (!L_23)
		{
			goto IL_00a3;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3679));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3680));
		V_7 = (bool)0;
		goto IL_00b2;
	}

IL_00a3:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3681));
	}

IL_00a4:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3682));
	}

IL_00a5:
	{
		// return palmCameraAngle < facingCameraTrackingThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3683));
		float L_24 = ___palmCameraAngle2;
		float L_25 = __this->get_facingCameraTrackingThreshold_30();
		V_7 = (bool)((((float)L_24) < ((float)L_25))? 1 : 0);
		goto IL_00b2;
	}

IL_00b2:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3684));
		bool L_26 = V_7;
		return L_26;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::IsUserGazeMeetingThresholdRequirements(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  V_0;
	memset((&V_0), 0, sizeof(V_0));
	bool V_1 = false;
	bool V_2 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_3;
	memset((&V_3), 0, sizeof(V_3));
	Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED  V_4;
	memset((&V_4), 0, sizeof(V_4));
	float V_5 = 0.0f;
	bool V_6 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_7;
	memset((&V_7), 0, sizeof(V_7));
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_8;
	memset((&V_8), 0, sizeof(V_8));
	float V_9 = 0.0f;
	float V_10 = 0.0f;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_11;
	memset((&V_11), 0, sizeof(V_11));
	bool V_12 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___jointedHand0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_3), (&V_4), (&V_5), (&V_7), (&V_8), (&V_9), (&V_10));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_IsUserGazeMeetingThresholdRequirements_m449DAE024D13D03DCDC6F0A5804AE53017B55A7C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3699));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3700));
	int32_t G_B3_0 = 0;
	int32_t G_B7_0 = 0;
	float G_B11_0 = 0.0f;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3701));
		// bool usedEyeGaze = InputRayUtils.TryGetRay(InputSourceType.Eyes, Handedness.Any, out gazeRay);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3702));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3718));
		bool L_0 = InputRayUtils_TryGetRay_m90ECCB18366EF1AF38E75715F51C33DDD071ED01(5, 7, (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3718));
		V_1 = L_0;
		// if (usedEyeGaze || InputRayUtils.TryGetRay(InputSourceType.Head, Handedness.Any, out gazeRay))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3703));
		bool L_1 = V_1;
		if (L_1)
		{
			goto IL_0019;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3719));
		bool L_2 = InputRayUtils_TryGetRay_m90ECCB18366EF1AF38E75715F51C33DDD071ED01(4, 7, (Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3719));
		G_B3_0 = ((int32_t)(L_2));
		goto IL_001a;
	}

IL_0019:
	{
		G_B3_0 = 1;
	}

IL_001a:
	{
		V_2 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3704));
		bool L_3 = V_2;
		if (!L_3)
		{
			goto IL_00b0;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3705));
		// if (TryGenerateHandPlaneAndActivationPoint(jointedHand, out handPlane, out activationPoint) &&
		//     handPlane.Raycast(gazeRay, out distanceToHandPlane))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3706));
		RuntimeObject* L_4 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3720));
		bool L_5 = HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1(__this, L_4, (Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED *)(&V_4), (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3720));
		if (!L_5)
		{
			goto IL_003b;
		}
	}
	{
		Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2  L_6 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3721));
		bool L_7 = Plane_Raycast_m04E61D7C78A5DA70F4F73F9805ABB54177B799A9((Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED *)(&V_4), L_6, (float*)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3721));
		G_B7_0 = ((int32_t)(L_7));
		goto IL_003c;
	}

IL_003b:
	{
		G_B7_0 = 0;
	}

IL_003c:
	{
		V_6 = (bool)G_B7_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3707));
		bool L_8 = V_6;
		if (!L_8)
		{
			goto IL_00af;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3708));
		// Vector3 gazePosOnPlane = gazeRay.origin + gazeRay.direction.normalized * distanceToHandPlane;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3709));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3722));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = Ray_get_origin_m3773CA7B1E2F26F6F1447652B485D86C0BEC5187((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3722));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3723));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = Ray_get_direction_m9E6468CD87844B437FC4B93491E63D388322F76E((Ray_tE2163D4CB3E6B267E29F8ABE41684490E4A614B2 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3723));
		V_11 = L_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3724));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_11 = Vector3_get_normalized_mE20796F1D2D36244FACD4D14DADB245BE579849B((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_11), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3724));
		float L_12 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3725));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_13 = Vector3_op_Multiply_m1C5F07723615156ACF035D88A1280A9E8F35A04E(L_11, L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3725));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3726));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_14 = Vector3_op_Addition_m929F9C17E5D11B94D50B4AFF1D730B70CB59B50E(L_9, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3726));
		V_7 = L_14;
		// Vector3 planePos = handPlane.ClosestPointOnPlane(gazePosOnPlane);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3710));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_15 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3727));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_16 = Plane_ClosestPointOnPlane_m5BD59F43459CAC4A3CEA9F763455C23E3162A4AE((Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED *)(&V_4), L_15, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3727));
		V_8 = L_16;
		// float gazePosDistToActivationPosition = (activationPoint - planePos).sqrMagnitude;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3711));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = V_3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = V_8;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3728));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = Vector3_op_Subtraction_mF9846B723A5034F8B9F5F5DCB78E3D67649143D3(L_17, L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3728));
		V_11 = L_19;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3729));
		float L_20 = Vector3_get_sqrMagnitude_m1C6E190B4A933A183B308736DEC0DD64B0588968((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_11), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3729));
		V_9 = L_20;
		// float gazeActivationThreshold = usedEyeGaze ? eyeGazeProximityThreshold : headGazeProximityThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3712));
		bool L_21 = V_1;
		if (L_21)
		{
			goto IL_0091;
		}
	}
	{
		float L_22 = __this->get_headGazeProximityThreshold_37();
		G_B11_0 = L_22;
		goto IL_0097;
	}

IL_0091:
	{
		float L_23 = __this->get_eyeGazeProximityThreshold_36();
		G_B11_0 = L_23;
	}

IL_0097:
	{
		V_10 = G_B11_0;
		// gazeActivationAlreadyTriggered = (gazePosDistToActivationPosition < gazeActivationThreshold);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3713));
		float L_24 = V_9;
		float L_25 = V_10;
		__this->set_gazeActivationAlreadyTriggered_38((bool)((((float)L_24) < ((float)L_25))? 1 : 0));
		// return gazeActivationAlreadyTriggered;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3714));
		bool L_26 = __this->get_gazeActivationAlreadyTriggered_38();
		V_12 = L_26;
		goto IL_00b5;
	}

IL_00af:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3715));
	}

IL_00b0:
	{
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3716));
		V_12 = (bool)0;
		goto IL_00b5;
	}

IL_00b5:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3717));
		bool L_27 = V_12;
		return L_27;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::StartWorldLockReattachCheckCoroutine()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_StartWorldLockReattachCheckCoroutine_m137A67F6168C0B173BF8DC8B8A41C4919E8FED44 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_StartWorldLockReattachCheckCoroutine_m137A67F6168C0B173BF8DC8B8A41C4919E8FED44_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_StartWorldLockReattachCheckCoroutine_m137A67F6168C0B173BF8DC8B8A41C4919E8FED44_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3730));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3731));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3732));
		// StartCoroutine(WorldLockedReattachCheck());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3733));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3735));
		RuntimeObject* L_0 = HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3735));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3736));
		MonoBehaviour_StartCoroutine_mBF8044CE06A35D76A69669ADD8977D05956616B7(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3736));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3734));
		return;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::TryGenerateHandPlaneAndActivationPoint(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,UnityEngine.Plane&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * ___handPlane1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___activationPoint2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_0;
	memset((&V_0), 0, sizeof(V_0));
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_1;
	memset((&V_1), 0, sizeof(V_1));
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_2;
	memset((&V_2), 0, sizeof(V_2));
	bool V_3 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_4;
	memset((&V_4), 0, sizeof(V_4));
	bool V_5 = false;
	bool V_6 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___jointedHand0), (&___handPlane1), (&___activationPoint2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_4));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_TryGenerateHandPlaneAndActivationPoint_m5F25F7055FF3DA610E7300EEDDF2BE2691912CF1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3737));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3738));
	int32_t G_B4_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3739));
		// if (jointedHand.TryGetJoint(TrackedHandJoint.IndexKnuckle, out indexKnuckle) &&
		//     jointedHand.TryGetJoint(TrackedHandJoint.PinkyKnuckle, out pinkyKnuckle) &&
		//     jointedHand.TryGetJoint(TrackedHandJoint.Wrist, out wrist))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3740));
		RuntimeObject* L_0 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3757));
		NullCheck(L_0);
		bool L_1 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_0, 8, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_0));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3757));
		if (!L_1)
		{
			goto IL_0023;
		}
	}
	{
		RuntimeObject* L_2 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3758));
		NullCheck(L_2);
		bool L_3 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_2, ((int32_t)23), (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_1));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3758));
		if (!L_3)
		{
			goto IL_0023;
		}
	}
	{
		RuntimeObject* L_4 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3759));
		NullCheck(L_4);
		bool L_5 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_4, 1, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3759));
		G_B4_0 = ((int32_t)(L_5));
		goto IL_0024;
	}

IL_0023:
	{
		G_B4_0 = 0;
	}

IL_0024:
	{
		V_3 = (bool)G_B4_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3741));
		bool L_6 = V_3;
		if (!L_6)
		{
			goto IL_007d;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3742));
		// handPlane = new Plane(indexKnuckle.Position, pinkyKnuckle.Position, wrist.Position);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3743));
		Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * L_7 = ___handPlane1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3760));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3760));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3761));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_9 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_1), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3761));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3762));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3762));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3763));
		Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED  L_11;
		memset((&L_11), 0, sizeof(L_11));
		Plane__ctor_m231D58E7BD9DADE44EFD56F5B13677CF81ACD64C((&L_11), L_8, L_9, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3763));
		*(Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED *)L_7 = L_11;
		// if (TryGenerateActivationPoint(jointedHand, out generatedActivationPoint))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3744));
		RuntimeObject* L_12 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3764));
		bool L_13 = HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75(__this, L_12, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_4), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3764));
		V_5 = L_13;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3745));
		bool L_14 = V_5;
		if (!L_14)
		{
			goto IL_006c;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3746));
		// activationPoint = handPlane.ClosestPointOnPlane(generatedActivationPoint);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3747));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_15 = ___activationPoint2;
		Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * L_16 = ___handPlane1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3765));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = Plane_ClosestPointOnPlane_m5BD59F43459CAC4A3CEA9F763455C23E3162A4AE((Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED *)L_16, L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3765));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_15 = L_18;
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3748));
		V_6 = (bool)1;
		goto IL_0095;
	}

IL_006c:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3749));
		// activationPoint = Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3750));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_19 = ___activationPoint2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3766));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_20 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3766));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_19 = L_20;
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3751));
		V_6 = (bool)0;
		goto IL_0095;
	}

IL_007d:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3752));
		// handPlane = new Plane();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3753));
		Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED * L_21 = ___handPlane1;
		il2cpp_codegen_initobj(L_21, sizeof(Plane_t0903921088DEEDE1BCDEA5BF279EDBCFC9679AED ));
		// activationPoint = Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3754));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_22 = ___activationPoint2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3767));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_23 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3767));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_22 = L_23;
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3755));
		V_6 = (bool)0;
		goto IL_0095;
	}

IL_0095:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3756));
		bool L_24 = V_6;
		return L_24;
	}
}
// System.Boolean Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::TryGenerateActivationPoint(Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, RuntimeObject* ___jointedHand0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___activationPoint1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	int32_t V_1 = 0;
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_2;
	memset((&V_2), 0, sizeof(V_2));
	MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45  V_3;
	memset((&V_3), 0, sizeof(V_3));
	int32_t V_4 = 0;
	bool V_5 = false;
	bool V_6 = false;
	bool V_7 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___jointedHand0), (&___activationPoint1));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_TryGenerateActivationPoint_m58BC6CC78486F6C6667542FC1B1B5E0FCB5B3F75_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3768));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3769));
	int32_t G_B12_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3770));
		// activationPoint = Vector3.zero;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3771));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_0 = ___activationPoint1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3800));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_1 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3800));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_0 = L_1;
		// switch (SafeZone)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3772));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3801));
		int32_t L_2 = HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3801));
		V_4 = L_2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3773));
		int32_t L_3 = V_4;
		switch (L_3)
		{
			case 0:
			{
				goto IL_006d;
			}
			case 1:
			{
				goto IL_0067;
			}
			case 2:
			{
				goto IL_0031;
			}
			case 3:
			{
				goto IL_0039;
			}
			case 4:
			{
				goto IL_0061;
			}
		}
	}
	{
		goto IL_006d;
	}

IL_0031:
	{
		// referenceJoint1 = TrackedHandJoint.MiddleTip;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3774));
		V_0 = ((int32_t)16);
		// referenceJoint2 = TrackedHandJoint.RingTip;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3775));
		V_1 = ((int32_t)21);
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3776));
		goto IL_0074;
	}

IL_0039:
	{
		// if (jointedHand.TryGetJoint(TrackedHandJoint.Wrist, out referenceJointPose1))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3777));
		RuntimeObject* L_4 = ___jointedHand0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3802));
		NullCheck(L_4);
		bool L_5 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_4, 1, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3802));
		V_5 = L_5;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3778));
		bool L_6 = V_5;
		if (!L_6)
		{
			goto IL_005b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3779));
		// activationPoint = referenceJointPose1.Position;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3780));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_7 = ___activationPoint1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3803));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_8 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3803));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_7 = L_8;
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3781));
		V_6 = (bool)1;
		goto IL_00bd;
	}

IL_005b:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3782));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3783));
		V_6 = (bool)0;
		goto IL_00bd;
	}

IL_0061:
	{
		// referenceJoint1 = TrackedHandJoint.Palm;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3784));
		V_0 = 2;
		// referenceJoint2 = TrackedHandJoint.Palm;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3785));
		V_1 = 2;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3786));
		goto IL_0074;
	}

IL_0067:
	{
		// referenceJoint1 = TrackedHandJoint.IndexKnuckle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3787));
		V_0 = 8;
		// referenceJoint2 = TrackedHandJoint.ThumbProximalJoint;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3788));
		V_1 = 4;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3789));
		goto IL_0074;
	}

IL_006d:
	{
		// referenceJoint1 = TrackedHandJoint.PinkyKnuckle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3790));
		V_0 = ((int32_t)23);
		// referenceJoint2 = TrackedHandJoint.Wrist;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3791));
		V_1 = 1;
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3792));
		goto IL_0074;
	}

IL_0074:
	{
		// if (!jointedHand.TryGetJoint(referenceJoint1, out referenceJointPose1) ||
		//     !jointedHand.TryGetJoint(referenceJoint2, out referenceJointPose2))
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3793));
		RuntimeObject* L_9 = ___jointedHand0;
		int32_t L_10 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3804));
		NullCheck(L_9);
		bool L_11 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_9, L_10, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3804));
		if (!L_11)
		{
			goto IL_008d;
		}
	}
	{
		RuntimeObject* L_12 = ___jointedHand0;
		int32_t L_13 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3805));
		NullCheck(L_12);
		bool L_14 = InterfaceFuncInvoker2< bool, int32_t, MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 * >::Invoke(0 /* System.Boolean Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand::TryGetJoint(Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint,Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose&) */, IMixedRealityHand_t5D2E2914E93365AF052B9DE664513E720951514C_il2cpp_TypeInfo_var, L_12, L_13, (MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_3));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3805));
		G_B12_0 = ((((int32_t)L_14) == ((int32_t)0))? 1 : 0);
		goto IL_008e;
	}

IL_008d:
	{
		G_B12_0 = 1;
	}

IL_008e:
	{
		V_7 = (bool)G_B12_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3794));
		bool L_15 = V_7;
		if (!L_15)
		{
			goto IL_009a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3795));
		// return false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3796));
		V_6 = (bool)0;
		goto IL_00bd;
	}

IL_009a:
	{
		// activationPoint = Vector3.Lerp(referenceJointPose1.Position, referenceJointPose2.Position, .5f);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3797));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_16 = ___activationPoint1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3806));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_17 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3806));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3807));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_18 = MixedRealityPose_get_Position_mF175BAE3270E5432E605BDD5FD1FA5F722B24AEE((MixedRealityPose_tB91C13927D4C609825580E7DACDB4A550F3F0F45 *)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3807));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3808));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_19 = Vector3_Lerp_m5BA75496B803820CC64079383956D73C6FD4A8A1(L_17, L_18, (0.5f), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3808));
		*(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_16 = L_19;
		// return true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3798));
		V_6 = (bool)1;
		goto IL_00bd;
	}

IL_00bd:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3799));
		bool L_20 = V_6;
		return L_20;
	}
}
// System.Collections.IEnumerator Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::WorldLockedReattachCheck()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_WorldLockedReattachCheck_mC2AC5FE09E28CEBE2AEC70F5B97D05381EB72A41_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0 * L_0 = (U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0 *)il2cpp_codegen_object_new(U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0_il2cpp_TypeInfo_var);
		U3CWorldLockedReattachCheckU3Ed__42__ctor_mB072D2A912BD0F48ECFC2C53B3CB50FBF67EA974(L_0, 0, /*hidden argument*/NULL);
		U3CWorldLockedReattachCheckU3Ed__42_t146967D049C9009729CF8588DA336CD3F43F2CD0 * L_1 = L_0;
		NullCheck(L_1);
		L_1->set_U3CU3E4__this_2(__this);
		return L_1;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::OnEnable()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp_OnEnable_mB4F85EBC314406673C36DEA7A748E58C3CF27EE1 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_OnEnable_mB4F85EBC314406673C36DEA7A748E58C3CF27EE1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_OnEnable_mB4F85EBC314406673C36DEA7A748E58C3CF27EE1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3809));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3810));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3811));
		// base.OnEnable();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3812));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3815));
		HandConstraint_OnEnable_m0115496A31394BF8FA68BE9713246A6FC66024F7(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3815));
		// gazeActivationAlreadyTriggered = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3813));
		__this->set_gazeActivationAlreadyTriggered_38((bool)0);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3814));
		return;
	}
}
// System.Void Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void HandConstraintPalmUp__ctor_m789CD04DCDBF06802429647197398D1359D563F4 (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp__ctor_m789CD04DCDBF06802429647197398D1359D563F4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp__ctor_m789CD04DCDBF06802429647197398D1359D563F4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3816));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3817));
	{
		// private float facingCameraTrackingThreshold = 80.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3818));
		__this->set_facingCameraTrackingThreshold_30((80.0f));
		// private bool requireFlatHand = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3819));
		__this->set_requireFlatHand_31((bool)0);
		// private float flatHandThreshold = 45.0f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3820));
		__this->set_flatHandThreshold_32((45.0f));
		// private bool followHandUntilFacingCamera = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3821));
		__this->set_followHandUntilFacingCamera_33((bool)0);
		// private float followHandCameraFacingThresholdAngle = 60f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3822));
		__this->set_followHandCameraFacingThresholdAngle_34((60.0f));
		// private bool useGazeActivation = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3823));
		__this->set_useGazeActivation_35((bool)0);
		// private float eyeGazeProximityThreshold = .01f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3824));
		__this->set_eyeGazeProximityThreshold_36((0.01f));
		// private float headGazeProximityThreshold = .04f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3825));
		__this->set_headGazeProximityThreshold_37((0.04f));
		// private bool gazeActivationAlreadyTriggered = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3826));
		__this->set_gazeActivationAlreadyTriggered_38((bool)0);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3827));
		IL2CPP_RUNTIME_CLASS_INIT(HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A_il2cpp_TypeInfo_var);
		HandConstraint__ctor_m6EFCD9BAB94EAD38FE02880D06BF58E6B4B30B34(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3827));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_inline (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_CylinderMesh_mB4D1A64948781E0E447363352C9350AA37FD5A92_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 644));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 645));
	{
		// public Mesh CylinderMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 646));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = __this->get_U3CCylinderMeshU3Ek__BackingField_24();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_inline (GridObjectCollection_tAA32F8B1DA3ECCBFF6807495E876FCD36FE6DFC4 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, GridObjectCollection_get_SphereMesh_m1A1D5A6A84EEE8A9FDF4ED5B727020CFB5285113_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 638));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 639));
	{
		// public Mesh SphereMesh { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 640));
		Mesh_t6106B8D8E4C691321581AB0445552EC78B947B8C * L_0 = __this->get_U3CSphereMeshU3Ek__BackingField_23();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_get_CurrentScalePercent_mAE5DFA7EC91DCE5530F342DC86F72DD5BF70A8F3_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1731));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1732));
	{
		// public float CurrentScalePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1733));
		float L_0 = __this->get_U3CCurrentScalePercentU3Ek__BackingField_21();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851A_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851AMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_AltScale_mD05895C9187EB7CCAEC6957EB020D1D507B8851A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5150));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5151));
	{
		// public Vector3Smoothed AltScale { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5152));
		Vector3Smoothed_tF6A4C81C95F58D5620F05043EF2DECB78FC988C6  L_0 = __this->get_U3CAltScaleU3Ek__BackingField_16();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_CurrentDistancePercent_m85B9788957BF196998566BC728DFEBDE3D6F9308_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1740));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1741));
	{
		// public float CurrentDistancePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1742));
		float L_0 = ___value0;
		__this->set_U3CCurrentDistancePercentU3Ek__BackingField_22(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_CurrentScalePercent_m5C20870C52A9F42E68C776F3B1BD21B4A1318267_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1734));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1735));
	{
		// public float CurrentScalePercent { get; private set; } = 1f;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1736));
		float L_0 = ___value0;
		__this->set_U3CCurrentScalePercentU3Ek__BackingField_21(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_DeltaTime_mD1BE654F6B6727288FCDBE16E232E66C02258F82_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5156));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5157));
	{
		// public float DeltaTime { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5158));
		float L_0 = __this->get_U3CDeltaTimeU3Ek__BackingField_17();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_inline (ConstantViewSize_tE25B1B9009965C08B8D6B962C7D4723B9B64829C * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, ConstantViewSize_set_ScaleState_mF6CB366B4254BE88EDB1532FC60A0401FFB4BC20_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1728));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1729));
	{
		// public ScaleState ScaleState { get; private set; } = ScaleState.Static;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 1730));
		int32_t L_0 = ___value0;
		__this->set_U3CScaleStateU3Ek__BackingField_20(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR RuntimeObject* SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_inline (SourceStateEventData_tC17E9EB097E08CCA954A82FAEAC9D010CF8798F8 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SourceStateEventData_get_Controller_m3935B78C6E7B8158323E0D92A3C1016CF59B72BC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 26842));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 26843));
	{
		// public IMixedRealityController Controller { get; private set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 26844));
		RuntimeObject* L_0 = __this->get_U3CControllerU3Ek__BackingField_5();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BB_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BBMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_set_UpdateSolvers_m5F1292416809AE3834FC68DC24F1A3945BFEF5BB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5113));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5114));
	{
		// set => updateSolvers = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5115));
		bool L_0 = ___value0;
		__this->set_updateSolvers_10(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_DefaultDistance_mC544FE5333ED12EAA596463CED97E5C5CA0AB69F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2219));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2220));
	{
		// get => defaultDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2221));
		float L_0 = __this->get_defaultDistance_20();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_IgnoreReferencePitchAndRoll_m6EC7D8D4C83E4C43C81E69C37D8D9EB75629A92D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2261));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2262));
	{
		// get => ignoreReferencePitchAndRoll;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2263));
		bool L_0 = __this->get_ignoreReferencePitchAndRoll_27();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxViewVerticalDegrees_m6BF9B7EB4D84E43004AB04608D4B2C4678167C09_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2231));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2232));
	{
		// get => maxViewVerticalDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2233));
		float L_0 = __this->get_maxViewVerticalDegrees_22();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxViewHorizontalDegrees_mA8E4C6AC0BC1BD65E00EF9834386BC8F7514D526_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2225));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2226));
	{
		// get => maxViewHorizontalDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2227));
		float L_0 = __this->get_maxViewHorizontalDegrees_21();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_PitchOffset_mFF0CA367172DE3158C76164AB5B7846F3187FF12_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2267));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2268));
	{
		// get => pitchOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2269));
		float L_0 = __this->get_pitchOffset_28();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MinDistance_m40B582E9CF9351EFAF75C5FA290E7CEB8AAB4673_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2207));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2208));
	{
		// get => minDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2209));
		float L_0 = __this->get_minDistance_18();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677CMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_MaxDistance_m06A1D1CB3F237612D90461BD77920E27FD30677C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2213));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2214));
	{
		// get => maxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2215));
		float L_0 = __this->get_maxDistance_19();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_VerticalMaxDistance_m3B3AC1F64AB163306B81605EED326DB071BA861D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2273));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2274));
	{
		// get => verticalMaxDistance;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2275));
		float L_0 = __this->get_verticalMaxDistance_29();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_OrientationType_mCC672EE246770766800076534CD2B045C17EDB49_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2177));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2178));
	{
		// get => orientationType;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2179));
		int32_t L_0 = __this->get_orientationType_13();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BFMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_OrientToControllerDeadzoneDegrees_m799BC55EFFB0EC67503C5E5FC37CED03F0C2C0BF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2243));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2244));
	{
		// get => orientToControllerDeadzoneDegrees;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2245));
		float L_0 = __this->get_orientToControllerDeadzoneDegrees_24();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_FaceUserDefinedTargetTransform_m98814FEF6EA8ECF9FB3963F3152315E6E867D221_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2189));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2190));
	{
		// get => faceUserDefinedTargetTransform;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2191));
		bool L_0 = __this->get_faceUserDefinedTargetTransform_15();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2DMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_TargetToFace_mCC08448E898DC70A31322C7E2B9F1A7CE9F75A2D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2195));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2196));
	{
		// get => targetToFace;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2197));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = __this->get_targetToFace_16();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_PivotAxis_mC446C12EDF113EC4541C5A48928E3942B64E4FCC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2201));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2202));
	{
		// get => pivotAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2203));
		int32_t L_0 = __this->get_pivotAxis_17();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_inline (Follow_t9DB6F7A54C2EB3C6AEE2AC8CD0388E257AD87F8A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACCMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Follow_get_FaceTrackedObjectWhileClamped_m677E472BF9A5242A04D73E24B4AA04B4B7C0BACC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2183));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2184));
	{
		// get => faceTrackedObjectWhileClamped;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2185));
		bool L_0 = __this->get_faceTrackedObjectWhileClamped_14();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_TrackedTargetType_m8B945650E4670B7054B9E9FEB918E24DB812A832_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5015));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5016));
	{
		// get => trackedTargetType;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5017));
		int32_t L_0 = __this->get_trackedTargetType_4();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR uint8_t SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_CurrentTrackedHandedness_m6BCEFD52250D072C7D8AE581C281ADF41FB5EF29_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5176));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5177));
	{
		// public Handedness CurrentTrackedHandedness => currentTrackedHandedness;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5178));
		uint8_t L_0 = __this->get_currentTrackedHandedness_18();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnFirstHandDetected_mEB5ACF69F145BEA800CC4CA564B9CF62580E1C09_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2923));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2924));
	{
		// get => onFirstHandDetected;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2925));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onFirstHandDetected_24();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnHandActivate_m00F6414E6AD94C2174A28F58B1FD28824CF44653_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2911));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2912));
	{
		// get => onHandActivate;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2913));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onHandActivate_22();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6ABMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnLastHandLost_mDBE9B86583A515D43BA7041CB23B692336BCD6AB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2929));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2930));
	{
		// get => onLastHandLost;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2931));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onLastHandLost_25();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FDMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OnHandDeactivate_m9BD3D6E4222A5528ADF3BB351EBCC4BCD75EE5FD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2917));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2918));
	{
		// get => onHandDeactivate;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2919));
		UnityEvent_t5C6DDC2FCDF7F5C1808F1DDFBAD27A383F5FE65F * L_0 = __this->get_onHandDeactivate_23();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4_inline (HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandBounds_get_LocalBounds_m2E8172AB347CAC58A5A3EF4D2B7AC88D0258F2F4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28692));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28693));
	{
		// public Dictionary<Handedness, Bounds> LocalBounds { get; private set; } = new Dictionary<Handedness, Bounds>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28694));
		Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * L_0 = __this->get_U3CLocalBoundsU3Ek__BackingField_5();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6BMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_OffsetBehavior_m3A07CD9D69AB9C0F2C2911C12F400CB9A595FD6B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2893));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2894));
	{
		// get => offsetBehavior;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2895));
		int32_t L_0 = __this->get_offsetBehavior_19();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_ForwardOffset_m362792B799EBACA397BE20294865C0F74A5360D6_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2899));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2900));
	{
		// get => forwardOffset;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2901));
		float L_0 = __this->get_forwardOffset_20();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_AdditionalRotation_m4086995848CC11A39176517C977F1E5EEEE3A135_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5095));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5096));
	{
		// get => additionalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5097));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_additionalRotation_9();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_inline (HandBounds_tCBFD82D27C829359F111583E90BB9259EC1BD76E * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandBounds_get_Bounds_m69F30F7320B5E2AB34AF6B7D7F45FDB3302F8C56_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28686));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28687));
	{
		// public Dictionary<Handedness, Bounds> Bounds { get; private set; } = new Dictionary<Handedness, Bounds>();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit + 28688));
		Dictionary_2_t3B4605E8EC4E8107524B4E949057774FBE3E92D0 * L_0 = __this->get_U3CBoundsU3Ek__BackingField_4();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR float HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_inline (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BDMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_get_FacingCameraTrackingThreshold_m9F145A136EE5BFD5AAD39B4870003E13C16A05BD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3544));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3545));
	{
		// get => facingCameraTrackingThreshold;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3546));
		float L_0 = __this->get_facingCameraTrackingThreshold_30();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_inline (HandConstraintPalmUp_t49DCE95920B8360DD05A07551376AB084FBC23E6 * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraintPalmUp_set_FacingCameraTrackingThreshold_mB19C797F9C8251A4CE64446DAC5485C1E01FEFB7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3547));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3548));
	{
		// set => facingCameraTrackingThreshold = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 3549));
		float L_0 = ___value0;
		__this->set_facingCameraTrackingThreshold_30(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CEMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_RotationBehavior_mBAF4BBA970FF8F87483A25106E4ED4D04CD2B5CE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2890));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2891));
	{
		// set => rotationBehavior = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2892));
		int32_t L_0 = ___value0;
		__this->set_rotationBehavior_18(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_set_OffsetBehavior_m673CE992A3056C803BA14BF8AF7558C36FD094C8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2896));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2897));
	{
		// set => offsetBehavior = value;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2898));
		int32_t L_0 = ___value0;
		__this->set_offsetBehavior_19(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4_inline (SolverHandler_tB266A703760FDE8F574DAB22078E58FBD4F181FE * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SolverHandler_get_UpdateSolvers_m45F18855C527B94C7BEB08B582B04DA0DE9DD8B4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5110));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5111));
	{
		// get => updateSolvers;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 5112));
		bool L_0 = __this->get_updateSolvers_10();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_inline (HandConstraint_t528398D60853162E133DBC0177DA60D866EAD98A * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89BMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, HandConstraint_get_SafeZone_mA3CDB031F98C4688299381EC4023FFA5AC8FF89B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2863));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2864));
	{
		// get => safeZone;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsMicrosoft_MixedReality_Toolkit_SDK + 2865));
		int32_t L_0 = __this->get_safeZone_14();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR int32_t List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22_gshared_inline (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, List_1_get_Count_m507C9149FF7F83AAC72C29091E745D557DA47D22_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		int32_t L_0 = (int32_t)__this->get__size_2();
		return (int32_t)L_0;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR RuntimeObject * List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588_gshared_inline (List_1_t05CC3C859AB5E6024394EF9A42E3E696628CA02D * __this, int32_t ___index0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588Microsoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, List_1_get_Item_mFDB8AD680C600072736579BBF5F38F7416396588_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		int32_t L_0 = ___index0;
		int32_t L_1 = (int32_t)__this->get__size_2();
		if ((!(((uint32_t)L_0) >= ((uint32_t)L_1))))
		{
			goto IL_000e;
		}
	}
	{
		ThrowHelper_ThrowArgumentOutOfRangeException_mBA2AF20A35144E0C43CD721A22EAC9FCA15D6550(/*hidden argument*/NULL);
	}

IL_000e:
	{
		ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A* L_2 = (ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A*)__this->get__items_1();
		int32_t L_3 = ___index0;
		RuntimeObject * L_4 = IL2CPP_ARRAY_UNSAFE_LOAD((ObjectU5BU5D_t3C9242B5C88A48B2A5BD9FDA6CD0024E792AF08A*)L_2, (int32_t)L_3);
		return (RuntimeObject *)L_4;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR uint8_t Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EB_gshared_inline (Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EBMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Nullable_1_GetValueOrDefault_m0F69127464EA2230329E51E650FC4FBAD21960EB_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		uint8_t L_0 = (uint8_t)__this->get_value_0();
		return (uint8_t)L_0;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR bool Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4F_gshared_inline (Nullable_1_tAD3D374B25057F9C5F22F267FE9A4F0EE5F82152 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Nullable_1_get_HasValue_m395EA5F248148274CEE1ED1C59FC628330033A4F_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		bool L_0 = (bool)__this->get_has_value_1();
		return (bool)L_0;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR RuntimeObject * Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5F_gshared_inline (Enumerator_t16164AEE5BCAD6A8A04C21F32E9D949BE1CA0133 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5FMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Enumerator_get_Current_m1499866DFEFE1948C928A86AC372B4F9E04D1A5F_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		RuntimeObject * L_0 = (RuntimeObject *)__this->get__current_3();
		return (RuntimeObject *)L_0;
	}
}
IL2CPP_EXTERN_C inline IL2CPP_METHOD_ATTR bool Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_gshared_inline (Nullable_1_t92030C1B0D79AFB22EEDBBF1A557B9753EACB00F * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FEMicrosoft_MixedReality_Toolkit_SDK14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, Nullable_1_get_HasValue_m2EB14ACFCE1056456EC6F688E52FCB51228B02FE_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		bool L_0 = (bool)__this->get_has_value_1();
		return (bool)L_0;
	}
}
